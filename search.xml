<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Springboot优雅的验证接口参数</title>
      <link href="/2022/02/25/springboot-you-ya-de-yan-zheng-jie-kou-can-shu/"/>
      <url>/2022/02/25/springboot-you-ya-de-yan-zheng-jie-kou-can-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>　　在后端写接口时，时常需要接收其他应用调用接口时所发送过来的参数，而往往这些参数后端使用时都需在使用前验证他们的合法性，已保证程序的安全性。一般情况下都是接收到参数然后直接用 if-else 来做判断，代码如下：</p><pre class="line-numbers language-none"><code class="language-none">@PostMapping("/test")@ApiOperation("测试接口")@CrossOrigin@ApiImplicitParams({        @ApiImplicitParam(name = "identify", value = "活动标识", required = true, paramType = "query"),        @ApiImplicitParam(name = "iptvId", value = "Iptv用户ID", required = true, paramType = "query"),        @ApiImplicitParam(name = "name", value = "姓名", required = true, paramType = "query"),        @ApiImplicitParam(name = "phone", value = "手机号", required = true, paramType = "query"),        @ApiImplicitParam(name = "address", value = "地址", required = true, paramType = "query"),        @ApiImplicitParam(name = "token", value = "加密串", required = true, paramType = "query")})public ResultApi test(String identify, String iptvId, String name, String phone, String address, String token) {    if (StringUtils.isBlank(identify)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(iptvId)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(name)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(phone)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(address)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(token)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    return ResultApi.success();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里虽仅仅接收了5个参数，但需要用来做验证的代码就显得如此冗长了。如果是接收几十个甚至上百个参数，那么验证代码的长度可想而知。做为一个代码逻辑写得不怎样缺始终保持着良好代码风格的人来说，这样子做肯定是不允许的。接下来就简单地介绍一下如何使用 validation 来干净利落的接收接口的参数并进行验证。</p><h2 id="validation-简介"><a href="#validation-简介" class="headerlink" title="validation 简介"></a>validation 简介</h2><p>　　JSR303 是一项标准,只提供规范不提供实现，规定一些校验规范即校验注解，如@Null，@NotNull，@Pattern，位于javax.validation.constraints包下。JSR-349是其的升级版本，添加了一些新特性。hibernate validation 是对这个规范的实现，并增加了一些其他校验注解，如@Email，@Length，@Range等等。</p><h3 id="约束注解"><a href="#约束注解" class="headerlink" title="约束注解"></a>约束注解</h3><p>Bean Validation 提供了众多可以约束属性值的注解，如下：</p><p>@Null：被注释的元素必须为null</p><p>@NotNull：被注释的元素必须不为null</p><p>@AssertTrue：被注释的元素必须为 true</p><p>@AssertFalse：被注释的元素必须为 false</p><p>@Min(value)：被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@Max(value)：被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p><p>@DecimalMin(value)：被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@DecimalMax(value)：被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p><p>@Size(max, min)：被注释的元素的大小必须在指定的范围内</p><p>@Digits (integer, fraction)：被注释的元素必须是一个数字，其值必须在可接受的范围内</p><p>@Past：被注释的元素必须是一个过去的日期</p><p>@Future：被注释的元素必须是一个将来的日期</p><p>@Pattern(value)：被注释的元素必须符合指定的正则表达式</p><p>在Bean Validation 的基础上 Hibernate Validator 又添加了如下几项约束：</p><p>@Email：被注释的元素必须是电子邮箱地址</p><p>@Length：被注释的字符串的大小必须在指定的范围内</p><p>@NotEmpty：被注释的字符串的必须非空</p><p>@Range：被注释的元素必须在合适的范围内</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>　　Bean Validation 和 Hibernate Validator 提供的注解足以满足一般情景下的使用需求，接下来直接使用 Validation 来对代码做修改。<br>　　我们先新建一个用来装载参数的bean，并将先前的接口做以下修改。</p><pre class="line-numbers language-none"><code class="language-none">@ApiModelpublic class ApiIptvUserAddressTestDTO implements Serializable {    @ApiModelProperty(name = "活动标识")    @NotBlank(message = "活动标识不能为空")    private String identify;    @ApiModelProperty(name = "IPTVId")    @NotBlank(message = "IPTVId不能为空")    private String iptvId;    @ApiModelProperty(name = "姓名")    private String name;    @ApiModelProperty(name = "手机号")    @Length(max = 11,message = "手机号不合法")    private String phone;    @ApiModelProperty(name = "地址")    private String address;    @ApiModelProperty(name = "加密串")    @NotBlank(message = "加密串不能为空")    private String token;    public String getIdentify() { return identify; }    public void setIdentify(String identify) { this.identify = identify; }    public String getIptvId() { return iptvId; }    public void setIptvId(String iptvId) { this.iptvId = iptvId; }    public String getName() { return name; }    public void setName(String name) { this.name = name; }    public String getPhone() { return phone; }    public void setPhone(String phone) { this.phone = phone; }    public String getAddress() { return address; }    public void setAddress(String address) { this.address = address; }    public String getToken() { return token; }    public void setToken(String token) { this.token = token; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@PostMapping("/test")@ApiOperation("测试接口")@CrossOriginpublic ResultApi test(@Validated ApiIptvUserAddressTestDTO dto) {        return ResultApi.success();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里需要使用 @Validated 注解来对 dto 进行标注，不然 dto 里面的参数约束注解并不会生效，这一点很重要。<br>　　经过这样一修改就可以把烦人且冗长的参数验证代码剥离到 DTO 中进行处理了，给 Controller 中腾出更多的空间去写业务代码，代码还美观。</p><p>　　为了更方便的去统一接口返回的参数状态码，我们还需要去实现一个全局的异常捕捉方法，对参数验证不通过的BindException异常进行捕捉并处理，实现方法如下：</p><pre class="line-numbers language-none"><code class="language-none">@RestControllerAdvicepublic class RRExceptionHandler {    /**   * 参数验证   */  @ExceptionHandler(BindException.class)  public ResultApi handleBindException(BindException e) {    logger.error(e.getBindingResult().getFieldError().getDefaultMessage());    return ResultApi.error(10002,e.getBindingResult().getFieldError().getDefaultMessage());  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>　　使用 validation 对参数进行验证有着让代码更为简洁美观的优点，同时还可以使用现有的注解对参数进行验证，可以减轻开发的工作量。但同时缺点也很明显，引入较多的DTO会使项目的文件越来越多。写出一手整洁、注释清晰的代码，可以为后续的代码维护工作打下良好的基石，所以使用 validation 对参数进行验证还是利大于弊的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Springboot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成Swagger3.0</title>
      <link href="/2022/02/25/springboot-ji-cheng-swagger3.0/"/>
      <url>/2022/02/25/springboot-ji-cheng-swagger3.0/</url>
      
        <content type="html"><![CDATA[<h2 id="Swagger-3-0"><a href="#Swagger-3-0" class="headerlink" title="Swagger 3.0"></a>Swagger 3.0</h2><p>Swagger 是一套基于 OpenAPI 规范（OpenAPI Specification，OAS）构建的开源工具，后来成为了 Open API 标准的主要定义者，现在最新的版本为17年发布的 Swagger3（Open Api3）。 </p><p>OAS本身是一个API规范，它用于描述一整套API接口，包括一个接口是哪种请求方式、哪些参数、哪些header等，都会被包括在这个文件中。它在设计的时候通常是YAML格式，这种格式书写起来比较方便，而在网络中传输时又会以json形式居多，因为json的通用性比较强。</p><p>SpringFox是 spring 社区维护的一个项目（非官方），帮助使用者将 swagger2 集成到 Spring 中。</p><h2 id="Swagger-包含以下三部分"><a href="#Swagger-包含以下三部分" class="headerlink" title="Swagger 包含以下三部分"></a>Swagger 包含以下三部分</h2><ul><li>Swagger Editor：基于浏览器的编辑器，我们可以使用它编写我们 OpenAPI 规范。</li><li>Swagger UI：它会将我们编写的 OpenAPI 规范呈现为交互式的 API 文档，后文我将使用浏览器来查看并且操作我们的 Rest API。</li><li>Swagger Codegen：它可以通过为 OpenAPI（以前称为 Swagger）规范定义的任何 API 生成服务器存根和客户端 SDK 来简化构建过程。<h2 id="SpringFox-3-0-0-发布"><a href="#SpringFox-3-0-0-发布" class="headerlink" title="SpringFox 3.0.0 发布"></a>SpringFox 3.0.0 发布</h2></li><li>SpringFox 3.0.0 发布了，SpringFox 的前身是 swagger-springmvc，是一个开源的 API doc 框架，可以将 Controller 的方法以文档的形式展现。</li><li>首先，非常感谢社区让我有动力参与这个项目。在这个版本中，在代码、注释、bug报告方面有一些非常惊人的贡献，看到人们在问题论坛上跳槽来解决问题，我感到很谦卑。它确实激励我克服“困难”，开始认真地工作。有什么更好的办法来摆脱科维德的忧郁！</li><li>注意：这是一个突破性的变更版本，我们已经尽可能地保持与springfox早期版本的向后兼容性。在2.9之前被弃用的api已经被积极地删除，并且标记了将在不久的将来消失的新api。所以请注意这些，并报告任何遗漏的内容。<h2 id="兼容性说明"><a href="#兼容性说明" class="headerlink" title="兼容性说明"></a>兼容性说明</h2></li><li>需要Java 8</li><li>需要Spring5.x</li><li>需要SpringBoot 2.2+<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2>这里使用Maven依赖包。<h3 id="Maven依赖安装"><a href="#Maven依赖安装" class="headerlink" title="Maven依赖安装"></a>Maven依赖安装</h3>在依赖文件中引入 springfox-boot-starter<pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;    &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置application-yml文件"><a href="#配置application-yml文件" class="headerlink" title="配置application.yml文件"></a>配置application.yml文件</h3><pre class="line-numbers language-none"><code class="language-none"># swagger 文档相关配置swagger:  enable: true  name: xxx系统  # 版本号  version: 1.0.0  description: xxx接口文档  # 扫描的包名前缀  base-package: com.gxxmt.cloud.carousel.modules  auth-name: xxxx  auth-email: xxx@qq.com  auth-url:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定swagger配置类获取配置"><a href="#自定swagger配置类获取配置" class="headerlink" title="自定swagger配置类获取配置"></a>自定swagger配置类获取配置</h3><pre class="line-numbers language-none"><code class="language-none">package com.gxxmt.cloud.carousel.common.swagger;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties("swagger")public class SwaggerProperties {    /**     * 是否开启swagger     */    private Boolean enable;    /**     * 项目应用名     */    private String name;    /**     * 项目版本信息     */    private String version;    /**     * 项目描述信息     */    private String description;    /**     * 包名前缀     */    private String basePackage;    /**     * 作者名称     */    private String authName;    /**     * 作者邮箱     */    private String authEmail;    /**     * 作者空间     */    private String authUrl;    public Boolean getEnable() {        return enable;    }    public void setEnable(Boolean enable) {        this.enable = enable;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getVersion() {        return version;    }    public void setVersion(String version) {        this.version = version;    }    public String getDescription() {        return description;    }    public void setDescription(String description) {        this.description = description;    }    public String getBasePackage() {        return basePackage;    }    public void setBasePackage(String basePackage) {        this.basePackage = basePackage;    }    public String getAuthName() {        return authName;    }    public void setAuthName(String authName) {        this.authName = authName;    }    public String getAuthEmail() {        return authEmail;    }    public void setAuthEmail(String authEmail) {        this.authEmail = authEmail;    }    public String getAuthUrl() {        return authUrl;    }    public void setAuthUrl(String authUrl) {        this.authUrl = authUrl;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-EnableOpenApi注解，启用swagger配置"><a href="#使用-EnableOpenApi注解，启用swagger配置" class="headerlink" title="使用@EnableOpenApi注解，启用swagger配置"></a>使用@EnableOpenApi注解，启用swagger配置</h3><pre class="line-numbers language-none"><code class="language-none">package com.gxxmt.cloud.carousel.common.swagger;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.oas.annotations.EnableOpenApi;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;/** * @Auther:  * @Date:  * @Description: */@Configuration@EnableOpenApipublic class SwaggerConfiguration {    private final SwaggerProperties swaggerProperties;    public SwaggerConfiguration(SwaggerProperties swaggerProperties) {        this.swaggerProperties = swaggerProperties;    }    @Bean    public Docket docket(){        return new Docket(DocumentationType.OAS_30)                .enable(swaggerProperties.getEnable())                .apiInfo(apiInfo())                .select()                //apis： 添加swagger接口提取范围                .apis(RequestHandlerSelectors.basePackage(swaggerProperties.getBasePackage()))                //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))                .paths(PathSelectors.any())                .build();    }    private ApiInfo apiInfo(){        return new ApiInfoBuilder()                .title(swaggerProperties.getName())                .description(swaggerProperties.getDescription())                .contact(new Contact(swaggerProperties.getAuthName(), swaggerProperties.getAuthUrl(), swaggerProperties.getAuthEmail()))                .version(swaggerProperties.getVersion())                .build();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Swagger-注解使用"><a href="#Swagger-注解使用" class="headerlink" title="Swagger 注解使用"></a>Swagger 注解使用</h2><h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3>该注解将一个Controller（Class）标注为一个swagger资源（API）。</li><li>tags<br>API分组标签。具有相同标签的API将会被归并在一组内展示。</li><li>value<br>如果tags没有定义，value将作为Api的tags使用</li><li>description<br>API的详细描述，在1.5.X版本之后不再使用，但实际发现在2.0.0版本中仍然可以使用<h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3>该注解在指定的（路由）路径上，对一个操作或HTTP方法进行描述。</li><li>value<br>对操作的简单说明，长度为120个字母，60个汉字。</li><li>notes<br>对操作的详细说明。</li><li>httpMethod<br>HTTP请求的动作名，可选值有：”GET”, “HEAD”, “POST”, “PUT”, “DELETE”, “OPTIONS” and “PATCH”。</li><li>code<br>默认为200，有效值必须符合标准的HTTP Status Code Definitions。<h3 id="ApiImplicitParams"><a href="#ApiImplicitParams" class="headerlink" title="@ApiImplicitParams"></a>@ApiImplicitParams</h3>注解ApiImplicitParam的容器类，以数组方式存储。<h3 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a>@ApiImplicitParam</h3>对API的单一参数进行注解。</li><li>name<br>参数名称</li><li>value<br>参数的简短描述</li><li>required<br>是否为必传参数</li><li>dataType<br>参数类型，可以为类名，也可以为基本类型（String，int、boolean等）</li><li>paramType<br>参数的传入（请求）类型，可选的值有path, query, body, header or form。<h3 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a>@ApiParam</h3>增加对参数的元信息说明。</li><li>required<br>是否为必传参数</li><li>value<br>参数简短说明<h3 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a>@ApiResponses</h3>注解@ApiResponse的包装类，数组结构。<h3 id="ApiResponse"><a href="#ApiResponse" class="headerlink" title="@ApiResponse"></a>@ApiResponse</h3>描述一个操作可能的返回结果。</li><li>code<br>HTTP请求返回码。有效值必须符合标准的HTTP Status Code Definitions。</li><li>message<br>更加易于理解的文本消息</li><li>response<br>返回类型信息，必须使用完全限定类名，比如“com.xyz.cc.Person.class”。</li><li>responseContainer<br>如果返回类型为容器类型，可以设置相应的值。有效值为 “List”, “Set” or “Map”，其他任何无效的值都会被忽略。<h2 id="Model-注解"><a href="#Model-注解" class="headerlink" title="Model 注解"></a>Model 注解</h2>对于Model的注解，Swagger提供了两个：@ApiModel及@ApiModelProperty，分别用以描述Model及Model内的属性。<h3 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a>@ApiModel</h3>&amp;ensp;&amp;ensp;&amp;ensp;提供对Swagger model额外信息的描述。在标注@ApiOperation注解的操作内，所有的类将自动被内省（introspected），但利用这个注解可以做一些更加详细的model结构说明。主要属性有：</li><li>value<br>model的别名，默认为类名  </li><li>description<br>model的详细描述  <h3 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="@ApiModelProperty"></a>@ApiModelProperty</h3>对model属性的注解，主要的属性值有：</li><li>value<br>属性简短描述</li><li>example<br>属性的示例值</li><li>required<br>是否为必须值<h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><h4 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h4><pre class="line-numbers language-none"><code class="language-none">@RestController@RequestMapping("/test")@Api(tags = "测试接口")public class TestController {    @PostMapping("/test")    @ApiOperation("剪切测试")    @ApiImplicitParams({            @ApiImplicitParam(name = "id", value = "索引", required = true, dataType = "int"),            @ApiImplicitParam(name = "name", value = "姓名", required = true, dataType = "String"),    })    @ApiResponses({            @ApiResponse(responseCode = "401", description = "权限不足"),            @ApiResponse(responseCode = "404", description = "路径错误")}    )    public RestResponse test(Integer id, String name) {        return RestResponse.success();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-ApiModel注解"><a href="#使用-ApiModel注解" class="headerlink" title="使用@ApiModel注解"></a>使用@ApiModel注解</h4><pre class="line-numbers language-none"><code class="language-none">package com.gxxmt.cloud.carousel.modules.test;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;@ApiModel(value = "test", description = "测试model")public class TestModel {    @ApiModelProperty(value = "索引", name = "id", example = "1", required = true)    private Integer id;    @ApiModelProperty(value = "名称", name = "name", example = "WSC", required = true)    private String name;    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@RestController@RequestMapping("/test")@Api(tags = "测试接口")public class TestController {    @PostMapping("/test2")    @ApiOperation("剪切测试")    public RestResponse test2(@RequestBody TestModel model) {        return RestResponse.success();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Java </tag>
            
            <tag> Swagger3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-table些使用技巧</title>
      <link href="/2022/02/25/el-table-xie-shi-yong-ji-qiao/"/>
      <url>/2022/02/25/el-table-xie-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近开发中使用到 element-ui 这个前端框架，在管理后台项目开发中使用最频繁的应该是表格控件了。所以整理一些使用el-table实现的特殊功能方法。</p><h2 id="el-table-懒加载树状表格手风琴模式"><a href="#el-table-懒加载树状表格手风琴模式" class="headerlink" title="el-table 懒加载树状表格手风琴模式"></a>el-table 懒加载树状表格手风琴模式</h2><p>el-table 在官方提供的功能中，树状表格是不提供手风琴模式的，（手风琴模式即展开某项，其他不关联且已展开项自动关闭），可以自己用以下代码实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 展开行 */</span><span class="token function">expandChange</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> expanded</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>isLeaf <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">.</span>hasChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fatherIds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> treeList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>treeData<span class="token punctuation">;</span>    <span class="token comment">// eslint-disable-next-line no-unused-vars</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> treeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token function">String</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fatherIds<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 关闭除了父节点以外的节点</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>treeData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'expanded'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 获取所有父节点ID</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> treeList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>treeData<span class="token punctuation">;</span>  <span class="token keyword">const</span> fatherIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// eslint-disable-next-line no-unused-vars</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> treeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> children <span class="token operator">=</span> treeList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fatherIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fatherIds<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> fatherIds<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="el-table懒加载树状表格刷新节点"><a href="#el-table懒加载树状表格刷新节点" class="headerlink" title="el-table懒加载树状表格刷新节点"></a>el-table懒加载树状表格刷新节点</h2><p>在 el-table 懒加载树状表格模式中，官方并不提供主动去刷新某个节点数据的方法，可以用以下代码实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>el<span class="token operator">-</span>table    ref<span class="token operator">=</span><span class="token string">"stencilTable"</span>    v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">"listLoading"</span>    highlight<span class="token operator">-</span>current<span class="token operator">-</span>row    style<span class="token operator">=</span><span class="token string">"margin-top:10px;"</span>    size<span class="token operator">=</span><span class="token string">"mini"</span>    border    row<span class="token operator">-</span>key<span class="token operator">=</span><span class="token string">"id"</span>    <span class="token literal-property property">lazy</span>    <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"list"</span>    <span class="token operator">:</span>height<span class="token operator">=</span><span class="token string">"510"</span>    <span class="token operator">:</span>load<span class="token operator">=</span><span class="token string">"load"</span>    <span class="token operator">:</span>tree<span class="token operator">-</span>props<span class="token operator">=</span><span class="token string">"defaultProps"</span>  <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column type<span class="token operator">=</span><span class="token string">"selection"</span> align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"40"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">listLoading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">20</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">expandRow</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">'children'</span><span class="token punctuation">,</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>        <span class="token literal-property property">hasChildren</span><span class="token operator">:</span> <span class="token string">'hasChildren'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">maps</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">parentNode</span><span class="token operator">:</span> tree<span class="token punctuation">.</span>id      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> stencilManager<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/**     * 加载列表     */</span>    <span class="token keyword">async</span> <span class="token function">loadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">parentNode</span><span class="token operator">:</span> <span class="token string">'1'</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> stencilManager<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/**     * 刷新节点     */</span>    <span class="token function">refreshNode</span><span class="token punctuation">(</span><span class="token parameter">parentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>lazyTreeNodeMap<span class="token punctuation">,</span> parentId<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="el-table懒加载树状表格主动加载节点数据并展开"><a href="#el-table懒加载树状表格主动加载节点数据并展开" class="headerlink" title="el-table懒加载树状表格主动加载节点数据并展开"></a>el-table懒加载树状表格主动加载节点数据并展开</h2><p>在使用 el-table 中经常会用到自动展开某项的功能，官方虽然提供有类似功能，但在el-table使用懒加载的模式下该功能并不能正常使用。可以自已使用以下代码实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>el<span class="token operator">-</span>table    ref<span class="token operator">=</span><span class="token string">"stencilTable"</span>    v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">"listLoading"</span>    highlight<span class="token operator">-</span>current<span class="token operator">-</span>row    style<span class="token operator">=</span><span class="token string">"margin-top:10px;"</span>    size<span class="token operator">=</span><span class="token string">"mini"</span>    border    row<span class="token operator">-</span>key<span class="token operator">=</span><span class="token string">"id"</span>    <span class="token literal-property property">lazy</span>    <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"list"</span>    <span class="token operator">:</span>height<span class="token operator">=</span><span class="token string">"510"</span>    <span class="token operator">:</span>load<span class="token operator">=</span><span class="token string">"load"</span>    <span class="token operator">:</span>tree<span class="token operator">-</span>props<span class="token operator">=</span><span class="token string">"defaultProps"</span>  <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column type<span class="token operator">=</span><span class="token string">"selection"</span> align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"40"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">&gt;</span><span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">parentNode</span><span class="token operator">:</span> tree<span class="token punctuation">.</span>id  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> stencilManager<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 加载并展开节点</span><span class="token keyword">async</span> <span class="token function">loadNode</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> lazyTreeNodeMap<span class="token punctuation">,</span> treeData <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">[</span><span class="token string">'store'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>states<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'loading'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        ids<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>lazyTreeNodeMap<span class="token punctuation">,</span> id<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'loading'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'loaded'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'expanded'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>hasChildren <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="el-table懒加载树状表格获取节点父节点"><a href="#el-table懒加载树状表格获取节点父节点" class="headerlink" title="el-table懒加载树状表格获取节点父节点"></a>el-table懒加载树状表格获取节点父节点</h2><p>在el-table官方提供的API中没有获取节点父节点的方法，可以用一下方法获取到所有父节点。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取所有父节点ID</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> treeList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>treeData<span class="token punctuation">;</span>  <span class="token keyword">const</span> fatherIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// eslint-disable-next-line no-unused-vars</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> treeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> children <span class="token operator">=</span> treeList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fatherIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fatherIds<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> fatherIds<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在日常开发中，及时整理记录已使用过的方法可以提高日后开发的效率。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue自定义组件之时间输入框</title>
      <link href="/2022/02/25/vue-zi-ding-yi-zu-jian-zhi-shi-jian-shu-ru-kuang/"/>
      <url>/2022/02/25/vue-zi-ding-yi-zu-jian-zhi-shi-jian-shu-ru-kuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在使用 element-ui 框架的前端项目开发中遇到一个棘手的问题，项目中使用的时间输入框需要支持时分秒毫秒的输入，而且时间最大范围还需要超过24小时，但 element-ui 中自带的时间输入框的范围只支持 00:00:00 到 23:59:59。所以我们就需要自定义开发一个符合自身需求的组件。  </p><h2 id="组件功能"><a href="#组件功能" class="headerlink" title="组件功能"></a>组件功能</h2><p>因为组件要追求输入的便捷性，也就是越方便越好，所以组件需要支持时分秒毫秒独立输入。为了方便阅读，输入后显示的格式为 HH:mm:ss.SS，而且中间的“:”以及“.”符号要固定。毫秒这个单位不经常用，所以需要自动补全。时间只有数字，所以也要限定只能输入数字。 组件需要在多处重复使用，所以组件要支持复用。功能总结如下：  </p><ol><li>支持时分秒毫秒独立输入。</li><li>显示格式为 HH:mm:ss.SS。</li><li>数字自动补全。</li><li>限定输入字符。</li><li>自动纠错。</li><li>支持复用。<h2 id="方案设想"><a href="#方案设想" class="headerlink" title="方案设想"></a>方案设想</h2></li></ol><ul><li><strong>方案一：</strong><br>单独一个用文本输入框，限定文本的类型，监听输入框的动作，然后进行结果处理。优点：输入框样式不需要进行太多的处理。缺点：时分秒毫秒不方便独立输入，处理结果流程复杂。</li><li><strong>方案二：</strong><br>使用三个独立的文本输入框，监听每个输入框的动作，然后进行结果处理。优点：结果处理简单。缺点：输入框样式进行处理复杂，不能进行组合输入。</li></ul><p>结合方案一和方案二，选用方案二。</p><h2 id="方案实施"><a href="#方案实施" class="headerlink" title="方案实施"></a>方案实施</h2><p><strong>页面元素布局</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sw-time-input"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-hour'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hour"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-hour"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('hour', hour)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('hour', hour)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('hour', hour)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('hour', hour)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-minute'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"minute"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-minute"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"60"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('minute', minute)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('minute', minute)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('minute', minute)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('minute', minute)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-second'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"second"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-second"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"60"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('second', second)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('second', second)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('second', second)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('second', second)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-millisecond'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"millisecond"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-millisecond"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('millisecond', millisecond)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('millisecond', millisecond)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('millisecond', millisecond)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('millisecond', millisecond)"</span>    <span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">&gt;</span><span class="token comment">/* 最外层DIV样式 */</span><span class="token punctuation">.</span>sw<span class="token operator">-</span>time<span class="token operator">-</span>input <span class="token punctuation">{</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>5px<span class="token punctuation">;</span>    border<span class="token operator">-</span>color<span class="token operator">:</span> #dcdfe6<span class="token punctuation">;</span>    border<span class="token operator">-</span>style<span class="token operator">:</span> solid<span class="token punctuation">;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> 85px<span class="token punctuation">;</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 3px<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>time<span class="token operator">-</span>input<span class="token operator">-</span>text <span class="token punctuation">{</span>        <span class="token comment">/* 时输入DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>hour <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> right<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 分输入DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>minute <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 秒输入DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>second <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 毫秒输入DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>millisecond <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> left<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 分隔符DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>separate <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            margin<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token operator">-</span>4px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token operator">-</span>4px<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 去除浏览器默认样式 */</span>    <span class="token literal-property property">input</span><span class="token operator">:</span>focus<span class="token punctuation">{</span>        <span class="token literal-property property">outline</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> 0px solid pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在元素布局这块，使用四个Vue 原生的 input 组件，分别将输入的值定为时、分、秒、毫秒, 尽量使它们的内边距以及外边距缩小，去除浏览器输入时默认的样式，去除单个输入框的边框，给整个组件加上一个最外的边框。</p><h3 id="粘贴功能"><a href="#粘贴功能" class="headerlink" title="粘贴功能"></a>粘贴功能</h3><p>在每个输入框的 @input 事件中处理粘贴功能。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 自动解析输入 */</span><span class="token function">autoInput</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}.\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> strs2 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当单个输入的值匹配 /^\d{2}:\d{2}:\d{2}$/g 表达式时，证明粘贴的内容格式为 HH:mm:ss ，自动将输入的值分别解析给时、分、秒的输入结果中，并给毫秒补全为 ‘00’。<br>当单个输入的值匹配 /^\d{2}:\d{2}:\d{2}.\d{2}$/g 表达式时，证明粘贴的内容格式为 HH:mm:ss.SS ，自动将输入的值分别解析给时、分、秒、毫秒的输入结果中。<br>也就是用户在哪个输入框中粘贴对应格式的内容都会影响到整个时间输入框的结果。</p><h3 id="长度过滤"><a href="#长度过滤" class="headerlink" title="长度过滤"></a>长度过滤</h3><p>在每个输入框的 @input 事件中处理输入的长度。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 长度过滤</span><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'millisecond'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为时、分、秒、毫秒的对应长度最大都支持两位数，所以我们将单个输入框输入结果长度大于2的都截取，只留前面两位。</p><h3 id="过滤非数字"><a href="#过滤非数字" class="headerlink" title="过滤非数字"></a>过滤非数字</h3><p>因为每个输入框都需要显示两位数，比如值为1时需要显示成01，所以输入框的类型需要保留为字符输入。这样就带来用户可以输入非数字的问题，得在每个输入框的 @input 事件中处理字符的输入。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 过滤非数字输入</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D\d$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入为 字母数字</span>    temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入为 字母</span>    temp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入为 数字字母</span>    temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入为 字母字母</span>    temp <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将以上几种情况分别进行过来处理。</p><h3 id="输入大小限制"><a href="#输入大小限制" class="headerlink" title="输入大小限制"></a>输入大小限制</h3><p>时的输入范围为0～∞，分的输入范围为0～59，秒的输入范围为0～59，毫秒的输入范围为0～99。所以在每个输入框的 @input 事件中处理输入的大小。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'millisecond'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><p>在每个输入框的 @inputChange 事件中处理自动补全的问题。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">inputChange</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 补全 */</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'00'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'0'</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输入只为一位数时在结果前面补0，当不输入时将结果补足为00。</p><h3 id="结果合并"><a href="#结果合并" class="headerlink" title="结果合并"></a>结果合并</h3><p>在用户输入结束后，用户获取的整体值的格式应该为 HH:mm:ss.SS ，所以我们需要将多个单结果合并在一起存储起来。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">endInput</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接将字符串按制定格式拼接即可。</p><h3 id="组件参数"><a href="#组件参数" class="headerlink" title="组件参数"></a>组件参数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'00:00:00.00'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'timeInput'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">readonly</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">disabled</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的 time 为外部输入的时间参数，默认值为 00:00:00.00 。因为输入的是整体的时间字符串，所以需要将其分别解析到对应的时、分、秒、毫秒中。</p><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">time</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoInput</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">/** * 自动解析输入 */</span><span class="token function">autoInput</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}.\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> strs2 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听 time 参数，当其发生变化时就将其解析。</p><h3 id="整体实现代码"><a href="#整体实现代码" class="headerlink" title="整体实现代码"></a>整体实现代码</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sw-time-input"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-hour'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hour"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-hour"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('hour', hour)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('hour', hour)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('hour', hour)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('hour', hour)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-minute'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"minute"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-minute"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"60"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('minute', minute)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('minute', minute)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('minute', minute)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('minute', minute)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-second'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"second"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-second"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"60"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('second', second)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('second', second)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('second', second)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('second', second)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-millisecond'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"millisecond"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-millisecond"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('millisecond', millisecond)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('millisecond', millisecond)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('millisecond', millisecond)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('millisecond', millisecond)"</span>    <span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'SwTimeInput'</span><span class="token punctuation">,</span>    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">'time'</span><span class="token punctuation">,</span>        <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">'updateValue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'00:00:00.00'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'timeInput'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">readonly</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">disabled</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">hour</span><span class="token operator">:</span> <span class="token string">'00'</span><span class="token punctuation">,</span>            <span class="token literal-property property">minute</span><span class="token operator">:</span> <span class="token string">'00'</span><span class="token punctuation">,</span>            <span class="token literal-property property">second</span><span class="token operator">:</span> <span class="token string">'00'</span><span class="token punctuation">,</span>            <span class="token literal-property property">millisecond</span><span class="token operator">:</span> <span class="token string">'00'</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">inputTime</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'updateValue'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function-variable function">time</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoInput</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">inputing</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 复制匹配</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoInput</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 长度过滤</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'millisecond'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 过滤非数字输入</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D\d$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 大小过滤</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'millisecond'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">inputChange</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">beginInput</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">endInput</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">/**         * 补全         */</span>        <span class="token function">completion</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">'00'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">'0'</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">/**         * 自动解析输入         */</span>        <span class="token function">autoInput</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}.\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> strs2 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>sw<span class="token operator">-</span>time<span class="token operator">-</span>input <span class="token punctuation">{</span>    <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>5px<span class="token punctuation">;</span>    border<span class="token operator">-</span>color<span class="token operator">:</span> #dcdfe6<span class="token punctuation">;</span>    border<span class="token operator">-</span>style<span class="token operator">:</span> solid<span class="token punctuation">;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> 85px<span class="token punctuation">;</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 3px<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>time<span class="token operator">-</span>input<span class="token operator">-</span>text <span class="token punctuation">{</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>hour <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> right<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>minute <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>second <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>millisecond <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> left<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>separate <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            margin<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token operator">-</span>4px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token operator">-</span>4px<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 去除浏览器默认样式 */</span>    <span class="token literal-property property">input</span><span class="token operator">:</span>focus<span class="token punctuation">{</span>        <span class="token literal-property property">outline</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> 0px solid pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置Gitalk评论系统</title>
      <link href="/2022/02/24/hexo-pei-zhi-gitalk-ping-lun-xi-tong/"/>
      <url>/2022/02/24/hexo-pei-zhi-gitalk-ping-lun-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Gitalk 是一款基于 GitHub Issue 和 Preact 开发的评论插件。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>使用GitHub登录</li><li>支持多语言</li><li>支持个人或组织</li><li>无干扰模式</li><li>支持快捷键提交评论</li></ul><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>Gitalk 要想使用 Github 的 Issue 功能，则需要在 Github 上创建一个授权应用，拿到应用的 id 和 密钥配置到 Gitalk 脚本中就可以了。</p><h2 id="配置Gitalk"><a href="#配置Gitalk" class="headerlink" title="配置Gitalk"></a>配置Gitalk</h2><h3 id="注册新应用"><a href="#注册新应用" class="headerlink" title="注册新应用"></a>注册新应用</h3><p>在GitHub上注册个新应用 <a href="https://github.com/settings/applications/new">地址</a> </p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202202240924020.png" alt="image-20220224092422913" style="zoom:100%;"><ul><li>Application name：应用名称</li><li>Homepage URL：hexo 博客的地址</li><li>Application description：应用描述</li><li>Authorization callback URL：hexo 博客的地址</li></ul><p>填写完成信息新建得到以下应用：</p><p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202202241045071.png" alt="image-20220224092941086"></p><p>图中的 <code>Client ID</code> 和 <code>Client secrets</code> 便是我们后面所需用到的信息。</p><h2 id="存放评论的仓库"><a href="#存放评论的仓库" class="headerlink" title="存放评论的仓库"></a>存放评论的仓库</h2><blockquote><p>这里可以新建个仓库存放评论，也可以直接用存放博客那个仓库，看个人选择。</p></blockquote><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202202241046040.png" alt="image-20220224104429854"></p><p>新建个仓库，名字自己确定，权限设置为公共。</p><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这里我使用的主题是 matery，自身就继承了 <strong>Gitalk</strong> 组件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gitalk:  enable: true  owner:  repo:  oauth:    clientId:     clientSecret:   admin:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>enable: true 开启评论组件</li><li>owner: GitHub 的用户名</li><li>repo: 存放仓库的名称，注意不是地址</li><li>clientId: 创建 Gitalk 应用时得到的 clientId 信息</li><li>clientSecret:  创建 Gitalk 应用时得到的 clientSecret 信息</li><li>admin：GitHub 的用户名</li></ul><h3 id="解决403"><a href="#解决403" class="headerlink" title="解决403"></a>解决403</h3><p>在配置文件中配置一下 gitalk 代理地址</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gitalk:  enable: true  owner:   repo: blog-comment  oauth:    clientId:     clientSecret:   admin:   proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改主题中 <strong>themes/hexo-theme-matery/layout/_partial/gitalk.ejs</strong> 文件，在21行处添加 <strong>proxy: ‘&lt;%- theme.gitalk.proxy %&gt;’,</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.css.gitalk) %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/css/my-gitalk.css') %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card gitalk-card"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"comment_headling"</span> style<span class="token operator">=</span><span class="token string">"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-comments fa-fw"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>评论<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"gitalk-container"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.gitalk) %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">let</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">clientID</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.oauth.clientId %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">clientSecret</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.oauth.clientSecret %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.repo %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.owner %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitalk<span class="token punctuation">.</span>admin<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'&lt;%- date(page.date, '</span><span class="token constant">YYYY</span><span class="token operator">-</span><span class="token constant">MM</span><span class="token operator">-</span><span class="token constant">DDTHH</span><span class="token operator">-</span>mm<span class="token operator">-</span>ss<span class="token string">') %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.proxy %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">distractionFreeMode</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token comment">// Facebook-like distraction free mode</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布生效"><a href="#发布生效" class="headerlink" title="发布生效"></a>发布生效</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo cleanhexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>发布新文章后应该去打卡一下，让 gitalk 初始化 Issues。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈对synchronized实现加锁场景的理解</title>
      <link href="/2022/02/23/tan-tan-dui-synchronized-shi-xian-jia-suo-chang-jing-de-li-jie/"/>
      <url>/2022/02/23/tan-tan-dui-synchronized-shi-xian-jia-suo-chang-jing-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>　　synchronized是Java中的关键字，synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性，Java中每一个对象都可以作为锁，这是synchronized实现同步的基础。</p><h2 id="对象锁和类锁"><a href="#对象锁和类锁" class="headerlink" title="对象锁和类锁"></a>对象锁和类锁</h2><p>　　当一个对象中有synchronized method或synchronized block的时候调用此对象的同步方法或进入其同步区域时，就必须先获得对象锁。如果此对象的对象锁已被其他调用者占用，则需要等待此锁被释放。<br>　　1、对象锁<br>　　Java的所有对象都含有1个互斥锁，这个锁由JVM自动获取和释放。线程进入synchronized方法的时候获取该对象的锁，当然如果已经有线程获取了这个对象的锁，那么当前线程会等待；synchronized方法正常返回或者抛异常而终止，JVM会自动释放对象锁。这里也体现了用synchronized来加锁的1个好处，方法抛异常的时候，锁仍然可以由JVM来自动释放。　<br>　　2、类锁<br>　　一个类不论被实例化多少次，其中的静态方法和静态变量在内存中都只有一份。所以，一旦一个静态的方法被申明为synchronized。此类所有的实例化对象在调用此方法，共用同一把锁，我们称之为类锁。<br>　　类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。Java类可能会有很多个对象，但是只有1个Class对象，也就是说类的不同实例之间共享该类的Class对象。Class对象其实也仅仅是1个Java对象，只不过有点特殊而已。由于每个Java对象都有1个互斥锁，而类的静态方法是需要Class对象。所以所谓的类锁，不过是Class对象的锁而已。</p><h2 id="加锁实现场景"><a href="#加锁实现场景" class="headerlink" title="加锁实现场景"></a>加锁实现场景</h2><p>　　对象锁是用来控制实例方法之间的同步，类锁是用来控制静态方法（或静态变量互斥体）之间的同步。  </p><p>1、未加锁  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SynchronizedTest</span> synchronizedTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadTest</span> threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span>synchronizedTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadTest</span> threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span>synchronizedTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　由执行结果可见，两个线程是异步执行的。  </p><p>2、普通方法加锁  </p><h3 id="多线程单对象执行"><a href="#多线程单对象执行" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　结果表明，虽然加了多线程，但加了synchronized关键字的方法还是同步执行的。  </p><h3 id="多线程多对象执行"><a href="#多线程多对象执行" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-1 : 0Thread-0 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　可以看到，虽然加了同步锁，但是不生效。</p><pre class="line-numbers language-none"><code class="language-none">当一个对象中有synchronized method或synchronized block的时候调用此对象的同步方法或进入其同步区域时，就必须先获得对象锁。如果此对象的对象锁已被其他调用者占用，则需要等待此锁被释放。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　因为这里两个线程执行时都新建一个对象，所以从执行对象中获取到的对象锁是不同的两个，也就是为什么锁不生效的原因了。   </p><p>3、类静态方法加锁  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　因为静态方法在执行时无需新建对象，直接由Class对象，只有一个Class对象，所以获取到锁是同一个。 </p><p>4、利用this对代码块加锁  </p><h3 id="多线程单对象执行-1"><a href="#多线程单对象执行-1" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　因为是调用同一个对象的方法，用this获取到的锁是同一个，所以是同步执行的。  </p><h3 id="多线程多对象执行-1"><a href="#多线程多对象执行-1" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　在不同的对象中执行，获取到的锁不是同一个，所以是异步的。 </p><p>5、利用类对代码块加锁  </p><h3 id="多线程单对象执行-2"><a href="#多线程单对象执行-2" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-2"><a href="#多线程多对象执行-2" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　无论是单对象还是多对象执行都是可以同步的，因为SynchronizedTest.class 类对象只有一个，所以拿到的对象锁是同一个。  </p><p>6、利用普通变量对代码块加锁</p><h3 id="多线程单对象执行-3"><a href="#多线程单对象执行-3" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-3"><a href="#多线程多对象执行-3" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-0 : 1Thread-1 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　由此可见，普通的类属性并不能实现全局锁。  </p><p>6、利用类静态变量对代码块加锁</p><h3 id="多线程单对象执行-4"><a href="#多线程单对象执行-4" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-4"><a href="#多线程多对象执行-4" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　很明显，类静态变量也是可以实现全局加锁的，原因是对象获取到到锁是同一个。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　上面分析了那么多种实现场景，对比了各场景是否能实现全局加锁。得出到结论是只要获取到的锁是同一个，那就能实现全局加锁，这里的全局加锁也就是所谓的类锁吧。<br>　　当然这种全局加锁只能在单实例中用用，如果是多实例，那也达不到全局锁的效果。这时还得看分布式锁。<br>　　对synchronized关键字理解对就那么多，有偏差的地方请指出。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两主三从数据库集群主备重做方法</title>
      <link href="/2022/02/22/liang-zhu-san-cong-shu-ju-ku-ji-qun-zhu-bei-chong-zuo-fang-fa/"/>
      <url>/2022/02/22/liang-zhu-san-cong-shu-ju-ku-ji-qun-zhu-bei-chong-zuo-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="集群结构图"><a href="#集群结构图" class="headerlink" title="集群结构图"></a>集群结构图</h2><p>​    该集群一共有五台设备，其中两台主，三台备。两台主机相互同步，三台主机各自分为两个通道同步两台主机，以达到数据同步到效果。</p><p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202201291017365.png" alt="结构图"></p><h2 id="主从同步恢复"><a href="#主从同步恢复" class="headerlink" title="主从同步恢复"></a>主从同步恢复</h2><p>在某些情况下，导致同步出错，需要重做主备来恢复数据库。</p><h3 id="制作数据包"><a href="#制作数据包" class="headerlink" title="制作数据包"></a>制作数据包</h3><p>选取一台数据相对准确的主机，这里我们选择Master1。登录机器制作全库数据包</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p*** --single-transaction --no-autocommit --set-gtid-purged=OFF --master-data=2 -A &gt;test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看数据包复制节点"><a href="#查看数据包复制节点" class="headerlink" title="查看数据包复制节点"></a>查看数据包复制节点</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">head -25 test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以上代码，回得到下面的输出结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-- MySQL dump 10.13  Distrib 8.0.22, for Linux (x86_64)---- Host: localhost    Database:-- -------------------------------------------------------- Server version8.0.22/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;/*!50503 SET NAMES utf8mb4 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE='+00:00' */;/*!50606 SET @OLD_INNODB_STATS_AUTO_RECALC=@@INNODB_STATS_AUTO_RECALC */;/*!50606 SET GLOBAL INNODB_STATS_AUTO_RECALC=OFF */;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;---- Position to start replication or point-in-time recovery from---- CHANGE MASTER TO MASTER_LOG_FILE='binlog.000188', MASTER_LOG_POS=2316558;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>CHANGE MASTER TO MASTER_LOG_FILE=’binlog.000188’, MASTER_LOG_POS=2316558;</p></blockquote><p>这个就是我们想要的数据。</p><h3 id="同步主库Master2"><a href="#同步主库Master2" class="headerlink" title="同步主库Master2"></a>同步主库Master2</h3><p>到这里就用test.sql 数据包同步另主库Master2了。</p><h3 id="停止binlog输出"><a href="#停止binlog输出" class="headerlink" title="停止binlog输出"></a>停止binlog输出</h3><p>登录数据库，执行以下代码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set sql_log_bin=0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p*** &lt; /data/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将test.sql 导入进 Msater2中。</p><h3 id="清除同步信息"><a href="#清除同步信息" class="headerlink" title="清除同步信息"></a>清除同步信息</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">stop slave;reset slave all; show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步主要是清除一下无效的同步信息。</p><h3 id="开启同步"><a href="#开启同步" class="headerlink" title="开启同步"></a>开启同步</h3><p>设置同步的节点。</p><pre class="line-numbers language-none"><code class="language-none">change master to master_host='172.30.4.5',master_user='slave',master_password='***',master_log_file='binlog.000188',master_log_pos=2316558;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 master_log_file 和 master_log_pos 数据就是从test.sql数据包中提取的信息。  </p><h5 id="开始同步"><a href="#开始同步" class="headerlink" title="开始同步"></a>开始同步</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;# 查看同步状态show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">       Slave_IO_State: Waiting for master to send event          Master_Host: 172.30.4.5          Master_User: slave          Master_Port: 3306        Connect_Retry: 60      Master_Log_File: binlog.000188  Read_Master_Log_Pos: 2324194       Relay_Log_File: relaylog-5.000002        Relay_Log_Pos: 7949Relay_Master_Log_File: binlog.000188     Slave_IO_Running: Yes    Slave_SQL_Running: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Slave_IO_Running 和 Slave_SQL_Running 两个状态都为Yes即说明同步状态正常。    </p></blockquote><h4 id="恢复binlog日志"><a href="#恢复binlog日志" class="headerlink" title="恢复binlog日志"></a>恢复binlog日志</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set sql_log_bin=1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这另一个主机的同步就完成了。</p><h3 id="同步主库Master1"><a href="#同步主库Master1" class="headerlink" title="同步主库Master1"></a>同步主库Master1</h3><p>因为两个主库是互为同步的，所以还得开启Master1的同步。</p><h4 id="查看Master2同步信息"><a href="#查看Master2同步信息" class="headerlink" title="查看Master2同步信息"></a>查看Master2同步信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show master status \G;*************************** 1. row ***************************             File: binlog.000010         Position: 2451890     Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: 4b33e04d-4987-11eb-9488-005056a98e78:1-391638:391640-840695:936025:936029:936039:936049:936069:936091:936117:936199:936203:936208:936240-936243,5987abbe-4987-11eb-af11-005056a96f47:1-25968:50772-94390:9359851 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启同步-1"><a href="#开启同步-1" class="headerlink" title="开启同步"></a>开启同步</h4><p>登录 Master1 数据库。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.6',master_user='slave',master_password='***',master_log_file='binlog.000010',master_log_pos=2451890;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到这两台主机的同步就算完成了。</p><h4 id="同步从库"><a href="#同步从库" class="headerlink" title="同步从库"></a>同步从库</h4><p>因为三台从库的同步步骤都是一样的，所以这里写一台的同步流程。</p><h4 id="导入数据-1"><a href="#导入数据-1" class="headerlink" title="导入数据"></a>导入数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p*** &lt; /data/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重置同步信息"><a href="#重置同步信息" class="headerlink" title="重置同步信息"></a>重置同步信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">stop slave;reset slave all; show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Msater2信息"><a href="#查看Msater2信息" class="headerlink" title="查看Msater2信息"></a>查看Msater2信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show master status \G;*************************** 1. row ***************************             File: binlog.000010         Position: 2459707     Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: 4b33e04d-4987-11eb-9488-005056a98e78:1-391638:391640-840695:936025:936029:936039:936049:936069:936091:936117:936199:936203:936208:936240-936243,5987abbe-4987-11eb-af11-005056a96f47:1-25980:50772-94390:9359851 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为这些信息是变化的，所以每台从库都应取最新的。</p></blockquote><h4 id="设置同步通道信息"><a href="#设置同步通道信息" class="headerlink" title="设置同步通道信息"></a>设置同步通道信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.5',master_user='slave',master_password='***',master_log_file='binlog.000188',master_log_pos=2316558 for channel '5';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.6',master_user='slave',master_password='***',master_log_file='binlog.000010',master_log_pos=2459707 for channel '6';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为数据包是由 .5 制作的，所以通道5用的是数据包的同步节点信息。通道6用的是Master2的同步节点信息。</p><h4 id="开启同步-2"><a href="#开启同步-2" class="headerlink" title="开启同步"></a>开启同步</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到这就完成了一个节点的同步了，重复上述步骤完成其他节点的同步制作即可完成整个集群的同步。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot使用EasyExcel操作Excel文档</title>
      <link href="/2021/11/01/springboot-shi-yong-easyexcel-cao-zuo-excel-wen-dang/"/>
      <url>/2021/11/01/springboot-shi-yong-easyexcel-cao-zuo-excel-wen-dang/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>在使用Springboot框架作后台开发中经常要将后台中对表单数据进行导入导出操作。后台导出的数据结构一般都不会太复杂，使用EasyExcel便可快速地将这些数据进行导入导出操作，减少在开发的繁琐工作。</p><h2 id="EasyExcel-介绍"><a href="#EasyExcel-介绍" class="headerlink" title="EasyExcel 介绍"></a>EasyExcel 介绍</h2><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的由阿里巴巴开源的项目。在尽可能节约内存的情况下支持读写百M的Excel。在64M内存下，1分钟内读取75M(46W行25列)的Excel数据。</p><h2 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h2><ul><li>2+ 版本支持 Java7和Java6</li><li>3+ 版本至少 Java8</li></ul><blockquote><p>GitHub地址：<a href="https://github.com/alibaba/easyexcel">https://github.com/alibaba/easyexcel</a></p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>本文只介绍EasyExcel在Springboot中使用的方法。</p><h3 id="Maven引用"><a href="#Maven引用" class="headerlink" title="Maven引用"></a>Maven引用</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">!--easyExcel--&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0-beta3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这使用目前EasyExcel最新的版本，如果想看Maven能用哪些版本可以到该网站上查询：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p></blockquote><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HeadRowHeight</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContentRowHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"ac_activity"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPTVActivityEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 活动标识 主键     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"活动标识"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> identify<span class="token punctuation">;</span>    <span class="token comment">/**     * 活动名称     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"活动名称"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 活动开始时间     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"开始时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 活动结束时间     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"结束时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> endTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 活动类型     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"活动类型"</span><span class="token punctuation">,</span> converter <span class="token operator">=</span> <span class="token class-name">ActivityTypeConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> type<span class="token punctuation">;</span>    <span class="token comment">/**     * 是否按天参与 1是 0否     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否按天"</span><span class="token punctuation">,</span> converter <span class="token operator">=</span> <span class="token class-name">ActivityEachDayConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> eachDay<span class="token punctuation">;</span>    <span class="token comment">/**     * 基础次数     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"基础次数"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> baseTimes<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间     */</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该实体为项目原本就存在的代码，在添加Excel导入导出功能时，我们只需要在变量上添加相应的注解即可。</p><h3 id="常用注解介绍"><a href="#常用注解介绍" class="headerlink" title="常用注解介绍"></a>常用注解介绍</h3><ul><li><p>@HeadRowHeight<br>value: 用于类上，可以设置Excel表格头的高度</p></li><li><p>@ContentRowHeight<br>value: 用于类上，可以设置行的高度</p></li><li><p>@ExcelProperty<br>value: 设置字段的名称<br>index: 设置字段的索引<br>order: 设置字段的序号<br>converter: 字段属性转换的类</p></li><li><p>@ColumnWidth<br>value: 可以用于设置列的宽度</p></li><li><p>@DateTimeFormat<br>value: 日期类型的单元格格式化方法</p></li><li><p>@ExcelIgnore<br>添加这个注解的字段在导入导出时会被忽略</p></li></ul><h3 id="字段数据转换"><a href="#字段数据转换" class="headerlink" title="字段数据转换"></a>字段数据转换</h3><p>有些字段在系统的标识和Excel表格中的标识有所区别，在导入导出时，EasyExcel提供了接口，我们只需要实现相应的接口即可完成时间转换操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivityEachDayConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 读取数据时: 属性对应的java数据类型     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">supportJavaTypeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 写入数据时: excel内部的数据类型,因为请求耗时是long类型,对应excel是NUMBER类型     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CellDataTypeEnum</span> <span class="token function">supportExcelTypeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">CellDataTypeEnum</span><span class="token punctuation">.</span>STRING<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 读取回调     * @param cellData     * @param contentProperty     * @param globalConfiguration     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">convertToJavaData</span><span class="token punctuation">(</span><span class="token class-name">ReadCellData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cellData<span class="token punctuation">,</span> <span class="token class-name">ExcelContentProperty</span> contentProperty<span class="token punctuation">,</span> <span class="token class-name">GlobalConfiguration</span> globalConfiguration<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 转换为整型</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> cellData<span class="token punctuation">.</span><span class="token function">getStringValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"是"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 数据导出回调     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">WriteCellData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">convertToExcelData</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">,</span> <span class="token class-name">ExcelContentProperty</span> contentProperty<span class="token punctuation">,</span> <span class="token class-name">GlobalConfiguration</span> globalConfiguration<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 转换为字符</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WriteCellData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"是"</span> <span class="token operator">:</span> <span class="token string">"否"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只需要在需要转化的字段注解上添加 converter 引用即可。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否按天"</span><span class="token punctuation">,</span> converter <span class="token operator">=</span> <span class="token class-name">ActivityEachDayConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><p>这里使用的时Vue + Springboot 方式对数据进行导出操作。</p><h3 id="Springboot接口"><a href="#Springboot接口" class="headerlink" title="Springboot接口"></a>Springboot接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/export"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span> params<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> identify <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"identify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>identify<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> activityService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"identify"</span><span class="token punctuation">,</span> identify<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入响应输出流数据</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> <span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span>XLSX<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"活动配置"</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongestMatchColumnWidthStyleStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 自适应列宽(不是很适应,效果并不佳)</span>                <span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HorizontalCellStyleStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 注册上面设置的格式策略</span>                <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue请求代码"><a href="#Vue请求代码" class="headerlink" title="Vue请求代码"></a>Vue请求代码</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token punctuation">;</span><span class="token comment">/** * 导出 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">'arraybuffer'</span><span class="token punctuation">,</span>        data    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 导出 */</span><span class="token keyword">async</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">identify</span><span class="token operator">:</span> row<span class="token punctuation">.</span>identify  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> activityApi<span class="token punctuation">.</span><span class="token function">exportExcel</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// type类型可以设置为文本类型，这里是新版excel类型</span>    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>response<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> pdfUrl <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token string">'活动配置文件_'</span> <span class="token operator">+</span> row<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 下载文件的名字</span>    <span class="token comment">// 对于&lt;a&gt;标签，只有 Firefox 和 Chrome（内核）支持 download 属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'download'</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      link<span class="token punctuation">.</span>href <span class="token operator">=</span> pdfUrl<span class="token punctuation">;</span>      link<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>      link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>pdfUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放URL 对象</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// IE 浏览器兼容方法</span>      window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span><span class="token function">msSaveBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样通过上面简单的代码即可完成Excel表格导出操作。</p><h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><p>这里使用的时Vue + Springboot 方式对数据进行导入操作</p><h3 id="Springboot接口-1"><a href="#Springboot接口-1" class="headerlink" title="Springboot接口"></a>Springboot接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/import"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RestResponse</span> <span class="token function">importExcel</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">RestResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传失败，请选择文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">IPTVActivityEntity</span> user<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                user<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                activityService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">DuplicateKeyException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">RestResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"活动标识已存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">RestResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传失败，请选择文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">RestResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EasyExcel 对Excel的解析是异步的，当上传的文件行数较多时，可以分批将数据写入数据库，减少应用对内存的消耗。</p><h3 id="Vue请求代码-1"><a href="#Vue请求代码-1" class="headerlink" title="Vue请求代码"></a>Vue请求代码</h3><p>上传使用了Element-ui组件，对上传做了文件限制等功能。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 导入 --&gt;&lt;el-upload  class="upload-expand"  :data="{}"  :action="uploadUrl(2)"  :headers="uploadHeader()"  :on-success="importUploadSuccess"  :on-error="uploadError"  accept=".xlsx"  :show-file-list="false"  :before-upload="beforeUploadFile"&gt;  &lt;el-button size="mini" type="primary"&gt;导入&lt;/el-button&gt;&lt;/el-upload&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 上传文件之前的钩子, 参数为上传的文件,若返回 false 或者返回 Promise 且被 reject，则停止上传</span><span class="token function">beforeUploadFile</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> extension <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>extension <span class="token operator">!==</span> <span class="token string">'xlsx'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">'只能上传后缀是.xlsx的文件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 获取上传的头 */</span><span class="token function">uploadHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> header<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 返回上传的URL */</span><span class="token function">uploadUrl</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_BASE_API</span> <span class="token operator">+</span> <span class="token string">'/iptv/activity/import'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 上传成功 */</span><span class="token function">importUploadSuccess</span><span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> response<span class="token punctuation">.</span>code<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'bottom-right'</span><span class="token punctuation">,</span>      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'导入成功！'</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>      <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2000</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> msg <span class="token operator">=</span> response<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'错误'</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> msg    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 上传失败 */</span><span class="token function">uploadError</span><span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> response<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'bottom-right'</span><span class="token punctuation">,</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'错误'</span><span class="token punctuation">,</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> msg  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>使用EasyExcel插件极大简便了Excel操作，消耗资源还相对较少，值得推荐使用。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Java </tag>
            
            <tag> EasyExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-tree默认的勾选项</title>
      <link href="/2021/08/24/el-tree-mo-ren-de-gou-xuan-xiang/"/>
      <url>/2021/08/24/el-tree-mo-ren-de-gou-xuan-xiang/</url>
      
        <content type="html"><![CDATA[<p>官方提供API接口不好用，建议用以下的方法进行勾选。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">rolePermissionList</span><span class="token punctuation">(</span><span class="token parameter">roleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">roleId</span><span class="token operator">:</span> roleId <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> roleApi<span class="token punctuation">.</span><span class="token function">permissionList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>permissionIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>parent <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>permission<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>permissionId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> el-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Innodb Cluster节点扩容</title>
      <link href="/2021/02/25/innodb-cluster-jie-dian-kuo-rong/"/>
      <url>/2021/02/25/innodb-cluster-jie-dian-kuo-rong/</url>
      
        <content type="html"><![CDATA[<h3 id="获取完整的数据备份"><a href="#获取完整的数据备份" class="headerlink" title="获取完整的数据备份"></a>获取完整的数据备份</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/usr/local/mysql/bin/mysqldump --all-databases --add-drop-database --single-transaction --triggers --routines --port=mysql_port --user=root -p &gt; all.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在需要添加的节点上操作"><a href="#在需要添加的节点上操作" class="headerlink" title="在需要添加的节点上操作"></a>在需要添加的节点上操作</h3><h4 id="停止组复制"><a href="#停止组复制" class="headerlink" title="停止组复制"></a>停止组复制</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 停止组复制STOP GROUP_REPLICATION;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="重置GTID"><a href="#重置GTID" class="headerlink" title="重置GTID"></a>重置GTID</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看GTIDshow global variables like 'GTID_EXECUTED';# 重置GTIDreset master;reset slave;# 再次查看GTID，确认被清除干净show global variables like 'GTID_EXECUTED';# 查看节点是否为只读状态mysql&gt; SELECT @@global.read_only, @@global.super_read_only;+--------------------+--------------------------+| @@global.read_only | @@global.super_read_only |+--------------------+--------------------------+|                  1 |                        1 |+--------------------+--------------------------+1 row in set (0.00 sec)# 改为可读写SET GLOBAL super_read_only = 0;# 将刚获取到到备份数据导入扩展的节点mysql -uroot -p &lt; all.sql# 改为只读状态SET GLOBAL super_read_only = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将节点加入集群"><a href="#将节点加入集群" class="headerlink" title="将节点加入集群"></a>将节点加入集群</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">var c = dba.getCluster();c.addInstance('root@x.x.x.x:3306');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Innodb Cluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS使用黑魔法实现一键全局图片变灰白的一种方案</title>
      <link href="/2020/07/01/ios-shi-yong-hei-mo-fa-shi-xian-yi-jian-quan-ju-tu-pian-bian-hui-bai-de-yi-chong-fang-an/"/>
      <url>/2020/07/01/ios-shi-yong-hei-mo-fa-shi-xian-yi-jian-quan-ju-tu-pian-bian-hui-bai-de-yi-chong-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>　　有些特殊的时候会将APP设置成灰白的主题色，iOS不像在网页中有全局样式滤镜，那在iOS中应该如何便捷有效的实现该功能，接下来就分享我在项目中使用黑魔法（Method Swizzling）进行全局处理的一种实现方法。 　　</p><h2 id="Method-Swizzling-原理"><a href="#Method-Swizzling-原理" class="headerlink" title="Method Swizzling 原理"></a>Method Swizzling 原理</h2><p>　　Object-C中每个类都维护着一个方法（Method）列表，Method 则包含 SEL 和其对应 IMP 的信息。在Objective-C中调用一个方法时，其实是向一个对象发送消息SEL,根据（Method）列表找到对应的 IMP 并执行。<br>黑魔法（Method Swizzling）要做的事情就是把 SEL 和 IMP 的对应关系断开，并和新 IMP 生成对应关系，进行交换，在运行时偷偷替换系统对应的实现方法，有点像Java中的AOP。 　　</p><p>交换前：Asel－&gt;AImp Bsel－&gt;BImp<br>交换后：Asel－&gt;BImp Bsel－&gt;AImp</p><p>更多Method Swizzling的相关知识可以到网上查找。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>　　因为项目主要使用UIImageView来呈现图片,所以创建一个UIImageView的Category，并在该Category中实现方法交换。先来看看具体实现代码：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">//  UIImageView+xmtGrayImage.h#import &lt;UIKit/UIKit.h&gt;NS_ASSUME_NONNULL_BEGIN@interface UIImageView (xmtGrayImage)@endNS_ASSUME_NONNULL_END//  UIImageView+xmtGrayImage.m#import "UIImageView+xmtGrayImage.h"#import &lt;objc/runtime.h&gt;#import "UIImage+xmtImage.h"#import "xmtThemeManager.h"@implementation UIImageView (xmtGrayImage)#pragma mark - Swizzling+ (void)load {    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{        Method setImage = class_getInstanceMethod(self,@selector(setImage:));        Method xmtSwizzledSetImage = class_getInstanceMethod(self,@selector(xmtSwizzledSetImage:));        ///交换IMP        method_exchangeImplementations(setImage, xmtSwizzledSetImage);    });}- (void)xmtSwizzledSetImage:(UIImage *)image {        if (ThemeManager.isGrayImage) {        /// 图片使用灰白处理        image = [UIImage grayImage:image];    }    [self xmtSwizzledSetImage:image];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 + (void)load 方法中实现交换代码，可以保证在系统加载该类文件时就执行代码。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">+ (void)load {    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{       });}static dispatch_once_t onceToken;dispatch_once(&amp;onceToken, ^{});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 dispatch_once(&amp;onceToken 就是为了保证中括号内的代码只被执行一次，IMP 始终只被交换一次。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">///获取 setImage: 方法的 IMPMethod setImage = class_getInstanceMethod(self,@selector(setImage:));///获取 xmtSwizzledSetImage: 方法的 IMPMethod xmtSwizzledSetImage = class_getInstanceMethod(self,@selector(xmtSwizzledSetImage:));///交换 IMPmethod_exchangeImplementations(setImage, xmtSwizzledSetImage);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而这三句话是将UIImageView中的setImage:和xmtSwizzledSetImage:的IMP交换。<br>接下来再看看交换IMP后的这段代码。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">UIImageView *imageView = [UIImageView new];[imageView setImage:[UIImage imageNamed:@"xxxx.png"]];[imageView xmtSwizzledSetImage:[UIImage imageNamed:@"xxxx.png"]];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>　　因为对IMP进行交换，所以对 imageView 发送 [imageView setImage:[UIImage imageNamed:@”xxxx.png”]] 消息，系统执行的是 - (void)xmtSwizzledSetImage:(UIImage *)image 方法的实现代码；对 imageView 发送 [imageView xmtSwizzledSetImage:[UIImage imageNamed:@”xxxx.png”] 消息，系统执行的是 - (void)setImage:(UIImage *)image 的实现代码。</p><p>　　这也是为什么在 - (void)xmtSwizzledSetImage:(UIImage *)image 调用 - (void)xmtSwizzledSetImage:(UIImage *)image 不会发生循环调用的原因。</p><p>　　哈哈，是不是有点饶？啥发送消息，分明是调用方法？emmm…在OC中，调用方法就是对对象发送消息，等对象找到对应对IMP才是真正的执行方法，但为了通俗易懂，通常也会把发送消息说成调用方法。</p><p>　　到这，我们想将图片的改为灰白，在 - (void)xmtSwizzledSetImage:(UIImage *)image 中做相应的处理即可，因为在项目中所有对UIImageView控件设置图片都会经过该方法。同理，其他的图片控件也可以用这种方法进行处理。</p><p>　　顺道附一段对图片进行灰白处理对代码，有透明图层对也可以用。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">+ (UIImage *)grayImage:(UIImage *)sourceImage {    int width = sourceImage.size.width;    int height = sourceImage.size.height;    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceGray();    CGContextRef context = CGBitmapContextCreate(nil,width,height,8,0,colorSpace,kCGImageAlphaPremultipliedLast);    CGColorSpaceRelease(colorSpace);    if (context == NULL) {        return nil;    }    CGContextDrawImage(context,CGRectMake(0, 0, width, height), sourceImage.CGImage);    CGImageRef grayImageRef = CGBitmapContextCreateImage(context);    UIImage *grayImage = [UIImage imageWithCGImage:grayImageRef];    CGContextRelease(context);    CGImageRelease(grayImageRef);    return grayImage;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>　　通过黑魔法实现全局图片处理，也算有不小对收获吧。但自身对黑魔法只会些皮毛方法，有什么理解不对的地方还请赐教，及时指出</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ijkplayer iOS打包，支持HTTPS，升级ffmpeg4.0</title>
      <link href="/2020/04/10/ijkplayer-ios-da-bao-zhi-chi-https-sheng-ji-ffmpeg4.0/"/>
      <url>/2020/04/10/ijkplayer-ios-da-bao-zhi-chi-https-sheng-ji-ffmpeg4.0/</url>
      
        <content type="html"><![CDATA[<p>​    网上已经有很多关于打包IJKPlayer的教程，也基本能用。但关于如何升级ffmpeg内核以及HTTPS的还是比较少，现在我就分享一下如何升级ffmpeg，并总结一篇完整打包的流程。<br>　　打包参考：<a href="https://juejin.im/post/6844903620597841933">https://juejin.im/post/6844903620597841933</a><br>　　ijkplayer github地址：<a href="https://github.com/bilibili/ijkplayer">https://github.com/bilibili/ijkplayer</a></p><h3 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 先切到桌面cd Desktop/# 克隆下ijkplayer的代码git clone https://github.com/Bilibili/ijkplayer.gitcd ijkplayer# 切到最新版本k0.8.8git checkout -B latest k0.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置解码器"><a href="#配置解码器" class="headerlink" title="配置解码器"></a>配置解码器</h3><ul><li>module-default.sh 更多的编解码器/格式</li><li>module-lite-hevc.sh 较少的编解码器/格式(包括hevc)</li><li>module-lite.sh 较少的编解码器/格式(默认情况)<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd config# 删除默认的解码器rm module.sh# 创建一个软连接指向 module-lite-hevc.sh，这个可根据自己需求进行选择ln -s module-lite-hevc.sh module.shcd ..cd iossh compile-ffmpeg.sh clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置ffmpeg内核版本"><a href="#配置ffmpeg内核版本" class="headerlink" title="配置ffmpeg内核版本"></a>配置ffmpeg内核版本</h3>编辑 <font color="#ff0000">init-ios.sh</font> 文件<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ..vi init-ios.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#! /usr/bin/env bash</span><span class="token comment">#</span><span class="token comment"># Copyright (C) 2013-2015 Bilibili</span><span class="token comment"># Copyright (C) 2013-2015 Zhang Rui &lt;bbcallen@gmail.com&gt;</span><span class="token comment">#</span><span class="token comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment"># you may not use this file except in compliance with the License.</span><span class="token comment"># You may obtain a copy of the License at</span><span class="token comment">#</span><span class="token comment">#      http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment">#</span><span class="token comment"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment"># See the License for the specific language governing permissions and</span><span class="token comment"># limitations under the License.</span><span class="token comment">#</span><span class="token comment"># IJK_FFMPEG_UPSTREAM=git://git.videolan.org/ffmpeg.git</span>IJK_FFMPEG_UPSTREAM=https<span class="token punctuation">:</span>//github.com/Bilibili/FFmpeg.gitIJK_FFMPEG_FORK=https<span class="token punctuation">:</span>//github.com/Bilibili/FFmpeg.gitIJK_FFMPEG_COMMIT=ff3.4<span class="token punctuation">-</span><span class="token punctuation">-</span>ijk0.8.7<span class="token punctuation">-</span><span class="token punctuation">-</span>20180103<span class="token punctuation">-</span><span class="token number">-001</span>IJK_FFMPEG_LOCAL_REPO=extra/ffmpeg...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>打开后这可以大致看到这些内容，注意一下 <font color="#ff0000">IJK_FFMPEG_COMMIT</font>，就是在这个地方配置ffmpeg版本，如果不修改，默认是使用 ff3.4–ijk0.8.7–20180103–001 版本。<br>到bilibili fork的ffmpeg的库查看支持的版本 <a href="https://github.com/bilibili/FFmpeg/releases">https://github.com/bilibili/FFmpeg/releases</a></li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/9/1715df68ab362fd8~tplv-t2oaga2asx-image.image"><br>可以看到最新支持的版本是 <font color="#ff0000">ff4.0–ijk0.8.25–20200221–001</font>  ，由此见得，bilibili对ijkplayer这个库还是保持持续更新的。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_FFMPEG_COMMIT=ff4.0--ijk0.8.25--20200221--001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把对应的地方改成所选择的版本就可以了。</p><h3 id="获取ffmpeg相关文件"><a href="#获取ffmpeg相关文件" class="headerlink" title="获取ffmpeg相关文件"></a>获取ffmpeg相关文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 获取依赖的文件，这个会久一点，中途有有失败再执行一下就可以了./init-ios.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置支持HTTPS"><a href="#配置支持HTTPS" class="headerlink" title="配置支持HTTPS"></a>配置支持HTTPS</h3><p>如果不需要HTTPS可以跳过这一步。<br>同样编辑 <font color="#ff0000">init-ios-openssl.sh</font> 文件配置https的版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi init-ios-openssl.s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和升级ffmpeg一样，找到 <font color="#ff0000">IJK_OPENSSL_COMMIT</font> 项</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_OPENSSL_COMMIT=OpenSSL_1_0_2n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到默认版本是 OpenSSL_1_0_2n<br>同样到 <a href="https://github.com/bilibili/openssl/releases">https://github.com/bilibili/openssl/releases</a> 选择需要替换到版本,这里选择最新的 OpenSSL_1_0_2u 版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_OPENSSL_COMMIT=OpenSSL_1_0_2u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取HTTPS相关文件"><a href="#获取HTTPS相关文件" class="headerlink" title="获取HTTPS相关文件"></a>获取HTTPS相关文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 耐心等待一下./init-ios-openssl.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="编辑-module-sh-文件"><a href="#编辑-module-sh-文件" class="headerlink" title="编辑 module.sh 文件"></a>编辑 module.sh 文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi config/module.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾加入 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 支持httpsexport COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --enable-openssl"# ffmpeg4.0 需要export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-bsf=eac3_core"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并注释掉以下这两项</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-ffserver"#export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-vda"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考 <a href="https://github.com/bilibili/ijkplayer/issues/4772">https://github.com/bilibili/ijkplayer/issues/4772</a></p><h3 id="更改最低支持的版本"><a href="#更改最低支持的版本" class="headerlink" title="更改最低支持的版本"></a>更改最低支持的版本</h3><p>因为ffmpeg4.0 使用的部分API是iOS8.0以上的，所以这里必须改一下最低支持的版本，不然编译ffmpeg会出现类似的错误</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">libavcodec/videotoolbox.c:862:9: error: 'VTDecompressionSessionInvalidate' is only available on iOS 8.0 or newer      [-Werror,-Wunguarded-availability]        VTDecompressionSessionInvalidate(videotoolbox-&gt;session);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑 ios/tools/do-compile-ffmpeg.sh</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/tools/do-compile-ffmpeg.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到有关 <font color="#ff0000">version-min</font> 小于8.0的都改成8.0</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ "$FF_ARCH" = "i386" ]; then    FF_BUILD_NAME="ffmpeg-i386"    FF_BUILD_NAME_OPENSSL=openssl-i386    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_SIMULATOR"elif [ "$FF_ARCH" = "x86_64" ]; then    FF_BUILD_NAME="ffmpeg-x86_64"    FF_BUILD_NAME_OPENSSL=openssl-x86_64    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_SIMULATOR"elif [ "$FF_ARCH" = "armv7" ]; then    FF_BUILD_NAME="ffmpeg-armv7"    FF_BUILD_NAME_OPENSSL=openssl-armv7    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"#    FFMPEG_CFG_CPU="--cpu=cortex-a8"elif [ "$FF_ARCH" = "armv7s" ]; then    FF_BUILD_NAME="ffmpeg-armv7s"    FF_BUILD_NAME_OPENSSL=openssl-armv7s    FFMPEG_CFG_CPU="--cpu=swift"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"elif [ "$FF_ARCH" = "arm64" ]; then    FF_BUILD_NAME="ffmpeg-arm64"    FF_BUILD_NAME_OPENSSL=openssl-arm64    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"    FF_GASPP_EXPORT="GASPP_FIX_XCODE5=1"else    echo "unknown architecture $FF_ARCH";    exit 1fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理编辑 ios/tools/do-compile-openssl.sh 文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/tools/do-compile-openssl.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ "$FF_ARCH" = "i386" ]; then    FF_BUILD_NAME="openssl-i386"    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    OPENSSL_CFG_FLAGS="darwin-i386-cc $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "x86_64" ]; then    FF_BUILD_NAME="openssl-x86_64"    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    OPENSSL_CFG_FLAGS="darwin64-x86_64-cc $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "armv7" ]; then    FF_BUILD_NAME="openssl-armv7"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"#    OPENSSL_CFG_CPU="--cpu=cortex-a8"elif [ "$FF_ARCH" = "armv7s" ]; then    FF_BUILD_NAME="openssl-armv7s"    OPENSSL_CFG_CPU="--cpu=swift"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "arm64" ]; then    FF_BUILD_NAME="openssl-arm64"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"    FF_GASPP_EXPORT="GASPP_FIX_XCODE5=1"else    echo "unknown architecture $FF_ARCH";    exit 1fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="移除armv7"><a href="#移除armv7" class="headerlink" title="移除armv7"></a>移除armv7</h3><p>因为使用的是Xcode11.4打包，已经弱化了对 32 位的支持，所以需要移除armv7。如果想支持armv7,请使用低版本Xcode打包。<br>编辑 ios/compile-ffmpeg.sh 文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/compile-ffmpeg.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　找到 FF_ALL_ARCHS_IOS8_SDK=”<font color="#ff0000">armv7</font> arm64 i386 x86_64” 改为 FF_ALL_ARCHS_IOS8_SDK=”arm64 i386 x86_64”。<br>不然可能会出现一下的报错。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./libavutil/arm/asm.S:50:9: error: unknown directive        .arch armv7-a        ^make: *** [libavcodec/arm/aacpsdsp_neon.o] Error 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">libswresample/arm/audio_convert_neon.S:25:1: error: invalid symbol redefinition_swri_oldapi_conv_flt_to_s16_neon:^libswresample/arm/audio_convert_neon.S:70:1: error: invalid symbol redefinition_swri_oldapi_conv_fltp_to_s16_2ch_neon:^make: *** [libswresample/arm/audio_convert_neon.o] Error 1make: *** Waiting for unfinished jobs....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ios# 先编译OpenSSL，如果不需要支持https可以跳过./compile-openssl.sh all# 编译ffmpeg./compile-ffmpeg.sh all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>打开 IJKMediaPlayer.xcodeproj</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">open IJKMediaPlayer/IJKMediaPlayer.xcodeproj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加openssl"><a href="#添加openssl" class="headerlink" title="添加openssl"></a>添加openssl</h4><p>如果不需要支持HTTPS可以跳过。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/171619026cf178b6~tplv-t2oaga2asx-image.image"><br>选择IJKMediaFramework,添加libcrypto.a和libssl.a这两个文件，如果一次加不进就再尝试一次。</p><h4 id="配置打包版本"><a href="#配置打包版本" class="headerlink" title="配置打包版本"></a>配置打包版本</h4><p>因为我们前面已经把编译版本调到了最低支持8.0，最好把打包的版本也调到最低支持8.0。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/171619691a65d74b~tplv-t2oaga2asx-image.image"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161972c5cb6cae~tplv-t2oaga2asx-image.image"><br>这两个地方都调到8.0</p><h4 id="打真机包"><a href="#打真机包" class="headerlink" title="打真机包"></a>打真机包</h4><p>编辑scheme<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/1716198e3bf88eaf~tplv-t2oaga2asx-image.image"><br>改成Release<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b43b45e9666~tplv-t2oaga2asx-image.image"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b50a59355ce~tplv-t2oaga2asx-image.image"><br>直接键盘上按command + b 打包。<br>可能会碰到一下错误，是因为前面移除了armv7造成的。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b671d268eef~tplv-t2oaga2asx-image.image"><br>编辑 /build/universal/include/libavutil/avconfig.h 和 /build/universal/include/libffmpeg/config.h </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161baa7e26416c~tplv-t2oaga2asx-image.image"><br>将 include “armv7/config.h” 这行注释掉，两个文件都修改，然后继续打包。</p><h4 id="打模拟器包"><a href="#打模拟器包" class="headerlink" title="打模拟器包"></a>打模拟器包</h4><p>随便选择一个模拟器版本<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161bdd57039334~tplv-t2oaga2asx-image.image"></p><p>直接键盘上按command + b 打包。</p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>其实合不合都可以，合并后的包在真机或模拟器上都可以使用，但体积也会变大一倍。这个自行选择。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161c1677f48dcd~tplv-t2oaga2asx-image.image"><br>直接打开包所在的路径<br>用终端进入 Products 目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd /Users/LSW/Library/Developer/Xcode/DerivedData/IJKMediaPlayer-hdieucicuskakgftfkjtnzhnbsme/Build/Products<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用命令合并</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161ca5f3dd2ff2~tplv-t2oaga2asx-image.image"><br>直接把打包好的 IJKMediaFramework 替换 Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework，真机那个就是模拟器真机都能用的包了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我之前打包都完整过程了，至于如何导入在这就不提了，网上已经有很多文章。希望能帮到需要打包的同学，有问题请直接指出。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> ijkplayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS判断机型是否为iPhone X、XR、XS、XSMax的方法</title>
      <link href="/2019/10/29/ios-pan-duan-ji-xing-shi-fou-wei-iphone-x-xr-xs-xsmax-de-fang-fa/"/>
      <url>/2019/10/29/ios-pan-duan-ji-xing-shi-fou-wei-iphone-x-xr-xs-xsmax-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#define IPHONE_X (@available(iOS 11.0, *) ？ [[[UIApplication sharedApplication] delegate] window].safeAreaInsets.bottom &gt; 0.0 : NO )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    原理是根据手机底部安全区的高度 判断是否为 iPhone X、XR、XS、XS Max 几款机型，用宏的方法使用方便，在使用的地方 对 IPHONE_X 进行一下判断即可</p><p>注：关于xcode10警告问题</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#define IPHONE_X \({BOOL isPhoneX = NO;\if (@available(iOS 11.0, *)) {\isPhoneX = [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom &gt; 0.0;\}\(isPhoneX);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
