<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Iterm2使用expect脚本无法调用lrzsz</title>
      <link href="/2023/02/22/ri-chang/jie-jue-iterm2-shi-yong-expect-jiao-ben-wu-fa-diao-yong-lrzsz/"/>
      <url>/2023/02/22/ri-chang/jie-jue-iterm2-shi-yong-expect-jiao-ben-wu-fa-diao-yong-lrzsz/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考地址 <a href="https://www.cnblogs.com/snailon/p/14392884.html">https://www.cnblogs.com/snailon/p/14392884.html</a></p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>先将本地的LC_CTYPE环境变量设置成en_US，再执行expect脚本即可 </p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">export LC_CTYPE=en_US<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>推荐将此变量放在脚本里设置，这样只是影响当前连接远程机器但session，如果设置在.bash_profile脚本里，则可能会有中文显示乱码问题。</p></blockquote><h2 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h2><h3 id="登陆脚本login-sh"><a href="#登陆脚本login-sh" class="headerlink" title="登陆脚本login.sh"></a>登陆脚本login.sh</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!/bin/shbasepath=$(cd `dirname $0`; pwd)export LC_CTYPE=en_US#expect脚本所在位置expectFilePath=$basepath/$1if [ -f $expectFilePath ]; then  expect $expectFilePath $2else  echo "$expectFilePath 登陆脚本不存在"fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该脚本接受两个参数，第一个是expect脚本的名称，第一个是expect脚本所需的参数。这里默认login.sh脚本和 expect脚本在同一个目录下</p><h3 id="iterm2调用"><a href="#iterm2调用" class="headerlink" title="iterm2调用"></a>iterm2调用</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">/Users/linuxLogin/login.sh test.sh 172.31.1.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2022/08/04/java/java-ji-chu-zhi-shi/"/>
      <url>/2022/08/04/java/java-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaGuide学习笔记：<a href="https://javaguide.cn/java/basis/java-basic-questions-01/#">JavaGuide</a></p></blockquote><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h3><ul><li>面向对象</li><li>平台无关性</li><li>支持多线程</li><li>可靠性、安全性</li><li>支持网络编程</li><li>编译与解析并存</li></ul><blockquote><p>Java之所以强，并完全是因为其夸平台性，同时也因为其用户群体大，简单易学，生态强大等。</p></blockquote><h3 id="JVM、JDK、JRE区别"><a href="#JVM、JDK、JRE区别" class="headerlink" title="JVM、JDK、JRE区别"></a>JVM、JDK、JRE区别</h3><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><p>​    Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实</p><p>现是 Java 语言“一次编译，随处可以运行”的关键所在。</p><blockquote><p>JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。</p></blockquote><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><p>​    JDK 是 Java Development Kit 缩写，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb），它能够创建和编译程序。</p><h4 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h4><p>​    JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。</p><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>​    在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行</p><p>效率低的问题，同时又保留了解释型语言可移植的特点。</p><h3 id="Java和C-的区别"><a href="#Java和C-的区别" class="headerlink" title="Java和C++的区别"></a>Java和C++的区别</h3><ul><li>都是面向对象的语言，都支持封装、继承和多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C++ 支持多重继承</li><li>Java 有自动内存管理垃圾回收机制(GC)</li><li>C++同时支持方法重载和操作符重载，但是 Java 只支持方法重载</li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="字符型常量和字符串常量的区别"><a href="#字符型常量和字符串常量的区别" class="headerlink" title="字符型常量和字符串常量的区别"></a>字符型常量和字符串常量的区别</h3><ul><li><p>字符常量是单引号引起的一个字符，字符串常量是双引号引起的 0 个或若干个字符</p></li><li><p>字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值</p></li><li><p>字符常量只占 2 个字节; 字符串常量占若干个字节</p></li></ul><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><table><thead><tr><th align="center">基本类型</th><th align="center">大小</th><th align="center">最小值</th><th align="center">最大值</th><th align="center">包装器类型</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">Boolean</td></tr><tr><td align="center">char</td><td align="center">16 bit</td><td align="center">Unicode 0</td><td align="center">Unicode 12^16^-1</td><td align="center">Char</td></tr><tr><td align="center">byte</td><td align="center">8 bits</td><td align="center">-128</td><td align="center">127</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">16 bits</td><td align="center">-2^15^</td><td align="center">2^15^-1</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">32 bits</td><td align="center">-2^31^</td><td align="center">2^31^-1</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">64 bits</td><td align="center">-2^63^</td><td align="center">2^63^-1</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">32 bits</td><td align="center">IEEE754</td><td align="center">IEEE754</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">64 bits</td><td align="center">IEEE754</td><td align="center">IEEE754</td><td align="center">Double</td></tr></tbody></table><blockquote><p>Java 每种基本类型所占存储空间是固定的，和运行平台无关。</p></blockquote><h3 id="可变长参数"><a href="#可变长参数" class="headerlink" title="可变长参数"></a>可变长参数</h3><p>​    从 <strong>Java5</strong> 开始，Java 支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。</p><p>​    <strong>prints</strong>方法接受0个或N个字符串参数，<code>可变参数只能放在最后一位</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prints</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//...</span><span class="token punctuation">}</span><span class="token comment">// 可变参数在最后一位</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prints</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在方法进行重载时，会优先选择参数固定的方法，因为固定参数的方法匹配度更高。</p></blockquote><h3 id="常见关键字"><a href="#常见关键字" class="headerlink" title="常见关键字"></a>常见关键字</h3><table><thead><tr><th>分类</th><th>关键字</th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>访问控制</td><td>private</td><td>protected</td><td>public</td><td></td><td></td><td></td><td></td></tr><tr><td>修饰符</td><td>abstract</td><td>class</td><td>extends</td><td>final</td><td>implements</td><td>interface</td><td>native</td></tr><tr><td></td><td>new</td><td>static</td><td>strictfp</td><td>synchronized</td><td>transient</td><td>volatile</td><td></td></tr><tr><td>程序控制</td><td>break</td><td>continue</td><td>return</td><td>do</td><td>while</td><td>if</td><td>else</td></tr><tr><td></td><td>for</td><td>instanceof</td><td>switch</td><td>case</td><td>Defalut</td><td></td><td></td></tr><tr><td>错误处理</td><td>try</td><td>catch</td><td>throw</td><td>throws</td><td>finally</td><td></td><td></td></tr><tr><td>包相关</td><td>import</td><td>package</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>byte</td><td>char</td><td>double</td><td>float</td><td>int</td><td>long</td></tr><tr><td></td><td>short</td><td>null</td><td>true</td><td>false</td><td></td><td></td><td></td></tr><tr><td>变量引用</td><td>super</td><td>this</td><td>void</td><td></td><td></td><td></td><td></td></tr><tr><td>保留字</td><td>goto</td><td>const</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="静态方法为什么不能调用非静态成员"><a href="#静态方法为什么不能调用非静态成员" class="headerlink" title="静态方法为什么不能调用非静态成员"></a>静态方法为什么不能调用非静态成员</h3><ol><li><p>静态方法属于类，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，在对象实例化后才会存在。</p></li><li><p>在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</p></li></ol><h3 id="重载与重写"><a href="#重载与重写" class="headerlink" title="重载与重写"></a>重载与重写</h3><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</li><li>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法</li></ul><h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><p>​    发生在同一个类中或者父类和子类之间，方法名必须相同，参数类型不同、个数不同、顺序不同，<strong>方法返回值和访问修饰符可以不同</strong>。同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> speed<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Car</span> redCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redCar<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redCar<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"redCar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>​    重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。</p><pre><code>1. 方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类1. 如果父类方法访问修饰符为 `private/final/static` 则子类就不能重写该方法，但是被 `static` 修饰的方法能够被再次声明。1. 构造方法无法被重写</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedCar</span> <span class="token keyword">extends</span> <span class="token class-name">Car</span><span class="token punctuation">{</span><span class="token comment">// 重写父类Car run方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x3D-x3D-和equals-的区别"><a href="#x3D-x3D-和equals-的区别" class="headerlink" title="== 和equals()的区别"></a>== 和equals()的区别</h3><p><strong>== 的作用效果</strong></p><ul><li>对于基本数据，==比较的是值</li><li>对于引用数据，==比较的是对象的内容地址</li></ul><p><strong>equals() 只能用于判断两个对象是否相等，比较的是他们的内容。<code>eauals()方法存在于Object类中，而Object类是所有类的直接或间接父类。</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>equals()</strong> 方法存在两种使用情况：</p><ul><li><p>类没有覆盖 <strong>equals()</strong> 方法：通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是Object类equals()方法。</p></li><li><p>类覆盖了 **equals() **方法 ：一般我们都覆盖 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。</p></li></ul><p>String类覆盖了 equals() 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>    <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span>             <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hashCode-和equals"><a href="#hashCode-和equals" class="headerlink" title="hashCode()和equals()"></a>hashCode()和equals()</h3><p>​    hashCode()的作用是获取哈希码（int整数），也称为散列码，用于确定该对象在哈希表中的索引位置。hashCode() 被定义于Object类中，这就意味着 Java 中的任何类都包含有该函数。</p><p>​    <strong>hashCode() 和 equals()都是用于比较两个对象是否相等。</strong></p><h3 id="包装类型的常量池技术"><a href="#包装类型的常量池技术" class="headerlink" title="包装类型的常量池技术"></a>包装类型的常量池技术</h3><p>​    Java基本类型的包装类的大部分都实现了常量池技术, <code>Float</code> 和 <code>Double</code> 没有实现常量池技术。</p><p>​    Byte,Short,Integer,Long 这 4 种包装类默认创建了数值 <strong>[-128，127]</strong> 的相应类型的缓存数据，Character 创建了数值在 <strong>[0,127]</strong> 范围的缓存数据，Boolean 直接返回 True or False。</p><p><strong>Integer 缓存源码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment">// high value may be configured by property</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Character 缓存源码:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Character</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// must cache</span>      <span class="token keyword">return</span> <span class="token class-name">CharacterCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CharacterCache</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CharacterCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Character</span> cache<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">[</span><span class="token number">127</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Boolean 缓存源码：</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static Boolean valueOf(boolean b) {    return (b ? TRUE : FALSE);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果超出对应范围会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。</p></blockquote><h3 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h3><ul><li>装箱：将基本类型用它们对应的引用类型包装起来。</li><li>拆箱：将包装类型转换为基本类型。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 装箱</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 拆箱</span><span class="token keyword">int</span> n <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>原理：</p><ul><li>Integer i = 10; 等价于 Integer i = Integer.valueOf(10);</li><li>int n = i; 等价于 int n = i.intValue();</li></ul><blockquote><p>频繁装拆箱会影响性能。</p></blockquote><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="成员变量与局部变量的区别"><a href="#成员变量与局部变量的区别" class="headerlink" title="成员变量与局部变量的区别"></a>成员变量与局部变量的区别</h3><ul><li><p><strong>语法形式</strong>：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 <code>public</code>,<code>private</code>,<code>static</code> 等修饰符所修饰，而局部变量不能被访问控制修饰符及 <code>static</code> 所修饰；但是，成员变量和局部变量都能被 <code>final</code> 所修饰。</p></li><li><p><strong>存储方式</strong>：从变量在内存中的存储方式来看,如果成员变量是使用 <code>static</code> 修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code> 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</p></li><li><p><strong>生存时间</strong>：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。</p></li><li><p><strong>默认值</strong>：从变量是否有默认值来看，成员变量如果没有被赋初，则会自动以类型的默认值而赋值（一种情况例外:被 <code>final</code> 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</p></li></ul><h3 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>​    封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>​    继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>​    多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。</p><p>特点：</p><ul><li>对象类型和引用类型之间具有继承（类）/实现（接口）的关系。</li><li>引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定</li><li>多态不能调用“只在子类存在但在父类不存在”的方法。</li><li>如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。</li></ul><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><ul><li><p><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</p></li><li><p><strong>深拷贝</strong>：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。</p></li></ul><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>​    <strong>Java 泛型（generics）</strong> 是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><blockquote><p>Java 的泛型是伪泛型，这是因为 Java 在运行期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。</p></blockquote><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><span class="token comment">//在实例化泛型类时，必须指定T的具体类型</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> genericInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实现接口，不指定类型：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现接口，制定类型:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">E</span> element <span class="token operator">:</span> inputArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建不同类型数组： Integer, Double 和 Character</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printArray</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>​    反射赋予了我们在运行时分析类以及执行类中方法的能力，通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><strong>优点：</strong>可以让咱们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</li><li><strong>缺点：</strong>让我们在运行时有了分析操作类的能力，这同样也增加了安全问题。</li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>​    <code>Annontation</code>(注解）是Java5 开始引入的新特性，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量。</p><p>注解本质是一个继承了<code>Annotation</code> 的特殊接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Override</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析注解方法：</p><ul><li><p><strong>编译期直接扫描</strong>：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用<code>@Override</code> 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。</p></li><li><p><strong>运行期通过反射处理</strong>：像框架中自带的注解(比如 Spring 框架的 <code>@Value</code> 、<code>@Component</code>)都是通过反射来进行处理的。</p></li></ul><h2 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I/O"></a>I/O</h2><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>​    如果我们需要持久化Java对象比如Java对象保存在文件中，或者在网络传输Java对象，这些场景都需要用到序列化。</p><ul><li><strong>序列化：</strong>将数据结构或对象转换成二进制字节流的过程。</li><li><strong>反序列化：</strong>将在序列化过程中所生成的二进制字节流转换为数据机构或者对象的过程。</li></ul><blockquote><p>如果变量不想序列化，可以用<code>transient</code>关键字修饰。</p><p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。</p></blockquote><h3 id="键盘输入常用两种方法"><a href="#键盘输入常用两种方法" class="headerlink" title="键盘输入常用两种方法"></a>键盘输入常用两种方法</h3><ol><li><p>通过 <code>Sacnner</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s  <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>通过 <code>BufferedReader</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedReader</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="Java-中-IO-流分为几种"><a href="#Java-中-IO-流分为几种" class="headerlink" title="Java 中 IO 流分为几种?"></a>Java 中 IO 流分为几种?</h3><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分为节点流和处理流。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代理</title>
      <link href="/2022/08/02/java/java-dai-li-xiang-jie/"/>
      <url>/2022/08/02/java/java-dai-li-xiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaGuide学习笔记：<a href="https://javaguide.cn/java/basis/proxy/#">JavaGuide</a></p></blockquote><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>​    简单来说就是<strong>我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</strong></p><p>​    <strong>代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。</strong></p><blockquote><p>代理模式实现方式有两种：静态代理和动态代理</p></blockquote><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>​    静态代理中，我们对目标对象的每个方法的增强都是手动完成的，非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改）且麻烦(需要对每个目标类都单独写一个代理类)。 实际应用</p><p>场景非常非常少，日常开发几乎看不到使用静态代理的场景。</p><p>​    <strong>从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件</strong>。</p><p><strong>静态代理实现步骤：</strong></p><pre><code>1. 定义一个接口及其实现类。1. 创建一个代理类，同样实现这个接口。1. 将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。</code></pre><p><strong>1.定义任务接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskService</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.实现任务接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TaskService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finish the job:"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" !!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.创建代理类并实现任务接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskProxy</span> <span class="token keyword">implements</span> <span class="token class-name">TaskService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TaskService</span> taskService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TaskProxy</span><span class="token punctuation">(</span><span class="token class-name">TaskService</span> taskService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>taskService <span class="token operator">=</span> taskService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用方法之前，我们可以添加自己的操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before method start()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>taskService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用方法之后，我们同样可以添加自己的操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after method start()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.实际使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TaskProxy</span> taskProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TaskProxy</span><span class="token punctuation">(</span>taskService<span class="token punctuation">)</span><span class="token punctuation">;</span>    taskProxy<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.运行结果</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">before method start()finish the job:test !!after method start()Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>​    相比静态代理，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( <em>CGLIB 动态代理机制</em>)。</p><p>​    <strong>从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</strong></p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>​    <strong>在 Java 动态代理机制中 <code>InvocationHandler</code> 接口和 <code>Proxy</code> 类是核心。</strong></p><p>​    <code>Proxy</code> 类中使用频率最高的方法是：<code>newProxyInstance()</code> ，这个方法主要用来生成一个代理对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span> loader<span class="token punctuation">,</span>                                      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                      <span class="token class-name">InvocationHandler</span> h<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数：</p><ul><li>loader：类加载器，用于加载代理对象</li><li>interfaces: 被代理类实现的一些接口</li><li>h：实现了 <code>InvocationHandler</code> 接口的对象</li></ul><p>​    当动态代理对象调用一个方法时，这个方法的调用就会被转发到实现<code>InvocationHandler</code>接口类的<code>invoke</code>方法来调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 当你使用代理对象调用方法的时候实际会调用到这个方法     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>invoke()</code>方法参数：</p><ul><li>proxy：动态生成的代理类</li><li>method：与代理类对象调用的方法相对应</li><li>args：当前 method 方法的参数</li></ul><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>定义一个接口及其实现类</li><li>实现 <code>InvocationHandler</code> 接口并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑</li><li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</code> 方法创建代理对象；</li></ol><blockquote><p><strong>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。</strong></p></blockquote><h4 id="运用实例"><a href="#运用实例" class="headerlink" title="运用实例"></a>运用实例</h4><p><strong>1.定义任务接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TaskService</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.实现任务接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TaskService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finish the job:"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" !!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.定义JDK动态代理类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 代理类中的真实对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TaskInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.获取代理对象工厂类</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class JdkProxyFactory {    public static Object getProxy(Object target) {        return Proxy.newProxyInstance(                target.getClass().getClassLoader(),                target.getClass().getInterfaces(),                new TaskInvocationHandler(target));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.实际使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token class-name">TaskService</span> taskService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TaskService</span><span class="token punctuation">)</span> <span class="token class-name">JdkProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    taskService<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6.运行结果</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">before method startfinish the job:test !!after method startProcess finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>​    <strong>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。</strong></p><blockquote><p><code>CGLIBb</code> (<em>Code Generation Library</em>)是一个基于 <code>ASM</code> 的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用了到<code>CGLIB</code>， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。 </p></blockquote><p>​    <strong>在 CGLIB 动态代理机制中 <code>MethodInterceptor</code> 接口和 <code>Enhancer</code> 类是核心。</strong></p><p>你需要实现 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MethodInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">Callback</span><span class="token punctuation">{</span>    <span class="token comment">// 拦截被代理类中的方法</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>intercept() 方法参数：</p><ul><li>obj：被代理的对象</li><li>method：被拦截的方法</li><li>args: 拦截方法的参数</li><li>proxy: 用于调用原始方法</li></ul><h4 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>定义一个类</li><li>实现 <code>MethodInterceptor</code> 并重写 <code>intercept</code> 方法，<code>intercept</code> 用于拦截增强被代理类的方法。</li><li>通过 <code>Enhancer</code> 类的 <code>create()</code>创建代理类；</li></ol><h4 id="运用实例-1"><a href="#运用实例-1" class="headerlink" title="运用实例"></a>运用实例</h4><p><strong>1.添加依赖包</strong></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.实现个类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliSmsService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"send message:"</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.自定义 <code>MethodInterceptor</code>（方法拦截器）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 自定义MethodInterceptor */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DebugMethodInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param o           代理对象（增强的对象）     * @param method      被拦截的方法（需要增强的方法）     * @param args        方法入参     * @param methodProxy 用于调用原始方法     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token comment">//调用方法之前，我们可以添加自己的操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> object <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用方法之后，我们同样可以添加自己的操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4.获取代理类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxyFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建动态代理增强类</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置类加载器</span>        enhancer<span class="token punctuation">.</span><span class="token function">setClassLoader</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置被代理类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置方法拦截器</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DebugMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建代理类</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.实际使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AliSmsService</span> aliSmsService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AliSmsService</span><span class="token punctuation">)</span> <span class="token class-name">CglibProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token class-name">AliSmsService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>aliSmsService<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>6.运行结果</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">before method sendsend message<span class="token operator">:</span>javaafter method send<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JDK动态代理和CGLIB动态代理比对"><a href="#JDK动态代理和CGLIB动态代理比对" class="headerlink" title="JDK动态代理和CGLIB动态代理比对"></a>JDK动态代理和CGLIB动态代理比对</h3><ul><li><p><strong>JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。</strong></p></li><li><p><strong>就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。</strong></p></li></ul><h2 id="静态代理和动态代理对比"><a href="#静态代理和动态代理对比" class="headerlink" title="静态代理和动态代理对比"></a>静态代理和动态代理对比</h2><ul><li><strong>灵活性：</strong>动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改。</li><li><strong>JVM层面</strong>：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口压测</title>
      <link href="/2022/07/29/ri-chang/jie-kou-ya-ce/"/>
      <url>/2022/07/29/ri-chang/jie-kou-ya-ce/</url>
      
        <content type="html"><![CDATA[<h3 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h3><pre class="line-numbers language-none"><code class="language-none">sh jmeter -n -t /Users/longshengwen/Desktop/yache/ViewResultsTree.jmx -l  /Users/longshengwen/Desktop/yache/result.txt -e -o  /Users/longshengwen/Desktop/yache/webreport<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>ViewResultsTree.jmx: 配置文件</li><li>result.txt：结果文件</li><li>webreport：Web结果文件</li></ul><h3 id="ApacheBench"><a href="#ApacheBench" class="headerlink" title="ApacheBench"></a>ApacheBench</h3><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><ul><li>-n requests    #执行的请求数，即一共发起多少请求。</li><li>-c concurrency    #请求并发数。</li><li>-t timelimit    #测试所进行的最大秒数。其内部隐含值是-n 50000，它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。</li><li>-s timeout    #指定每个请求的超时时间，默认是30秒。</li><li>-b windowsize    #指定tcp窗口的大小，单位是字节。</li><li>-B address    #指定在发起连接时绑定的ip地址是什么。</li><li>-p postfile    #指定要POST的文件，同时要设置-T参数。</li><li>-u putfile    #指定要PUT的文件，同时要设置-T参数。</li><li>-T content-type    #指定使用POST或PUT上传文本时的文本类型，默认是’text/plain’。</li><li>-v verbosity    #设置详细模式等级。</li><li>-w    #将结果输出到html的表中。</li><li>-i    #使用HEAD方式代替GET发起请求。</li><li>-y attributes    #以表格方式输出时，设置html表格tr属性。 </li><li>-z attributes    #以表格方式输出时，设置html表格th或td属性。</li><li>-C attribute    #添加cookie,比如’Apache=1234’。（可重复）</li><li>-H attribute    #为请求追加一个额外的头部，比如’Accept-Encoding: gzip’。（可重复）</li><li>-A attribute    #对服务器提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即,是否发送了401认证需求代码)，此字符串都会被发送。</li><li>-P attribute    #对一个中转代理提供BASIC认证信任。用户名和密码由一个:隔开，并以base64编码形式发送。无论服务器是否需要(即, 是否发送了401认证需求代码)，此字符串都会被发送。</li><li>-X proxy:port   #指定代理服务器的IP和端口。</li><li>-V              #打印版本信息。</li><li>-k              #启用HTTP KeepAlive功能，即在一个HTTP会话中执行多个请求。默认时，不启用KeepAlive功能。</li><li>-d              #不显示”percentage served within XX [ms] table”的消息(为以前的版本提供支持)。</li><li></li><li>-g filename     #把所有测试结果写入一个’gnuplot’或者TSV(以Tab分隔的)文件。此文件可以方便地导入到Gnuplot,IDL,Mathematica,Igor甚至Excel中。其中的第一行为标题。</li><li>-e filename     #产生一个以逗号分隔的(CSV)文件，其中包含了处理每个相应百分比的请求所需要(从1%到100%)的相应百分比的(以微妙为单位)时间。由于这种格式已经“二进制化”，所以比’gnuplot’格式更有用。</li><li>-r              #当收到错误时不要退出。</li><li>-h              #输出帮助信息</li><li>-Z ciphersuite  指定SSL/TLS密码套件</li><li>-f protocol     指定SSL/TLS协议(SSL3, TLS1, TLS1.1, TLS1.2 or ALL)</li></ul><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><pre class="line-numbers language-none"><code class="language-none">ab -n 100 -c 10 http://test.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><pre class="line-numbers language-none"><code class="language-none">ab -n 500 -c 10 -p /Users/longshengwen/Desktop/yache/params "http://172.31.130.21:9026/recommend-api/program/list/similarity"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-p 参数</li></ul><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">#测试服务器的名字Server Software:        nginx#请求的URL主机名Server Hostname:        172.31.130.21#web服务器监听的端口Server Port:            9026#请求的URL中的根绝对路径Document Path:          /recommend-api/program/list/similarity#HTTP响应数据的正文长度Document Length:        40 bytes# 并发用户数，这是ab命令中设置的-c参数Concurrency Level:      10#所有这些请求被处理完成所花费的总时间Time taken for tests:   0.554 seconds# 总请求数量，这是ab命令中设置的-n参数Complete requests:      500# 失败的请求数Failed requests:        16   (Connect: 0, Receive: 0, Length: 16, Exceptions: 0)Non-2xx responses:      16# HTML内容传输量，实际的页面传递字节数。也就是减去了Total transferred中http响应数据中头信息的长度。Total transferred:      90284 bytesTotal body sent:        110500HTML transferred:       19360 bytes# 每秒处理的请求数，服务器的吞吐量，等于：Complete requests / Time taken for tests(QPS)Requests per second:    902.17 [#/sec] (mean)# 用户平均请求等待时间Time per request:       11.084 [ms] (mean)# 服务器平均处理时间Time per request:       1.108 [ms] (mean, across all concurrent requests)# 平均每秒网络上的流量,即每秒收到的速率Transfer rate:          159.08 [Kbytes/sec] received                        194.71 kb/s sent                        353.79 kb/s totalConnection Times (ms)              min  mean[+/-sd] median   maxConnect:        1    1   0.1      1       1Processing:     1   10  10.6      6      82Waiting:        1   10  10.6      6      82Total:          2   11  10.6      7      83Percentage of the requests served within a certain time (ms)  50%      7  66%     12  75%     14  80%     16  90%     20  95%     24  98%     38  99%     77 100%     83 (longest request)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>QPS的稳定值应取决于失败请求为0时支持的最高并发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 压测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试八股文</title>
      <link href="/2022/07/19/java/java-mian-shi-ba-gu-wen/"/>
      <url>/2022/07/19/java/java-mian-shi-ba-gu-wen/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><h3 id="面向对象对象三大特性：封装、继承、多态"><a href="#面向对象对象三大特性：封装、继承、多态" class="headerlink" title="面向对象对象三大特性：封装、继承、多态"></a>面向对象对象三大特性：封装、继承、多态</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>把客观的事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。一个类就是一个封装了数据及操作这些数据的代码的逻辑实体。在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问的。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承可以让某个类型的对象获得另一个类型对象的属性。</p><p>继承实现方式有两类：实现继承与接口继承。</p><p>实现继承是指直接使用父类的属性和方法而无需额外编码能力。</p><p>接口继承是指仅使用属性和方法的名称、但是子类必须提供实现的能力。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态是指一个类实例的相同方法在不同情形有不同表现形式。</p><h3 id="五大基本原则"><a href="#五大基本原则" class="headerlink" title="五大基本原则"></a>五大基本原则</h3><h4 id="单一职责原则SRP"><a href="#单一职责原则SRP" class="headerlink" title="单一职责原则SRP"></a>单一职责原则SRP</h4><p>一个类的功能要单一，不能包罗万象。</p><h4 id="开放封闭原则OCP"><a href="#开放封闭原则OCP" class="headerlink" title="开放封闭原则OCP"></a>开放封闭原则OCP</h4><p>一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。</p><h4 id="里式替换原则LSP"><a href="#里式替换原则LSP" class="headerlink" title="里式替换原则LSP"></a>里式替换原则LSP</h4><p>子类应该可以替换父类并出现在父类能够出现的任何的地方。</p><h4 id="依赖倒置原则DIP"><a href="#依赖倒置原则DIP" class="headerlink" title="依赖倒置原则DIP"></a>依赖倒置原则DIP</h4><p>具体依赖抽象，上层依赖下层。</p><h4 id="接口分离原则ISP"><a href="#接口分离原则ISP" class="headerlink" title="接口分离原则ISP"></a>接口分离原则ISP</h4><p>模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来。</p><h2 id="JDK、JRE、JVM三者的区别"><a href="#JDK、JRE、JVM三者的区别" class="headerlink" title="JDK、JRE、JVM三者的区别"></a>JDK、JRE、JVM三者的区别</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>JDK（Java Development Kit）是整个Java的核心，包括了Java运行环境、Java工具和Java基础的类库。</p><p>JDK是Java开发工具包。</p><h3 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h3><p>JRE（Java Runtime Environment，Java运行环境），包含JVM标准实现及Java核心类库。</p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>JVM（Java Virtual Machine），Java虚拟机，Java运行时的环境，JVM是一种计算设备的规范。</p><h3 id="三者联系与区别"><a href="#三者联系与区别" class="headerlink" title="三者联系与区别"></a>三者联系与区别</h3><h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><p>JVM解析Class文件时需要调用解析所需要的类库lib，在JDK中的jre目录里面有两个文件夹bin和lib，在这里可以认为bin里面的就是JVM，lib里面的则是JVM工作所需要的类，而JVM和lib合起来就成为JRE。</p><p>我们利用JDK开发好程序后，通过JDK中的编译程序（Javac）将我们的文本Java文件编译成Java字节码，在JRE上运行这些Java字节码，JVM解析这些字节码映射到CPU指令集。</p><h2 id="x3D-x3D-和-equals-比较"><a href="#x3D-x3D-和-equals-比较" class="headerlink" title="== 和 equals 比较"></a>== 和 equals 比较</h2><h3 id="对象类型不同"><a href="#对象类型不同" class="headerlink" title="对象类型不同"></a>对象类型不同</h3><ul><li><p>equals()：是超类Object中的方法。</p></li><li><p>==：是操作符</p></li></ul><h3 id="比较的对象不同"><a href="#比较的对象不同" class="headerlink" title="比较的对象不同"></a>比较的对象不同</h3><ul><li>equals()：用来检查两个对象是否相等，即两个对象的内容是否相等。</li><li>==：用于比较引用和比较基本数据类型时具有不同的功能<ul><li>基础数据类型：比较的是他们的值是否相等。</li><li>引用数据类型：比较的是引用的地址是否相同。</li></ul></li></ul><h3 id="运行速度不同"><a href="#运行速度不同" class="headerlink" title="运行速度不同"></a>运行速度不同</h3><p>== 运行速度比 equals() 快，因为 == 只比较引用是否相等。</p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> a2 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token boolean">true</span><span class="token boolean">false</span><span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据上文，== 是比较引用是否相等, 所以 b == b2 输出 为 false 不难理解。</p><p>但为什么 a == a2 是相等的？因为 String a = “a”; 是种特殊的形式，这种赋值形式在 Java 称为直接量，它在常量池而不是在堆中。当常量池中存在 “a” 时， String a2 = “a”， a2 变量引用的就是常量池中同一个 “a”，所以他们相等。</p><h2 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode 与 equals"></a>hashCode 与 equals</h2><ul><li>equals() 用于判断对象内容向否相等。</li><li>hashCode() 返回对象的hash code值。</li></ul><blockquote><p>equals 相等， hashCode 肯定相等；hashCode 相等，equals 不一定相等。</p></blockquote><h2 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h2><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>方法重载是让类以统一的方式处理不同的类型数据的一种手段，多个同名函数同时存在，具有不同的参数个数或类型。</p><p>重载时方法名要一样，但参数个数或类型得不一样，无法根据不同返回类型做重载标准。</p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>父类与子类之间的多态性，对父类的函数进行重新定义。</p><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><h3 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h3><ul><li>抽象类不能被实例化只能被继承。</li><li>包含抽象方法的一定是抽象类，但抽象类不一定含有抽象方法。</li><li>抽象类中的抽象方法的修饰符只能为public或者protected，默认为public。</li><li>一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类。</li><li>抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。</li></ul><h3 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h3><ul><li>接口可以包含变量、方法。</li><li>接口支持多继承，即一个接口可以extends多个接口，间接的解决了Java中类的单继承问题。</li><li>一个类可以实现多个接口。</li><li>JDK1.8新特性：<ul><li>默认方法（default method）：JDK 1.8允许给接口添加非抽象的方法实现，但必须使用default关键字修饰。</li><li>静态方法（static method）：JDK 1.8中允许使用static关键字修饰一个方法，并提供实现，称为接口静态方法。</li></ul></li></ul><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>都不能被实例化。</li><li>接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能实例化。</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li><p>接口只有定义，不能有方法的实现，java 1.8中可以定义default方法体，而抽象类可以有定义与实现，方法可在抽象类中实现。</p></li><li><p>实现接口的关键字为implements，继承抽象类的关键字为extends。一个类可以实现多个接口，但一个类只能继承一个抽象类。所以，使用接口可以间接地实现多重继承。</p></li><li><p>接口强调特定功能的实现，而抽象类强调所属关系。</p></li><li><p>接口成员变量默认为public static final，必须赋初值，不能被修改；其所有的成员方法都是public、abstract的。抽象类中成员变量默认default，可在子类中被重新定义，也可被重新赋值；抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号结尾，不带花括号。</p></li></ul><h2 id="List和Set的区别"><a href="#List和Set的区别" class="headerlink" title="List和Set的区别"></a>List和Set的区别</h2><p>两个接口都是继承自Collection，是常用来存放数据项的集合。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>List允许有相同的元素，Set不存在相同的元素。</li><li>List是有序的，保留插入的顺序，Set是无序的。</li><li>List可以通过下标访问，Set不能。</li></ul><h3 id="常见实现"><a href="#常见实现" class="headerlink" title="常见实现"></a>常见实现</h3><h4 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h4><ul><li>ArrayList：允许对元素进行快速随机访问，从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</li><li>Vector: 支持线程的同步，某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问ArrayList慢。Vector属于线程安全级别的。</li><li>LinkedList: 很适合数据的动态插入和删除，随机访问和遍历速度比较慢。</li></ul><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><blockquote><p>将类放至HashSet中去重，应重写 HashCode() 和 equals() 方法，保证不同对象返回的 HashCode 不一致。</p></blockquote><ul><li>HashSet：当向HashSet结合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据 hashCode值来决定该对象在HashSet中存储位置。hastset 不保证唯一性。</li><li>LinkedHashSet: LinkedHashSet集合同样是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序。</li><li>TreeSet: TreeSet是SortedSet接口的唯一实现类，底层的数据结构是红黑树，TreeSet可以确保集合元素处于排序状态。</li></ul><h2 id="ArrayList-和-LinkedList-区别"><a href="#ArrayList-和-LinkedList-区别" class="headerlink" title="ArrayList 和 LinkedList 区别"></a>ArrayList 和 LinkedList 区别</h2><p>ArrayList 与 LinkedList 都是 List 接口的实现类，因此都实现了 List 的所有未实现的方法，只是实现的方式有所不同。</p><p>ArrayList 是基于动态数组数据结构的实现，访问元素速度优于 LinkedList。</p><p>LinkedList 是基于链表数据结构的实现，占用的内存空间比较大，但在批量插入或删除数据时优于 ArrayList。</p><h2 id="HashMap和HashTable有什么区别？其底层实现是什么？"><a href="#HashMap和HashTable有什么区别？其底层实现是什么？" class="headerlink" title="HashMap和HashTable有什么区别？其底层实现是什么？"></a>HashMap和HashTable有什么区别？其底层实现是什么？</h2><h3 id="区别-1"><a href="#区别-1" class="headerlink" title="区别"></a>区别</h3><ul><li><p>HashMap是非线程安全，HashTable是线程安全。</p></li><li><p>HashMap可以用null做key，HashTable不允许。</p></li><li><p>Hash继承了AbstractMap，HashTable继承Dictionary抽象类。</p></li><li><p>HashMap的初始容量为16，Hashtable初始容量为11，两者的填充因子默认都是0.75。</p></li></ul><h3 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h3><p>HashMap和HashTable都是数组+链表结构实现。</p><h2 id="什么是字节码？采用字节码的好处是什么？"><a href="#什么是字节码？采用字节码的好处是什么？" class="headerlink" title="什么是字节码？采用字节码的好处是什么？"></a>什么是字节码？采用字节码的好处是什么？</h2><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>Java源代码经过虚拟机编译器编译后产生的文件（即扩展为.class的文件），它不面向任何特定的处理器，只面向虚拟机。</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以Java程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行。</p><h2 id="Java中的异常体系"><a href="#Java中的异常体系" class="headerlink" title="Java中的异常体系"></a>Java中的异常体系</h2><p>顶层是throwable</p><p>然后是error和exception</p><blockquote><p>error就是虚拟机异常，比如 outofMemoryError, stackOverFlowError</p><p>Exception 分为编译时异常和运行时异常两部分。</p><p>编译时异常：EOFExcetion; FileNotFoundException</p><p>运行时异常：ClassNotFoundException;NullPointException;</p></blockquote><h2 id="Java类加载器"><a href="#Java类加载器" class="headerlink" title="Java类加载器"></a>Java类加载器</h2><h2 id="GC如何判断对象可以被回收"><a href="#GC如何判断对象可以被回收" class="headerlink" title="GC如何判断对象可以被回收"></a>GC如何判断对象可以被回收</h2><ul><li>引用计数器：为每个对象创建一个引用计数，有对象引用时计数器+1，引用被释放时计数-1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；</li><li>可达性分析：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类加载过程</title>
      <link href="/2022/07/11/java/java-lei-jia-zai-guo-cheng/"/>
      <url>/2022/07/11/java/java-lei-jia-zai-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h2><p>加载过程：<strong>加载-&gt;链接-&gt;初始化</strong></p><p>其中<strong>链接</strong>又分为以下步骤：<strong>验证-&gt;准备-&gt;解析</strong></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p><strong>加载</strong>主要完成以下三件事：</p><ul><li>通过全类名获取定义此类的二进制字节流。</li><li>将字节流所代表的静态存储结构转换为方法区的运行时数据结构。</li><li>在内存中生成一个代表该类的Class对象，作为方法区这些数据的访问入口。</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><ul><li>文本格式验证：验证字节流是否符合Class文件格式的规范，例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</li><li>元数据验证：对字节码描述的信息进行语义分析，以保证其描述的信息符合Java语言规范的要求。</li><li>字节码验证：最复杂的一个阶段，通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</li><li>符号引用验证：确保解析动作能正确执行。</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p><strong>准备阶段时正式为类变量分配内存并设置类变量初始值的阶段。</strong></p><ul><li>内存分配的仅包括类变量（static），不包括实例变量，实例变量会在对象实例化时随着对象一块分配在 Java 堆中。</li><li>这里所设置的初始值”通常情况”下是数据类型默认的零值（如0、0L、null、false等），比如我们定义了<code>public static int value=111</code> ，那么 value 变量在准备阶段的初始值就是 0 而不是111（初始化阶段才会复制）。特殊情况：比如给 value 变量加上了 fianl 关键字<code>public static final int value=111</code> ，那么准备阶段 value 的值就被复制为 111。</li></ul><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用限定符7类符号引用进行。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化是类加载的最后一步，也是真正执行类中定义的 Java 程序代码(字节码)，初始化阶段是执行类构造器 <code>&lt;clinit&gt;()</code>方法的过程。</p><p>对于<code>&lt;clinit&gt;()</code> 方法的调用，虚拟机会自己确保其在多线程环境中的安全性。因为 <code>&lt;clinit&gt;()</code> 方法是带锁线程安全，所以在多线程环境下进行类初始化的话可能会引起死锁，并且这种死锁很难被发现。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java启动调优</title>
      <link href="/2022/07/04/java/java-qi-dong-diao-you/"/>
      <url>/2022/07/04/java/java-qi-dong-diao-you/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM参数调优"><a href="#JVM参数调优" class="headerlink" title="JVM参数调优"></a>JVM参数调优</h2><h3 id="调优栈内存"><a href="#调优栈内存" class="headerlink" title="调优栈内存"></a>调优栈内存</h3><table><thead><tr><th>参数配置</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>-Xmx</td><td>设置最大堆大小</td><td><code>-Xmx3550m</code>，设置JVM最大可用内存为3550 MB。</td></tr><tr><td>-Xms</td><td>设置JVM初始内存</td><td><code>-Xms3550m</code>，设置JVM初始内存为3550 MB。此值建议与<code>-Xmx</code>相同，避免每次垃圾回收完成后JVM重新分配内存。</td></tr><tr><td>-Xmn2g</td><td>设置年轻代大小</td><td><code>-Xmn2g</code>，设置年轻代大小为2 GB。整个JVM内存大小=年轻代大小+年老代大小+持久代大小。</td></tr><tr><td>-Xss</td><td>设置线程的栈大小</td><td><code>-Xss128k</code>，设置每个线程的栈大小为128 KB。</td></tr><tr><td>-XX:NewRatio</td><td>设置年轻代和年老代的比值。</td><td><code>-XX:NewRatio=4</code>，设置年轻代与年老代的比值。</td></tr><tr><td>-XX:SurvivorRatio</td><td>年轻代中Eden区与两个Survivor区的比值。</td><td><code>-XX:SurvivorRatio=4</code>，设置年轻代中Eden区与Survivor区的大小比值</td></tr><tr><td>-XX:MaxPermSize</td><td>设置持久代大小</td><td><code>-XX:MaxPermSize=16m</code>，设置持久代大小为16 MB。</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>设置垃圾最大年龄</td><td><code>-XX:MaxTenuringThreshold=0</code>，设置垃圾最大年龄。</td></tr></tbody></table><h3 id="调优回收器GC"><a href="#调优回收器GC" class="headerlink" title="调优回收器GC"></a>调优回收器GC</h3><table><thead><tr><th>参数配置</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>-XX:+UseParallelGC</td><td>选择垃圾收集器为并行收集器。</td><td><code>-XX:+UseParallelGC</code>此配置仅对年轻代有效。</td></tr><tr><td>-XX:ParallelGCThreads</td><td>配置并行收集器的线程数，即同时多少个线程一起进行垃圾回收</td><td><code>-XX:ParallelGCThreads=20</code>表示配置并行收集器的线程数为20个。</td></tr><tr><td>-XX:+UseParallelOldGC</td><td>配置年老代垃圾收集方式为并行收集</td><td><code>-XX:+UseParallelOldGC</code>表示对年老代进行并行收集。</td></tr><tr><td>-XX:MaxGCPauseMillis</td><td>设置每次年轻代垃圾回收的最长时间，如果无法满足此时间，JVM会自动调整年轻代大小，以满足此值。</td><td><code>-XX:MaxGCPauseMillis=100</code>设置每次年轻代垃圾回收的最长时间为100 ms。</td></tr><tr><td>-XX:+UseAdaptiveSizePolicy</td><td>设置此选项后，并行收集器自动选择年轻代区大小和相应的Survivor区比例，以达到目标系统规定的最低响应时该间或者收集频率，该值建议使用并行收集器时，并且一直打开。</td><td>-XX:+UseAdaptiveSizePolicy</td></tr><tr><td>-XX:+UseConcMarkSweepGC</td><td>设置年老代为并发收集。</td><td>-XX:+UseConcMarkSweepGC</td></tr><tr><td>-XX:+UseParNewGC</td><td>设置年轻代为并行收集。可与CMS收集同时使用。</td><td>-XX:+UseParNewGC</td></tr><tr><td>-XX:CMSFullGCsBeforeCompaction</td><td>此值设置运行多少次GC以后对内存空间进行压缩、整理。</td><td><code>-XX:CMSFullGCsBeforeCompaction=5</code>，表示运行GC5次后对内存空间进行压缩、整理。</td></tr><tr><td>-XX:+UseCMSCompactAtFullCollection</td><td>打开对年老代的压缩。</td><td>-XX:+UseCMSCompactAtFullCollection</td></tr><tr><td>-XX:+PrintGC</td><td>用于输出GC日志</td><td></td></tr><tr><td>-XX:+PrintGCDetails</td><td>用于输出GC详细日志。</td><td></td></tr><tr><td>-XX:+PrintGCTimeStamps</td><td>用于输出GC时间戳（JVM启动到当前日期的总时长的时间戳形）。</td><td></td></tr><tr><td>-XX:+PrintGCDateStamps</td><td>用于输出GC时间戳（日期形式）。</td><td></td></tr><tr><td>-XX:+PrintHeapAtGC</td><td>在进行GC前后打印出堆的信息。</td><td></td></tr><tr><td>-Xloggc:../logs/gc.log</td><td>日志文件的输出路径。</td><td></td></tr></tbody></table><h2 id="JVM内存配置最佳实践"><a href="#JVM内存配置最佳实践" class="headerlink" title="JVM内存配置最佳实践"></a>JVM内存配置最佳实践</h2><h3 id="通过-XX-MaxRAMPercentage限制堆大小"><a href="#通过-XX-MaxRAMPercentage限制堆大小" class="headerlink" title="通过-XX:MaxRAMPercentage限制堆大小"></a>通过-XX:MaxRAMPercentage限制堆大小</h3><ul><li><p>在容器环境下，Java只能获取服务器的配置，无法感知容器内存限制。可以通过设置<code>-Xmx</code>来限制JVM堆大小，但该方式存在以下问题：</p><ul><li>当规格大小调整后，需要重新设置堆大小参数。</li><li>当参数设置不合理时，会出现应用堆大小未达到阈值但容器OOM被强制关闭的情况。</li></ul></li><li><p>推荐的JVM参数设置。</p>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-XX:+UseContainerSupport -XX:InitialRAMPercentage=70.0 -XX:MaxRAMPercentage=70.0 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:/home/admin/nas/gc-${POD_IP}-$(date '+%s').log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/home/admin/nas/dump-${POD_IP}-$(date '+%s').hprof<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="通过-Xms-Xmx限制堆大小"><a href="#通过-Xms-Xmx限制堆大小" class="headerlink" title="通过-Xms -Xmx限制堆大小"></a>通过-Xms -Xmx限制堆大小</h3><ul><li>可以通过设置<code>-Xms</code>和<code>-Xmx</code>来限制堆大小，但该方式存在以下两个问题:<ul><li>当规格大小调整后，需要重新设置堆大小参数。</li><li>当参数设置不合理时，会出现应用堆大小未达到阈值但容器OOM被强制关闭的情况。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中使用milvus</title>
      <link href="/2022/06/29/springboot/springboot-zhong-shi-yong-milvus/"/>
      <url>/2022/06/29/springboot/springboot-zhong-shi-yong-milvus/</url>
      
        <content type="html"><![CDATA[<h2 id="milvus简介"><a href="#milvus简介" class="headerlink" title="milvus简介"></a>milvus简介</h2><p>​    Milvus 于 2019 年创建，目标单一：存储、索引和管理由深度神经网络和其他机器学习 (ML) 模型生成的海量<a href="https://milvus.io/docs/v2.0.x/overview.md#Embedding-vectors">嵌入向量。</a></p><p>​    作为一个专门设计用于处理输入向量查询的数据库，它能够索引万亿规模的向量。与现有的关系数据库主要处理遵循预定义模式的结构化数据不同，Milvus 是自下而上设计的，用于处理从<a href="https://milvus.io/docs/v2.0.x/overview.md#Unstructured-data">非结构化数据</a>转换而来的嵌入向量。</p><p>​    随着互联网的发展和发展，非结构化数据变得越来越普遍，包括电子邮件、论文、物联网传感器数据、Facebook 照片、蛋白质结构等等。为了让计算机理解和处理非结构化数据，使用嵌入技术将这些数据转换为向量。Milvus 存储和索引这些向量。Milvus 能够通过计算两个向量的相似距离来分析它们之间的相关性。如果两个嵌入向量非常相似，则意味着原始数据源也相似。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>Springboot版本 2.6.4</li><li>Java版本 1.8</li><li>Milvus版本 2.0.4</li><li>主机系统MacOS</li></ul><h2 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven 依赖"></a>Maven 依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.milvus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>milvus-sdk-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MilvusConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.milvus.host}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> host<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.milvus.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MilvusServiceClient</span> <span class="token function">milvusServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectParam</span> connectParam <span class="token operator">=</span> <span class="token class-name">ConnectParam</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withHost</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withConnectTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MilvusServiceClient</span><span class="token punctuation">(</span>connectParam<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><ul><li><strong>log4j-slf4j-impl冲突</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span>LoggingException</span><span class="token operator">:</span> log4j<span class="token operator">-</span>slf4j<span class="token operator">-</span>impl cannot be present <span class="token keyword">with</span> <span class="token namespace">log4j</span><span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>slf4jat <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Log4jLoggerFactory</span><span class="token punctuation">.</span><span class="token function">validateContext</span><span class="token punctuation">(</span><span class="token class-name">Log4jLoggerFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Log4jLoggerFactory</span><span class="token punctuation">.</span><span class="token function">newLogger</span><span class="token punctuation">(</span><span class="token class-name">Log4jLoggerFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">44</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Log4jLoggerFactory</span><span class="token punctuation">.</span><span class="token function">newLogger</span><span class="token punctuation">(</span><span class="token class-name">Log4jLoggerFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span>AbstractLoggerAdapter</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">AbstractLoggerAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Log4jLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Log4jLoggerFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">363</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>SLF4JLogFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">SLF4JLogFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">155</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span>SLF4JLogFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">SLF4JLogFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">132</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span>LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">LogFactory</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">273</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span>SpringApplication</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">174</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">1</span> more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法: 在依赖中移除该包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>log4j-slf4j-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Guava 版本过低</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">Description:An attempt was made to call a method that does not exist. The attempt was made from the following location:    io.grpc.Metadata$Key.validateName(Metadata.java:742)The following method did not exist:    com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;CLjava/lang/Object;)VThe calling method's class, io.grpc.Metadata$Key, was loaded from the following location:    jar:file:/Users/longshengwen/.m2/repository/io/grpc/grpc-api/1.38.0/grpc-api-1.38.0.jar!/io/grpc/Metadata$Key.classThe called method's class, com.google.common.base.Preconditions, is available from the following locations:    jar:file:/Users/longshengwen/.m2/repository/com/google/guava/guava/18.0/guava-18.0.jar!/com/google/common/base/Preconditions.classThe called method's class hierarchy was loaded from the following locations:    com.google.common.base.Preconditions: file:/Users/longshengwen/.m2/repository/com/google/guava/guava/18.0/guava-18.0.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法：在Maven中引入高版本guava</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>31.1-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>io.milvus.grpc.ShowCollectionsResponse.emptyLongList()Lcom/google/protobuf/Internal$LongList;</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>NoSuchMethodError</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>milvus<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span>ShowCollectionsResponse</span><span class="token punctuation">.</span><span class="token function">emptyLongList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Lcom</span><span class="token operator">/</span>google<span class="token operator">/</span>protobuf<span class="token operator">/</span><span class="token class-name">Internal</span>$<span class="token class-name">LongList</span><span class="token punctuation">;</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>milvus<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span>ShowCollectionsResponse</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ShowCollectionsResponse</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>milvus<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span>ShowCollectionsResponse</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">ShowCollectionsResponse</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1742</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>milvus<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span>MilvusServiceGrpc</span><span class="token punctuation">.</span><span class="token function">getShowCollectionsMethod</span><span class="token punctuation">(</span><span class="token class-name">MilvusServiceGrpc</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">256</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>milvus<span class="token punctuation">.</span>grpc<span class="token punctuation">.</span></span>MilvusServiceGrpc</span>$<span class="token class-name">MilvusServiceBlockingStub</span><span class="token punctuation">.</span><span class="token function">showCollections</span><span class="token punctuation">(</span><span class="token class-name">MilvusServiceGrpc</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2232</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>milvus<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span>AbstractMilvusGrpcClient</span><span class="token punctuation">.</span><span class="token function">waitForLoadingCollection</span><span class="token punctuation">(</span><span class="token class-name">AbstractMilvusGrpcClient</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">97</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>milvus<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span>AbstractMilvusGrpcClient</span><span class="token punctuation">.</span><span class="token function">loadCollection</span><span class="token punctuation">(</span><span class="token class-name">AbstractMilvusGrpcClient</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">429</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>gxxmt<span class="token punctuation">.</span>recommend<span class="token punctuation">.</span>api<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>iptv<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span>ReTestController</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">ReTestController</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">39</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span><span class="token class-name">Native</span> <span class="token class-name">Method</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>NativeMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">NativeMethodAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">DelegatingMethodAccessorImpl</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>InvocableHandlerMethod</span><span class="token punctuation">.</span><span class="token function">doInvoke</span><span class="token punctuation">(</span><span class="token class-name">InvocableHandlerMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">205</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>method<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>InvocableHandlerMethod</span><span class="token punctuation">.</span><span class="token function">invokeForRequest</span><span class="token punctuation">(</span><span class="token class-name">InvocableHandlerMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">150</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>ServletInvocableHandlerMethod</span><span class="token punctuation">.</span><span class="token function">invokeAndHandle</span><span class="token punctuation">(</span><span class="token class-name">ServletInvocableHandlerMethod</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">117</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>RequestMappingHandlerAdapter</span><span class="token punctuation">.</span><span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">895</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span>RequestMappingHandlerAdapter</span><span class="token punctuation">.</span><span class="token function">handleInternal</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">808</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span></span>AbstractHandlerMethodAdapter</span><span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">AbstractHandlerMethodAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">87</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServlet</span><span class="token punctuation">.</span><span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1067</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>DispatcherServlet</span><span class="token punctuation">.</span><span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">963</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>FrameworkServlet</span><span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1006</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>FrameworkServlet</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">909</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServlet</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">681</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>FrameworkServlet</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">883</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span>HttpServlet</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServlet</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">764</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">227</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span>WsFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">WsFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">53</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">189</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span>WebMvcMetricsFilter</span><span class="token punctuation">.</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">WebMvcMetricsFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">96</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>OncePerRequestFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">OncePerRequestFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">117</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">189</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>CharacterEncodingFilter</span><span class="token punctuation">.</span><span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">201</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span>OncePerRequestFilter</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">OncePerRequestFilter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">117</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">internalDoFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">189</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>ApplicationFilterChain</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardWrapperValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardWrapperValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">197</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardContextValve</span><span class="token punctuation">.</span><span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardContextValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">97</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardContextValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardContextValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">41002</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span></span>AuthenticatorBase</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">AuthenticatorBase</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">540</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardHostValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardHostValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">135</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>valves<span class="token punctuation">.</span></span>ErrorReportValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">ErrorReportValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">92</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span>StandardEngineValve</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">StandardEngineValve</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">78</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span>CoyoteAdapter</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">CoyoteAdapter</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">359</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>http11<span class="token punctuation">.</span></span>Http11Processor</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">Http11Processor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">399</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span>AbstractProcessorLight</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AbstractProcessorLight</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">65</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span>AbstractProtocol</span>$<span class="token class-name">ConnectionHandler</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AbstractProtocol</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">889</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>NioEndpoint</span>$<span class="token class-name">SocketProcessor</span><span class="token punctuation">.</span><span class="token function">doRun</span><span class="token punctuation">(</span><span class="token class-name">NioEndpoint</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1735</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span>SocketProcessorBase</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SocketProcessorBase</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">49</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1191</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span></span>ThreadPoolExecutor</span>$<span class="token class-name">Worker</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">659</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">.</span></span>TaskThread</span>$<span class="token class-name">WrappingRunnable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">TaskThread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">61</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法：重新引入 protobuf-java 包，注意得和 io.milvus 用的版本一致</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>protobuf-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>protobuf-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> milvus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger3.0在Srpingboot2.6.0中报错的问题</title>
      <link href="/2022/03/25/springboot/srpingboot2.6.0-jian-rong-swagger3.0-wen-ti/"/>
      <url>/2022/03/25/springboot/srpingboot2.6.0-jian-rong-swagger3.0-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">org.springframework.context.ApplicationContextException: Failed to start bean 'documentationPluginsBootstrapper'; nested exception is java.lang.NullPointerException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Spirngboot项目启动时报以上异常信息，导致项目终止，启动失败。</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>Springboot:2.6.4</li><li>Jdk:1.8</li><li>Swagger:3.0</li></ul><h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- swagger3 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><blockquote><p>因为 Swagger3.0 不适配 Springboot2.6.0 以上的版本才出现的异常，也不懂 Swagger官方为什么解决这个问题，放弃了？</p></blockquote><p><strong>1.添加配置文件</strong></p><p>在 <strong>application.yml</strong> 中添加以下参数</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>      <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ant_path_matcher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.添加代码</strong></p><p>在 <strong>Swagger3</strong> 的配置文件中添加以下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">WebMvcEndpointHandlerMapping</span> <span class="token function">webEndpointServletHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">WebEndpointsSupplier</span> webEndpointsSupplier<span class="token punctuation">,</span> <span class="token class-name">ServletEndpointsSupplier</span> servletEndpointsSupplier<span class="token punctuation">,</span> <span class="token class-name">ControllerEndpointsSupplier</span> controllerEndpointsSupplier<span class="token punctuation">,</span> <span class="token class-name">EndpointMediaTypes</span> endpointMediaTypes<span class="token punctuation">,</span> <span class="token class-name">CorsEndpointProperties</span> corsProperties<span class="token punctuation">,</span> <span class="token class-name">WebEndpointProperties</span> webEndpointProperties<span class="token punctuation">,</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExposableEndpoint</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> allEndpoints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ExposableWebEndpoint</span><span class="token punctuation">&gt;</span></span> webEndpoints <span class="token operator">=</span> webEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>webEndpoints<span class="token punctuation">)</span><span class="token punctuation">;</span>    allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>servletEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>controllerEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> basePath <span class="token operator">=</span> webEndpointProperties<span class="token punctuation">.</span><span class="token function">getBasePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">EndpointMapping</span> endpointMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndpointMapping</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> shouldRegisterLinksMapping <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shouldRegisterLinksMapping</span><span class="token punctuation">(</span>webEndpointProperties<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> basePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcEndpointHandlerMapping</span><span class="token punctuation">(</span>endpointMapping<span class="token punctuation">,</span> webEndpoints<span class="token punctuation">,</span> endpointMediaTypes<span class="token punctuation">,</span> corsProperties<span class="token punctuation">.</span><span class="token function">toCorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EndpointLinksResolver</span><span class="token punctuation">(</span>allEndpoints<span class="token punctuation">,</span> basePath<span class="token punctuation">)</span><span class="token punctuation">,</span> shouldRegisterLinksMapping<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldRegisterLinksMapping</span><span class="token punctuation">(</span><span class="token class-name">WebEndpointProperties</span> webEndpointProperties<span class="token punctuation">,</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">String</span> basePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> webEndpointProperties<span class="token punctuation">.</span><span class="token function">getDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">ManagementPortType</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">ManagementPortType</span><span class="token punctuation">.</span>DIFFERENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
            <tag> Swagger3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次UITableView的内存泄露</title>
      <link href="/2022/03/24/ios/ji-yi-ci-uitableview-de-nei-cun-xie-lu/"/>
      <url>/2022/03/24/ios/ji-yi-ci-uitableview-de-nei-cun-xie-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="泄露处代码"><a href="#泄露处代码" class="headerlink" title="泄露处代码"></a>泄露处代码</h2><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {    if (indexPath.section == 0) {        swNewsVideoDetailIntroductionCell *tableCell = [tableView dequeueReusableCellWithIdentifier:@"swNewsVideoDetailIntroductionCell" forIndexPath:indexPath];        [tableCell setDataModel:self.baseModel];        tableCell.clickedTitleBlock = ^(BOOL isShowIntroduction) {            [_listView beginUpdates];            [_listView endUpdates];        };        tableCell.selectionStyle = UITableViewCellSelectionStyleNone;        return tableCell; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 <strong>_listView</strong> 便是 tableView 本身。</p><h2 id="泄露原因"><a href="#泄露原因" class="headerlink" title="泄露原因"></a>泄露原因</h2><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">tableCell.clickedTitleBlock = ^(BOOL isShowIntroduction) {    [_listView beginUpdates];    [_listView endUpdates];};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>[_listView beginUpdates]<strong>和</strong>[_listView endUpdates]<strong>是强引用调用，出现了_<strong>listView</strong>引用</strong>Cell</strong>的同时<strong>Cell</strong>又对_<strong>listView</strong>进行了引用，出现循环引用，导致内存泄露。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>将<strong>Cell</strong>对_<strong>listView</strong>引用改为弱引用。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {    if (indexPath.section == 0) {        swNewsVideoDetailIntroductionCell *tableCell = [tableView dequeueReusableCellWithIdentifier:@"swNewsVideoDetailIntroductionCell" forIndexPath:indexPath];        [tableCell setDataModel:self.baseModel];        __weak typeof(self) weakSelf = self;        tableCell.clickedTitleBlock = ^(BOOL isShowIntroduction) {            [weakSelf.listView beginUpdates];            [weakSelf.listView endUpdates];        };        tableCell.selectionStyle = UITableViewCellSelectionStyleNone;        return tableCell;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> UITableView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之工厂模式</title>
      <link href="/2022/03/17/she-ji-mo-shi/java-she-ji-mo-shi-zhi-gong-han-mo-shi/"/>
      <url>/2022/03/17/she-ji-mo-shi/java-she-ji-mo-shi-zhi-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>设计模式学习笔记：<a href="https://bugstack.cn/md/develop/design-pattern/">bugstack 虫洞栈</a></p></blockquote><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>JDK 1.8</li><li>IDEA</li><li>Maven</li></ul><h2 id="工厂模式介绍"><a href="#工厂模式介绍" class="headerlink" title="工厂模式介绍"></a>工厂模式介绍</h2><p>工厂模式又称工厂方法模式，是一种创建型设计模式，其在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p><p><strong>优点：</strong>提供代码结构的扩展性，屏蔽每一个功能类中的具体实现逻辑，让外部可以更加简单的只是知道调用即可。</p><p><strong>缺点：</strong>需要实现的类非常多。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>模拟积分兑换中的发放多种类型奖品。</p><h3 id="工程文件目录"><a href="#工程文件目录" class="headerlink" title="工程文件目录"></a>工程文件目录</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">├── pom.xml├── src│&nbsp;&nbsp; └── main│&nbsp;&nbsp;     ├── java│&nbsp;&nbsp;     │&nbsp;&nbsp; └── factory│&nbsp;&nbsp;     │&nbsp;&nbsp;     ├── StoreFactory.java│&nbsp;&nbsp;     │&nbsp;&nbsp;     ├── define│&nbsp;&nbsp;     │&nbsp;&nbsp;     │&nbsp;&nbsp; └── CommodityType.java│&nbsp;&nbsp;     │&nbsp;&nbsp;     └── store│&nbsp;&nbsp;     │&nbsp;&nbsp;         ├── ICommodity.java│&nbsp;&nbsp;     │&nbsp;&nbsp;         └── impl│&nbsp;&nbsp;     │&nbsp;&nbsp;             ├── CardCommodityService.java│&nbsp;&nbsp;     │&nbsp;&nbsp;             ├── CouponCommodityService.java│&nbsp;&nbsp;     │&nbsp;&nbsp;             └── GoodsCommodityService.java│&nbsp;&nbsp;     └── resources<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加Maven依赖"><a href="#添加Maven依赖" class="headerlink" title="添加Maven依赖"></a>添加Maven依赖</h3><blockquote><p>这里我使用了 <strong>lombok</strong> 插件，所以需要引用lombok依赖。</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.58<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="定义奖品类型"><a href="#定义奖品类型" class="headerlink" title="定义奖品类型"></a>定义奖品类型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CommodityType</span> <span class="token punctuation">{</span>    <span class="token comment">/** 兑换卷 */</span>    <span class="token class-name">Card</span><span class="token punctuation">,</span>    <span class="token comment">/** 优惠卷 */</span>    <span class="token class-name">Coupon</span><span class="token punctuation">,</span>    <span class="token comment">/** 商品 */</span>    <span class="token class-name">Goods</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建全局的奖品定义，有利于今后对代码的维护工作。</p><h4 id="定义发奖接口"><a href="#定义发奖接口" class="headerlink" title="定义发奖接口"></a>定义发奖接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICommodity</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sendCommodity</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> commodityId<span class="token punctuation">,</span> <span class="token class-name">String</span> bizId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><h5 id="兑换卷"><a href="#兑换卷" class="headerlink" title="兑换卷"></a>兑换卷</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CardCommodityService</span> <span class="token keyword">implements</span> <span class="token class-name">ICommodity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCommodity</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> commodityId<span class="token punctuation">,</span> <span class="token class-name">String</span> bizId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求参数[兑换券] =&gt; uId：{} commodityId：{} bizId：{} extMap：{}"</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> commodityId<span class="token punctuation">,</span> bizId<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>extMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="优惠卷"><a href="#优惠卷" class="headerlink" title="优惠卷"></a>优惠卷</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponCommodityService</span> <span class="token keyword">implements</span> <span class="token class-name">ICommodity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCommodity</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> commodityId<span class="token punctuation">,</span> <span class="token class-name">String</span> bizId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"请求参数[优惠券] =&gt; uId：{} commodityId：{} bizId：{} extMap：{}"</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> commodityId<span class="token punctuation">,</span> bizId<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>extMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="奖品"><a href="#奖品" class="headerlink" title="奖品"></a>奖品</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsCommodityService</span> <span class="token keyword">implements</span> <span class="token class-name">ICommodity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCommodity</span><span class="token punctuation">(</span><span class="token class-name">String</span> uId<span class="token punctuation">,</span> <span class="token class-name">String</span> commodityId<span class="token punctuation">,</span> <span class="token class-name">String</span> bizId<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extMap<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求参数[商品] =&gt; uId：{} commodityId：{} bizId：{} extMap：{}"</span><span class="token punctuation">,</span> uId<span class="token punctuation">,</span> commodityId<span class="token punctuation">,</span> bizId<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span>extMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义奖品工程类"><a href="#定义奖品工程类" class="headerlink" title="定义奖品工程类"></a>定义奖品工程类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StoreFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ICommodity</span> <span class="token function">getCommodityService</span><span class="token punctuation">(</span><span class="token class-name">CommodityType</span> commodityType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>commodityType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">CommodityType<span class="token punctuation">.</span>Coupon</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CouponCommodityService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>commodityType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">CommodityType<span class="token punctuation">.</span>Goods</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GoodsCommodityService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>commodityType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">CommodityType<span class="token punctuation">.</span>Card</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CardCommodityService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>调用统一的 <code>public ICommodity getCommodityService(CommodityType commodityType)</code> 方法，根据不同奖品类型返回不同的实现类，达到发放不同奖品的目的。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">StoreFactory</span> storeFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StoreFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 优惠券</span>    <span class="token class-name">ICommodity</span> commodityService_1 <span class="token operator">=</span> storeFactory<span class="token punctuation">.</span><span class="token function">getCommodityService</span><span class="token punctuation">(</span><span class="token class-name">CommodityType<span class="token punctuation">.</span>Coupon</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commodityService_1<span class="token punctuation">.</span><span class="token function">sendCommodity</span><span class="token punctuation">(</span><span class="token string">"10001"</span><span class="token punctuation">,</span> <span class="token string">"EGM1023938910232121323432"</span><span class="token punctuation">,</span> <span class="token string">"791098764902132"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 实物商品</span>    <span class="token class-name">ICommodity</span> commodityService_2 <span class="token operator">=</span> storeFactory<span class="token punctuation">.</span><span class="token function">getCommodityService</span><span class="token punctuation">(</span><span class="token class-name">CommodityType<span class="token punctuation">.</span>Goods</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    extMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"consigneeUserName"</span><span class="token punctuation">,</span> <span class="token string">"谢飞机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commodityService_2<span class="token punctuation">.</span><span class="token function">sendCommodity</span><span class="token punctuation">(</span><span class="token string">"10001"</span><span class="token punctuation">,</span><span class="token string">"9820198721311"</span><span class="token punctuation">,</span><span class="token string">"1023000020112221113"</span><span class="token punctuation">,</span> extMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 第三方兑换卡(爱奇艺)</span>    <span class="token class-name">ICommodity</span> commodityService_3 <span class="token operator">=</span> storeFactory<span class="token punctuation">.</span><span class="token function">getCommodityService</span><span class="token punctuation">(</span><span class="token class-name">CommodityType<span class="token punctuation">.</span>Card</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    commodityService_3<span class="token punctuation">.</span><span class="token function">sendCommodity</span><span class="token punctuation">(</span><span class="token string">"10001"</span><span class="token punctuation">,</span><span class="token string">"AQY1xjkUodl8LO975GdfrYUio"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">11:25:27.016 [main] DEBUG factory.store.impl.CouponCommodityService - 请求参数[优惠券] =&gt; uId：10001 commodityId：EGM1023938910232121323432 bizId：791098764902132 extMap：null11:25:27.036 [main] INFO factory.store.impl.GoodsCommodityService - 请求参数[商品] =&gt; uId：10001 commodityId：9820198721311 bizId：1023000020112221113 extMap：{"consigneeUserName":"谢飞机"}11:25:27.039 [main] INFO factory.store.impl.CardCommodityService - 请求参数[兑换券] =&gt; uId：10001 commodityId：AQY1xjkUodl8LO975GdfrYUio bizId：null extMap：null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigDecimal使用</title>
      <link href="/2022/03/02/java/bigdecimal-shi-yong/"/>
      <url>/2022/03/02/java/bigdecimal-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaGuide学习笔记：<a href="https://javaguide.cn/java/basis/bigdecimal/#">JavaGuide</a></p></blockquote><h2 id="BigDeciaml介绍"><a href="#BigDeciaml介绍" class="headerlink" title="BigDeciaml介绍"></a>BigDeciaml介绍</h2><p>​    <strong>BigDeciaml</strong> 可以实现对浮点数的运算，不会造成精度丢失。大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 <strong>BigDecimal</strong> 来做的。</p><p><strong>浮点数运算精度丢失：</strong>    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">2.0f</span> <span class="token operator">-</span> <span class="token number">1.9f</span><span class="token punctuation">;</span><span class="token keyword">float</span> b <span class="token operator">=</span> <span class="token number">1.8f</span> <span class="token operator">-</span> <span class="token number">1.7f</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">0.1000000240.099999905falseProcess finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为什么会有精度丢失：</strong>    </p><p>​    我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法</p><p>用二进制精确表示。</p><h2 id="BigDeciaml用法"><a href="#BigDeciaml用法" class="headerlink" title="BigDeciaml用法"></a>BigDeciaml用法</h2><blockquote><p>在使用 <code>BigDecimal</code> 时，为了防止精度丢失，推荐使用它的<code>BigDecimal(String val)</code>构造方法或者 <code>BigDecimal.valueOf(double val)</code> 静态方法来创建对象。</p></blockquote><h3 id="加"><a href="#加" class="headerlink" title="加"></a>加</h3><p>​    <strong>add</strong> 方法用于将两个 <strong>BigDecimal</strong> 对象相加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">5Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="减"><a href="#减" class="headerlink" title="减"></a>减</h3><p>​    <strong>subtract</strong> 方法用于将两个 <strong>BigDecimal</strong> 对象相减。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token number">1.0</span><span class="token class-name">Process</span> finished <span class="token keyword">with</span> <span class="token namespace">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h3><p>​    <strong>multiply</strong> 方法用于将两个 <strong>BigDecimal</strong> 对象相乘</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">6.00Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="除"><a href="#除" class="headerlink" title="除"></a>除</h3><p>​    <strong>divide</strong> 方法用于将两个 <strong>BigDecimal</strong> 对象相除。</p><p>​    当除不尽时，会抛出 <code>java.lang.ArithmeticException</code> 异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigDecimal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"2.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BigDecimal</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span>HALF_UP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">0.67Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h3><p>​    <strong>compareTo</strong> 方法用于比较 <strong>BigDecimal</strong> 的大小。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">BigDecimal a = new BigDecimal("2.0");BigDecimal b = new BigDecimal("3.0");System.out.println(a.compareTo(b));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-1Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命名之道</title>
      <link href="/2022/03/02/java/java-ming-ming-zhi-dao/"/>
      <url>/2022/03/02/java/java-ming-ming-zhi-dao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaGuide学习笔记：<a href="https://javaguide.cn/home/">JavaGuide</a></p></blockquote><h2 id="命名的重要性"><a href="#命名的重要性" class="headerlink" title="命名的重要性"></a>命名的重要性</h2><p>《Clean Code》这本书明确指出：</p><blockquote><p>好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。</p><p>若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述。</p></blockquote><h2 id="常见的命名规则以及使用场景"><a href="#常见的命名规则以及使用场景" class="headerlink" title="常见的命名规则以及使用场景"></a>常见的命名规则以及使用场景</h2><h3 id="驼峰命名法（CamelCase）"><a href="#驼峰命名法（CamelCase）" class="headerlink" title="驼峰命名法（CamelCase）"></a>驼峰命名法（CamelCase）</h3><p>​    驼峰命名法应该我们最常见的一个，这种命名方式使用单词首字母大写的格式来区别各个单词。</p><h4 id="大驼峰命名法（UpperCamelCase"><a href="#大驼峰命名法（UpperCamelCase" class="headerlink" title="大驼峰命名法（UpperCamelCase)"></a>大驼峰命名法（UpperCamelCase)</h4><p>​    命名使用场景：<strong>类</strong></p><p>正例：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">ServiceDiscovery、ServiceInstance、LruCacheFactory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">serviceDiscovery、<span class="token class-name">Serviceinstance</span>、<span class="token class-name">LRUCacheFactory</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="小驼峰命名法（lowerCamelCase）"><a href="#小驼峰命名法（lowerCamelCase）" class="headerlink" title="小驼峰命名法（lowerCamelCase）"></a>小驼峰命名法（lowerCamelCase）</h4><p>​    在大驼峰的基础上，第一个单词的首字母也为小写称为小驼峰。</p><p>​    命名使用场景：<strong>方法名、参数名、成员变量、局部变量</strong></p><p>正例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">createCustomThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token class-name">String</span> nameFormat<span class="token punctuation">)</span><span class="token class-name">Uservice</span> userService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>反例：</p><pre class="line-numbers language-none"><code class="language-none">GetUserInfo()CreateCustomThreadPool()setNameFormat(String NameFormat)Uservice user_service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="蛇形命名法（snake-case"><a href="#蛇形命名法（snake-case" class="headerlink" title="蛇形命名法（snake_case)"></a>蛇形命名法（snake_case)</h3><p>​    蛇形命名法也称为下划线命名法，单词与单词之间使用下划线来区别各个单词。</p><p>​    命名使用场景：<strong>测试方法名、常量、枚举名称</strong></p><p>正例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">should_get_200_status_code_when_request_is_valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>反例：</p><pre class="line-numbers language-none"><code class="language-none">@Testvoid shouldGet200StatusCodeWhenRequestIsValid() {  ......}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="串式命名法（kebab-case）"><a href="#串式命名法（kebab-case）" class="headerlink" title="串式命名法（kebab-case）"></a>串式命名法（kebab-case）</h3><p>​    串式命名法在单词与单词之间用中划线来区别各个单词。</p><p>​    命名使用场景：<strong>项目文件夹</strong></p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">kebab-casedubbo-registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="常见命名规范"><a href="#常见命名规范" class="headerlink" title="常见命名规范"></a>常见命名规范</h2><h3 id="Java语言基本命名规范"><a href="#Java语言基本命名规范" class="headerlink" title="Java语言基本命名规范"></a>Java语言基本命名规范</h3><p><strong>1. 包名统一使用小写，尽量使用单个名词作为包名，各个单词通过 “.” 分隔符连接，并且各个单词必须为单数。</strong></p><p>正例：</p><pre class="line-numbers language-none"><code class="language-none">org.apache.dubbo.common.threadlocal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反例：</p><pre class="line-numbers language-none"><code class="language-none">org.apache_dubbo.Common.threadLocals<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**2. 抽象类命名使用 Abstract 开头。 **</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//为远程传输部分抽象出来的一个抽象类（出处：Dubbo源码）</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClient</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractEndpoint</span> <span class="token keyword">implements</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 异常类命名使用 Exception 结尾。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//自定义的 NoSuchMethodException（出处：Dubbo源码）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoSuchMethodException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2725364246023268766L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. 测试类命名以它要测试的类的名称开始，以 Test 结尾。</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//为 AnnotationUtils 类写的测试类（出处：Dubbo源码）public class AnnotationUtilsTest {  ......}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误。</p></blockquote><h3 id="命名易读性规范"><a href="#命名易读性规范" class="headerlink" title="命名易读性规范"></a>命名易读性规范</h3><p><strong>1. 为了能让命名更加易懂和易读，尽量不要缩写/简写单词，除非这些单词已经被公认可以被这样缩写/简写。比如 <code>CustomThreadFactory</code> 不可以被写成 ~~`CustomTF` 。</strong></p><p><strong>2. 命名不像函数一样要尽量追求短，可读性强的名字优先于简短的名字，虽然可读性强的名字会比较长一点。</strong></p><p><strong>3. 避免无意义的命名，你起的每一个名字都要能表明意思。</strong></p><p>正例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserService</span> userService<span class="token punctuation">;</span><span class="token keyword">int</span> userCount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>反例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UserService</span> service<span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4. 避免命名过长（50 个字符以内最好），过长的命名难以阅读并且丑陋。</strong></p><p><strong>5. 不要使用拼音，更不要使用中文。</strong></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://github.com/Snailclimb/JavaGuide/blob/main/docs/system-design/basis/naming.md">Java命名之道</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制详解</title>
      <link href="/2022/03/01/java/java-fan-she-ji-zhi-xiang-jie/"/>
      <url>/2022/03/01/java/java-fan-she-ji-zhi-xiang-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaGuide学习笔记：<a href="https://javaguide.cn/java/basis/reflection/#">JavaGuide</a></p></blockquote><h2 id="反射概念"><a href="#反射概念" class="headerlink" title="反射概念"></a>反射概念</h2><p>​    反射赋予了我们在运行时分析类以及执行类中方法的能力，通过反射你可以获取任意一个类的所有属性和方法，同时也可以调用这些方法和属性。</p><h2 id="反射的应用场景"><a href="#反射的应用场景" class="headerlink" title="反射的应用场景"></a>反射的应用场景</h2><p>​    通过 JDK 实现动态代理的示例代码，其中就使用了反射类 <code>Method</code> 来调用指定的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DebugInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 代理类中的真实对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DebugInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"before method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after method "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注解</strong>也用到反射！</p></blockquote><h2 id="反射优缺点"><a href="#反射优缺点" class="headerlink" title="反射优缺点"></a>反射优缺点</h2><ul><li><p><strong>优点：</strong>可以让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</p></li><li><p><strong>缺点：</strong>增加了安全问题。</p></li></ul><h2 id="反射实战"><a href="#反射实战" class="headerlink" title="反射实战"></a>反射实战</h2><h3 id="获取Class对象的四种方式"><a href="#获取Class对象的四种方式" class="headerlink" title="获取Class对象的四种方式"></a>获取Class对象的四种方式</h3><ol><li><h5 id="知道具体类的情况下"><a href="#知道具体类的情况下" class="headerlink" title="知道具体类的情况下"></a>知道具体类的情况下</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> helloWorld <span class="token operator">=</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><blockquote><p>通过此方式获取的Class对象不会进行初始化。</p></blockquote><ol start="2"><li><h5 id="通过-Class-forName-方法获取"><a href="#通过-Class-forName-方法获取" class="headerlink" title="通过 Class.forName() 方法获取"></a>通过 <code>Class.forName()</code> 方法获取</h5></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> helloWorld <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.demo.proxy.general.HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><h5 id="通过对象实例instance-getClass-获取"><a href="#通过对象实例instance-getClass-获取" class="headerlink" title="通过对象实例instance.getClass()获取"></a>通过对象实例<code>instance.getClass()</code>获取</h5></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HelloWorld</span> helloWorld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> aClass <span class="token operator">=</span> helloWorld<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><h5 id="通过类加载器xxxClassLoader-loadClass-传入类路径获取"><a href="#通过类加载器xxxClassLoader-loadClass-传入类路径获取" class="headerlink" title="通过类加载器xxxClassLoader.loadClass()传入类路径获取"></a>通过类加载器<code>xxxClassLoader.loadClass()</code>传入类路径获取</h5></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> aClass <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.demo.proxy.general.HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，静态块和静态对象不会得到执行</p></blockquote><h3 id="反射基本操作"><a href="#反射基本操作" class="headerlink" title="反射基本操作"></a>反射基本操作</h3><ol><li><h5 id="创建基本类"><a href="#创建基本类" class="headerlink" title="创建基本类"></a>创建基本类</h5></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token string">"long"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world! "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value is "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h5 id="使用反射操作类"><a href="#使用反射操作类" class="headerlink" title="使用反射操作类"></a>使用反射操作类</h5></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment">// 创建 HelloWorld 实例</span>    <span class="token class-name">Class</span> tagetClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.demo.proxy.general.HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HelloWorld</span> helloWorld <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">)</span> tagetClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取类中所有方法</span>    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> tagetClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取类中指定的方法</span>    <span class="token class-name">Method</span> method <span class="token operator">=</span> tagetClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"say"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>helloWorld<span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取指定参数</span>    <span class="token class-name">Field</span> field <span class="token operator">=</span> tagetClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 为了对类中的参数进行修改我们取消安全检查</span>    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 修改指定参数</span>    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>helloWorld<span class="token punctuation">,</span> <span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用私有方法</span>    <span class="token class-name">Method</span> privateMethod <span class="token operator">=</span> tagetClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"privateMethod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 为了调用private方法我们取消安全检查</span>    privateMethod<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    privateMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>helloWorld<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">privateMethodsayhello world! java!value is javaProcess finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot优雅的验证接口参数</title>
      <link href="/2022/02/25/springboot/springboot-you-ya-de-yan-zheng-jie-kou-can-shu/"/>
      <url>/2022/02/25/springboot/springboot-you-ya-de-yan-zheng-jie-kou-can-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>　　在后端写接口时，时常需要接收其他应用调用接口时所发送过来的参数，而往往这些参数后端使用时都需在使用前验证他们的合法性，已保证程序的安全性。一般情况下都是接收到参数然后直接用 if-else 来做判断，代码如下：</p><pre class="line-numbers language-none"><code class="language-none">@PostMapping("/test")@ApiOperation("测试接口")@CrossOrigin@ApiImplicitParams({        @ApiImplicitParam(name = "identify", value = "活动标识", required = true, paramType = "query"),        @ApiImplicitParam(name = "iptvId", value = "Iptv用户ID", required = true, paramType = "query"),        @ApiImplicitParam(name = "name", value = "姓名", required = true, paramType = "query"),        @ApiImplicitParam(name = "phone", value = "手机号", required = true, paramType = "query"),        @ApiImplicitParam(name = "address", value = "地址", required = true, paramType = "query"),        @ApiImplicitParam(name = "token", value = "加密串", required = true, paramType = "query")})public ResultApi test(String identify, String iptvId, String name, String phone, String address, String token) {    if (StringUtils.isBlank(identify)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(iptvId)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(name)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(phone)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(address)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    if (StringUtils.isBlank(token)) {        return ResultApi.error(ResultCode.PARAM_IS_BLANK);    }    return ResultApi.success();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里虽仅仅接收了5个参数，但需要用来做验证的代码就显得如此冗长了。如果是接收几十个甚至上百个参数，那么验证代码的长度可想而知。做为一个代码逻辑写得不怎样缺始终保持着良好代码风格的人来说，这样子做肯定是不允许的。接下来就简单地介绍一下如何使用 validation 来干净利落的接收接口的参数并进行验证。</p><h2 id="validation-简介"><a href="#validation-简介" class="headerlink" title="validation 简介"></a>validation 简介</h2><p>　　JSR303 是一项标准,只提供规范不提供实现，规定一些校验规范即校验注解，如@Null，@NotNull，@Pattern，位于javax.validation.constraints包下。JSR-349是其的升级版本，添加了一些新特性。hibernate validation 是对这个规范的实现，并增加了一些其他校验注解，如@Email，@Length，@Range等等。</p><h3 id="约束注解"><a href="#约束注解" class="headerlink" title="约束注解"></a>约束注解</h3><p>Bean Validation 提供了众多可以约束属性值的注解，如下：</p><p>@Null：被注释的元素必须为null</p><p>@NotNull：被注释的元素必须不为null</p><p>@AssertTrue：被注释的元素必须为 true</p><p>@AssertFalse：被注释的元素必须为 false</p><p>@Min(value)：被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@Max(value)：被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p><p>@DecimalMin(value)：被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@DecimalMax(value)：被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p><p>@Size(max, min)：被注释的元素的大小必须在指定的范围内</p><p>@Digits (integer, fraction)：被注释的元素必须是一个数字，其值必须在可接受的范围内</p><p>@Past：被注释的元素必须是一个过去的日期</p><p>@Future：被注释的元素必须是一个将来的日期</p><p>@Pattern(value)：被注释的元素必须符合指定的正则表达式</p><p>在Bean Validation 的基础上 Hibernate Validator 又添加了如下几项约束：</p><p>@Email：被注释的元素必须是电子邮箱地址</p><p>@Length：被注释的字符串的大小必须在指定的范围内</p><p>@NotEmpty：被注释的字符串的必须非空</p><p>@Range：被注释的元素必须在合适的范围内</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>　　Bean Validation 和 Hibernate Validator 提供的注解足以满足一般情景下的使用需求，接下来直接使用 Validation 来对代码做修改。<br>　　我们先新建一个用来装载参数的bean，并将先前的接口做以下修改。</p><pre class="line-numbers language-none"><code class="language-none">@ApiModelpublic class ApiIptvUserAddressTestDTO implements Serializable {    @ApiModelProperty(name = "活动标识")    @NotBlank(message = "活动标识不能为空")    private String identify;    @ApiModelProperty(name = "IPTVId")    @NotBlank(message = "IPTVId不能为空")    private String iptvId;    @ApiModelProperty(name = "姓名")    private String name;    @ApiModelProperty(name = "手机号")    @Length(max = 11,message = "手机号不合法")    private String phone;    @ApiModelProperty(name = "地址")    private String address;    @ApiModelProperty(name = "加密串")    @NotBlank(message = "加密串不能为空")    private String token;    public String getIdentify() { return identify; }    public void setIdentify(String identify) { this.identify = identify; }    public String getIptvId() { return iptvId; }    public void setIptvId(String iptvId) { this.iptvId = iptvId; }    public String getName() { return name; }    public void setName(String name) { this.name = name; }    public String getPhone() { return phone; }    public void setPhone(String phone) { this.phone = phone; }    public String getAddress() { return address; }    public void setAddress(String address) { this.address = address; }    public String getToken() { return token; }    public void setToken(String token) { this.token = token; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@PostMapping("/test")@ApiOperation("测试接口")@CrossOriginpublic ResultApi test(@Validated ApiIptvUserAddressTestDTO dto) {        return ResultApi.success();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　这里需要使用 @Validated 注解来对 dto 进行标注，不然 dto 里面的参数约束注解并不会生效，这一点很重要。<br>　　经过这样一修改就可以把烦人且冗长的参数验证代码剥离到 DTO 中进行处理了，给 Controller 中腾出更多的空间去写业务代码，代码还美观。</p><p>　　为了更方便的去统一接口返回的参数状态码，我们还需要去实现一个全局的异常捕捉方法，对参数验证不通过的BindException异常进行捕捉并处理，实现方法如下：</p><pre class="line-numbers language-none"><code class="language-none">@RestControllerAdvicepublic class RRExceptionHandler {    /**   * 参数验证   */  @ExceptionHandler(BindException.class)  public ResultApi handleBindException(BindException e) {    logger.error(e.getBindingResult().getFieldError().getDefaultMessage());    return ResultApi.error(10002,e.getBindingResult().getFieldError().getDefaultMessage());  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>　　使用 validation 对参数进行验证有着让代码更为简洁美观的优点，同时还可以使用现有的注解对参数进行验证，可以减轻开发的工作量。但同时缺点也很明显，引入较多的DTO会使项目的文件越来越多。写出一手整洁、注释清晰的代码，可以为后续的代码维护工作打下良好的基石，所以使用 validation 对参数进行验证还是利大于弊的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot集成Swagger3.0</title>
      <link href="/2022/02/25/springboot/springboot-ji-cheng-swagger3.0/"/>
      <url>/2022/02/25/springboot/springboot-ji-cheng-swagger3.0/</url>
      
        <content type="html"><![CDATA[<h2 id="Swagger-3-0"><a href="#Swagger-3-0" class="headerlink" title="Swagger 3.0"></a>Swagger 3.0</h2><p>Swagger 是一套基于 OpenAPI 规范（OpenAPI Specification，OAS）构建的开源工具，后来成为了 Open API 标准的主要定义者，现在最新的版本为17年发布的 Swagger3（Open Api3）。 </p><p>OAS本身是一个API规范，它用于描述一整套API接口，包括一个接口是哪种请求方式、哪些参数、哪些header等，都会被包括在这个文件中。它在设计的时候通常是YAML格式，这种格式书写起来比较方便，而在网络中传输时又会以json形式居多，因为json的通用性比较强。</p><p>SpringFox是 spring 社区维护的一个项目（非官方），帮助使用者将 swagger2 集成到 Spring 中。</p><h2 id="Swagger-包含以下三部分"><a href="#Swagger-包含以下三部分" class="headerlink" title="Swagger 包含以下三部分"></a>Swagger 包含以下三部分</h2><ul><li>Swagger Editor：基于浏览器的编辑器，我们可以使用它编写我们 OpenAPI 规范。</li><li>Swagger UI：它会将我们编写的 OpenAPI 规范呈现为交互式的 API 文档，后文我将使用浏览器来查看并且操作我们的 Rest API。</li><li>Swagger Codegen：它可以通过为 OpenAPI（以前称为 Swagger）规范定义的任何 API 生成服务器存根和客户端 SDK 来简化构建过程。<h2 id="SpringFox-3-0-0-发布"><a href="#SpringFox-3-0-0-发布" class="headerlink" title="SpringFox 3.0.0 发布"></a>SpringFox 3.0.0 发布</h2></li><li>SpringFox 3.0.0 发布了，SpringFox 的前身是 swagger-springmvc，是一个开源的 API doc 框架，可以将 Controller 的方法以文档的形式展现。</li><li>首先，非常感谢社区让我有动力参与这个项目。在这个版本中，在代码、注释、bug报告方面有一些非常惊人的贡献，看到人们在问题论坛上跳槽来解决问题，我感到很谦卑。它确实激励我克服“困难”，开始认真地工作。有什么更好的办法来摆脱科维德的忧郁！</li><li>注意：这是一个突破性的变更版本，我们已经尽可能地保持与springfox早期版本的向后兼容性。在2.9之前被弃用的api已经被积极地删除，并且标记了将在不久的将来消失的新api。所以请注意这些，并报告任何遗漏的内容。<h2 id="兼容性说明"><a href="#兼容性说明" class="headerlink" title="兼容性说明"></a>兼容性说明</h2></li><li>需要Java 8</li><li>需要Spring5.x</li><li>需要SpringBoot 2.2+<h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2>这里使用Maven依赖包。<h3 id="Maven依赖安装"><a href="#Maven依赖安装" class="headerlink" title="Maven依赖安装"></a>Maven依赖安装</h3>在依赖文件中引入 springfox-boot-starter<pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;    &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置application-yml文件"><a href="#配置application-yml文件" class="headerlink" title="配置application.yml文件"></a>配置application.yml文件</h3><pre class="line-numbers language-none"><code class="language-none"># swagger 文档相关配置swagger:  enable: true  name: xxx系统  # 版本号  version: 1.0.0  description: xxx接口文档  # 扫描的包名前缀  base-package: com.gxxmt.cloud.carousel.modules  auth-name: xxxx  auth-email: xxx@qq.com  auth-url:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定swagger配置类获取配置"><a href="#自定swagger配置类获取配置" class="headerlink" title="自定swagger配置类获取配置"></a>自定swagger配置类获取配置</h3><pre class="line-numbers language-none"><code class="language-none">package com.gxxmt.cloud.carousel.common.swagger;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;@Component@ConfigurationProperties("swagger")public class SwaggerProperties {    /**     * 是否开启swagger     */    private Boolean enable;    /**     * 项目应用名     */    private String name;    /**     * 项目版本信息     */    private String version;    /**     * 项目描述信息     */    private String description;    /**     * 包名前缀     */    private String basePackage;    /**     * 作者名称     */    private String authName;    /**     * 作者邮箱     */    private String authEmail;    /**     * 作者空间     */    private String authUrl;    public Boolean getEnable() {        return enable;    }    public void setEnable(Boolean enable) {        this.enable = enable;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getVersion() {        return version;    }    public void setVersion(String version) {        this.version = version;    }    public String getDescription() {        return description;    }    public void setDescription(String description) {        this.description = description;    }    public String getBasePackage() {        return basePackage;    }    public void setBasePackage(String basePackage) {        this.basePackage = basePackage;    }    public String getAuthName() {        return authName;    }    public void setAuthName(String authName) {        this.authName = authName;    }    public String getAuthEmail() {        return authEmail;    }    public void setAuthEmail(String authEmail) {        this.authEmail = authEmail;    }    public String getAuthUrl() {        return authUrl;    }    public void setAuthUrl(String authUrl) {        this.authUrl = authUrl;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-EnableOpenApi注解，启用swagger配置"><a href="#使用-EnableOpenApi注解，启用swagger配置" class="headerlink" title="使用@EnableOpenApi注解，启用swagger配置"></a>使用@EnableOpenApi注解，启用swagger配置</h3><pre class="line-numbers language-none"><code class="language-none">package com.gxxmt.cloud.carousel.common.swagger;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.oas.annotations.EnableOpenApi;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;/** * @Auther:  * @Date:  * @Description: */@Configuration@EnableOpenApipublic class SwaggerConfiguration {    private final SwaggerProperties swaggerProperties;    public SwaggerConfiguration(SwaggerProperties swaggerProperties) {        this.swaggerProperties = swaggerProperties;    }    @Bean    public Docket docket(){        return new Docket(DocumentationType.OAS_30)                .enable(swaggerProperties.getEnable())                .apiInfo(apiInfo())                .select()                //apis： 添加swagger接口提取范围                .apis(RequestHandlerSelectors.basePackage(swaggerProperties.getBasePackage()))                //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))                .paths(PathSelectors.any())                .build();    }    private ApiInfo apiInfo(){        return new ApiInfoBuilder()                .title(swaggerProperties.getName())                .description(swaggerProperties.getDescription())                .contact(new Contact(swaggerProperties.getAuthName(), swaggerProperties.getAuthUrl(), swaggerProperties.getAuthEmail()))                .version(swaggerProperties.getVersion())                .build();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Swagger-注解使用"><a href="#Swagger-注解使用" class="headerlink" title="Swagger 注解使用"></a>Swagger 注解使用</h2><h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3>该注解将一个Controller（Class）标注为一个swagger资源（API）。</li><li>tags<br>API分组标签。具有相同标签的API将会被归并在一组内展示。</li><li>value<br>如果tags没有定义，value将作为Api的tags使用</li><li>description<br>API的详细描述，在1.5.X版本之后不再使用，但实际发现在2.0.0版本中仍然可以使用<h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3>该注解在指定的（路由）路径上，对一个操作或HTTP方法进行描述。</li><li>value<br>对操作的简单说明，长度为120个字母，60个汉字。</li><li>notes<br>对操作的详细说明。</li><li>httpMethod<br>HTTP请求的动作名，可选值有：”GET”, “HEAD”, “POST”, “PUT”, “DELETE”, “OPTIONS” and “PATCH”。</li><li>code<br>默认为200，有效值必须符合标准的HTTP Status Code Definitions。<h3 id="ApiImplicitParams"><a href="#ApiImplicitParams" class="headerlink" title="@ApiImplicitParams"></a>@ApiImplicitParams</h3>注解ApiImplicitParam的容器类，以数组方式存储。<h3 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a>@ApiImplicitParam</h3>对API的单一参数进行注解。</li><li>name<br>参数名称</li><li>value<br>参数的简短描述</li><li>required<br>是否为必传参数</li><li>dataType<br>参数类型，可以为类名，也可以为基本类型（String，int、boolean等）</li><li>paramType<br>参数的传入（请求）类型，可选的值有path, query, body, header or form。<h3 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a>@ApiParam</h3>增加对参数的元信息说明。</li><li>required<br>是否为必传参数</li><li>value<br>参数简短说明<h3 id="ApiResponses"><a href="#ApiResponses" class="headerlink" title="@ApiResponses"></a>@ApiResponses</h3>注解@ApiResponse的包装类，数组结构。<h3 id="ApiResponse"><a href="#ApiResponse" class="headerlink" title="@ApiResponse"></a>@ApiResponse</h3>描述一个操作可能的返回结果。</li><li>code<br>HTTP请求返回码。有效值必须符合标准的HTTP Status Code Definitions。</li><li>message<br>更加易于理解的文本消息</li><li>response<br>返回类型信息，必须使用完全限定类名，比如“com.xyz.cc.Person.class”。</li><li>responseContainer<br>如果返回类型为容器类型，可以设置相应的值。有效值为 “List”, “Set” or “Map”，其他任何无效的值都会被忽略。<h2 id="Model-注解"><a href="#Model-注解" class="headerlink" title="Model 注解"></a>Model 注解</h2>对于Model的注解，Swagger提供了两个：@ApiModel及@ApiModelProperty，分别用以描述Model及Model内的属性。<h3 id="ApiModel"><a href="#ApiModel" class="headerlink" title="@ApiModel"></a>@ApiModel</h3>&amp;ensp;&amp;ensp;&amp;ensp;提供对Swagger model额外信息的描述。在标注@ApiOperation注解的操作内，所有的类将自动被内省（introspected），但利用这个注解可以做一些更加详细的model结构说明。主要属性有：</li><li>value<br>model的别名，默认为类名  </li><li>description<br>model的详细描述  <h3 id="ApiModelProperty"><a href="#ApiModelProperty" class="headerlink" title="@ApiModelProperty"></a>@ApiModelProperty</h3>对model属性的注解，主要的属性值有：</li><li>value<br>属性简短描述</li><li>example<br>属性的示例值</li><li>required<br>是否为必须值<h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><h4 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h4><pre class="line-numbers language-none"><code class="language-none">@RestController@RequestMapping("/test")@Api(tags = "测试接口")public class TestController {    @PostMapping("/test")    @ApiOperation("剪切测试")    @ApiImplicitParams({            @ApiImplicitParam(name = "id", value = "索引", required = true, dataType = "int"),            @ApiImplicitParam(name = "name", value = "姓名", required = true, dataType = "String"),    })    @ApiResponses({            @ApiResponse(responseCode = "401", description = "权限不足"),            @ApiResponse(responseCode = "404", description = "路径错误")}    )    public RestResponse test(Integer id, String name) {        return RestResponse.success();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-ApiModel注解"><a href="#使用-ApiModel注解" class="headerlink" title="使用@ApiModel注解"></a>使用@ApiModel注解</h4><pre class="line-numbers language-none"><code class="language-none">package com.gxxmt.cloud.carousel.modules.test;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;@ApiModel(value = "test", description = "测试model")public class TestModel {    @ApiModelProperty(value = "索引", name = "id", example = "1", required = true)    private Integer id;    @ApiModelProperty(value = "名称", name = "name", example = "WSC", required = true)    private String name;    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@RestController@RequestMapping("/test")@Api(tags = "测试接口")public class TestController {    @PostMapping("/test2")    @ApiOperation("剪切测试")    public RestResponse test2(@RequestBody TestModel model) {        return RestResponse.success();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Swagger3.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-table些使用技巧</title>
      <link href="/2022/02/25/vue/el-table-xie-shi-yong-ji-qiao/"/>
      <url>/2022/02/25/vue/el-table-xie-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近开发中使用到 element-ui 这个前端框架，在管理后台项目开发中使用最频繁的应该是表格控件了。所以整理一些使用el-table实现的特殊功能方法。</p><h2 id="el-table-懒加载树状表格手风琴模式"><a href="#el-table-懒加载树状表格手风琴模式" class="headerlink" title="el-table 懒加载树状表格手风琴模式"></a>el-table 懒加载树状表格手风琴模式</h2><p>el-table 在官方提供的功能中，树状表格是不提供手风琴模式的，（手风琴模式即展开某项，其他不关联且已展开项自动关闭），可以自己用以下代码实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 展开行 */</span><span class="token function">expandChange</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> expanded</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>isLeaf <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> row<span class="token punctuation">.</span>hasChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fatherIds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span><span class="token function">clearSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> treeList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>treeData<span class="token punctuation">;</span>    <span class="token comment">// eslint-disable-next-line no-unused-vars</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> treeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token function">String</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fatherIds<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 关闭除了父节点以外的节点</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>treeData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'expanded'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">// 获取所有父节点ID</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> treeList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>treeData<span class="token punctuation">;</span>  <span class="token keyword">const</span> fatherIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// eslint-disable-next-line no-unused-vars</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> treeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> children <span class="token operator">=</span> treeList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fatherIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fatherIds<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> fatherIds<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="el-table懒加载树状表格刷新节点"><a href="#el-table懒加载树状表格刷新节点" class="headerlink" title="el-table懒加载树状表格刷新节点"></a>el-table懒加载树状表格刷新节点</h2><p>在 el-table 懒加载树状表格模式中，官方并不提供主动去刷新某个节点数据的方法，可以用以下代码实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>el<span class="token operator">-</span>table    ref<span class="token operator">=</span><span class="token string">"stencilTable"</span>    v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">"listLoading"</span>    highlight<span class="token operator">-</span>current<span class="token operator">-</span>row    style<span class="token operator">=</span><span class="token string">"margin-top:10px;"</span>    size<span class="token operator">=</span><span class="token string">"mini"</span>    border    row<span class="token operator">-</span>key<span class="token operator">=</span><span class="token string">"id"</span>    <span class="token literal-property property">lazy</span>    <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"list"</span>    <span class="token operator">:</span>height<span class="token operator">=</span><span class="token string">"510"</span>    <span class="token operator">:</span>load<span class="token operator">=</span><span class="token string">"load"</span>    <span class="token operator">:</span>tree<span class="token operator">-</span>props<span class="token operator">=</span><span class="token string">"defaultProps"</span>  <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column type<span class="token operator">=</span><span class="token string">"selection"</span> align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"40"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token literal-property property">listLoading</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">20</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">expandRow</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">defaultProps</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">'children'</span><span class="token punctuation">,</span>        <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>        <span class="token literal-property property">hasChildren</span><span class="token operator">:</span> <span class="token string">'hasChildren'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token literal-property property">maps</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">parentNode</span><span class="token operator">:</span> tree<span class="token punctuation">.</span>id      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> stencilManager<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/**     * 加载列表     */</span>    <span class="token keyword">async</span> <span class="token function">loadList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token literal-property property">parentNode</span><span class="token operator">:</span> <span class="token string">'1'</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">await</span> stencilManager<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">const</span> list <span class="token operator">=</span> data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">/**     * 刷新节点     */</span>    <span class="token function">refreshNode</span><span class="token punctuation">(</span><span class="token parameter">parentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>parentId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>lazyTreeNodeMap<span class="token punctuation">,</span> parentId<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="el-table懒加载树状表格主动加载节点数据并展开"><a href="#el-table懒加载树状表格主动加载节点数据并展开" class="headerlink" title="el-table懒加载树状表格主动加载节点数据并展开"></a>el-table懒加载树状表格主动加载节点数据并展开</h2><p>在使用 el-table 中经常会用到自动展开某项的功能，官方虽然提供有类似功能，但在el-table使用懒加载的模式下该功能并不能正常使用。可以自已使用以下代码实现。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>el<span class="token operator">-</span>table    ref<span class="token operator">=</span><span class="token string">"stencilTable"</span>    v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">"listLoading"</span>    highlight<span class="token operator">-</span>current<span class="token operator">-</span>row    style<span class="token operator">=</span><span class="token string">"margin-top:10px;"</span>    size<span class="token operator">=</span><span class="token string">"mini"</span>    border    row<span class="token operator">-</span>key<span class="token operator">=</span><span class="token string">"id"</span>    <span class="token literal-property property">lazy</span>    <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"list"</span>    <span class="token operator">:</span>height<span class="token operator">=</span><span class="token string">"510"</span>    <span class="token operator">:</span>load<span class="token operator">=</span><span class="token string">"load"</span>    <span class="token operator">:</span>tree<span class="token operator">-</span>props<span class="token operator">=</span><span class="token string">"defaultProps"</span>  <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column type<span class="token operator">=</span><span class="token string">"selection"</span> align<span class="token operator">=</span><span class="token string">"center"</span> width<span class="token operator">=</span><span class="token string">"40"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">&gt;</span><span class="token keyword">async</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>maps<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span> tree<span class="token punctuation">,</span> treeNode<span class="token punctuation">,</span> resolve <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">parentNode</span><span class="token operator">:</span> tree<span class="token punctuation">.</span>id  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> stencilManager<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> data<span class="token punctuation">.</span>list<span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 加载并展开节点</span><span class="token keyword">async</span> <span class="token function">loadNode</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> lazyTreeNodeMap<span class="token punctuation">,</span> treeData <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">[</span><span class="token string">'store'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>states<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'loading'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        ids<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>lazyTreeNodeMap<span class="token punctuation">,</span> id<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'children'</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'loading'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'loaded'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'expanded'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      treeData<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span>hasChildren <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="el-table懒加载树状表格获取节点父节点"><a href="#el-table懒加载树状表格获取节点父节点" class="headerlink" title="el-table懒加载树状表格获取节点父节点"></a>el-table懒加载树状表格获取节点父节点</h2><p>在el-table官方提供的API中没有获取节点父节点的方法，可以用一下方法获取到所有父节点。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 获取所有父节点ID</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> treeList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>stencilTable<span class="token punctuation">.</span>store<span class="token punctuation">.</span>states<span class="token punctuation">.</span>treeData<span class="token punctuation">;</span>  <span class="token keyword">const</span> fatherIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// eslint-disable-next-line no-unused-vars</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> treeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> children <span class="token operator">=</span> treeList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fatherIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fatherIds<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFatherNodeId</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> fatherIds<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在日常开发中，及时整理记录已使用过的方法可以提高日后开发的效率。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue自定义组件之时间输入框</title>
      <link href="/2022/02/25/vue/vue-zi-ding-yi-zu-jian-zhi-shi-jian-shu-ru-kuang/"/>
      <url>/2022/02/25/vue/vue-zi-ding-yi-zu-jian-zhi-shi-jian-shu-ru-kuang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在使用 element-ui 框架的前端项目开发中遇到一个棘手的问题，项目中使用的时间输入框需要支持时分秒毫秒的输入，而且时间最大范围还需要超过24小时，但 element-ui 中自带的时间输入框的范围只支持 00:00:00 到 23:59:59。所以我们就需要自定义开发一个符合自身需求的组件。  </p><h2 id="组件功能"><a href="#组件功能" class="headerlink" title="组件功能"></a>组件功能</h2><p>因为组件要追求输入的便捷性，也就是越方便越好，所以组件需要支持时分秒毫秒独立输入。为了方便阅读，输入后显示的格式为 HH:mm:ss.SS，而且中间的“:”以及“.”符号要固定。毫秒这个单位不经常用，所以需要自动补全。时间只有数字，所以也要限定只能输入数字。 组件需要在多处重复使用，所以组件要支持复用。功能总结如下：  </p><ol><li>支持时分秒毫秒独立输入。</li><li>显示格式为 HH:mm:ss.SS。</li><li>数字自动补全。</li><li>限定输入字符。</li><li>自动纠错。</li><li>支持复用。<h2 id="方案设想"><a href="#方案设想" class="headerlink" title="方案设想"></a>方案设想</h2></li></ol><ul><li><strong>方案一：</strong><br>单独一个用文本输入框，限定文本的类型，监听输入框的动作，然后进行结果处理。优点：输入框样式不需要进行太多的处理。缺点：时分秒毫秒不方便独立输入，处理结果流程复杂。</li><li><strong>方案二：</strong><br>使用三个独立的文本输入框，监听每个输入框的动作，然后进行结果处理。优点：结果处理简单。缺点：输入框样式进行处理复杂，不能进行组合输入。</li></ul><p>结合方案一和方案二，选用方案二。</p><h2 id="方案实施"><a href="#方案实施" class="headerlink" title="方案实施"></a>方案实施</h2><p><strong>页面元素布局</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sw-time-input"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-hour'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hour"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-hour"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('hour', hour)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('hour', hour)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('hour', hour)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('hour', hour)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-minute'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"minute"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-minute"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"60"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('minute', minute)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('minute', minute)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('minute', minute)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('minute', minute)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-second'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"second"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-second"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"60"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('second', second)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('second', second)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('second', second)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('second', second)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-millisecond'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"millisecond"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-millisecond"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('millisecond', millisecond)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('millisecond', millisecond)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('millisecond', millisecond)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('millisecond', millisecond)"</span>    <span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">&gt;</span><span class="token comment">/* 最外层DIV样式 */</span><span class="token punctuation">.</span>sw<span class="token operator">-</span>time<span class="token operator">-</span>input <span class="token punctuation">{</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>5px<span class="token punctuation">;</span>    border<span class="token operator">-</span>color<span class="token operator">:</span> #dcdfe6<span class="token punctuation">;</span>    border<span class="token operator">-</span>style<span class="token operator">:</span> solid<span class="token punctuation">;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> 85px<span class="token punctuation">;</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 3px<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>time<span class="token operator">-</span>input<span class="token operator">-</span>text <span class="token punctuation">{</span>        <span class="token comment">/* 时输入DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>hour <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> right<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 分输入DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>minute <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 秒输入DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>second <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 毫秒输入DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>millisecond <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> left<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/* 分隔符DIV样式 */</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>separate <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            margin<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token operator">-</span>4px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token operator">-</span>4px<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 去除浏览器默认样式 */</span>    <span class="token literal-property property">input</span><span class="token operator">:</span>focus<span class="token punctuation">{</span>        <span class="token literal-property property">outline</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> 0px solid pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在元素布局这块，使用四个Vue 原生的 input 组件，分别将输入的值定为时、分、秒、毫秒, 尽量使它们的内边距以及外边距缩小，去除浏览器输入时默认的样式，去除单个输入框的边框，给整个组件加上一个最外的边框。</p><h3 id="粘贴功能"><a href="#粘贴功能" class="headerlink" title="粘贴功能"></a>粘贴功能</h3><p>在每个输入框的 @input 事件中处理粘贴功能。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 自动解析输入 */</span><span class="token function">autoInput</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}.\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> strs2 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当单个输入的值匹配 /^\d{2}:\d{2}:\d{2}$/g 表达式时，证明粘贴的内容格式为 HH:mm:ss ，自动将输入的值分别解析给时、分、秒的输入结果中，并给毫秒补全为 ‘00’。<br>当单个输入的值匹配 /^\d{2}:\d{2}:\d{2}.\d{2}$/g 表达式时，证明粘贴的内容格式为 HH:mm:ss.SS ，自动将输入的值分别解析给时、分、秒、毫秒的输入结果中。<br>也就是用户在哪个输入框中粘贴对应格式的内容都会影响到整个时间输入框的结果。</p><h3 id="长度过滤"><a href="#长度过滤" class="headerlink" title="长度过滤"></a>长度过滤</h3><p>在每个输入框的 @input 事件中处理输入的长度。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 长度过滤</span><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'millisecond'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为时、分、秒、毫秒的对应长度最大都支持两位数，所以我们将单个输入框输入结果长度大于2的都截取，只留前面两位。</p><h3 id="过滤非数字"><a href="#过滤非数字" class="headerlink" title="过滤非数字"></a>过滤非数字</h3><p>因为每个输入框都需要显示两位数，比如值为1时需要显示成01，所以输入框的类型需要保留为字符输入。这样就带来用户可以输入非数字的问题，得在每个输入框的 @input 事件中处理字符的输入。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 过滤非数字输入</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D\d$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入为 字母数字</span>    temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入为 字母</span>    temp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入为 数字字母</span>    temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入为 字母字母</span>    temp <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将以上几种情况分别进行过来处理。</p><h3 id="输入大小限制"><a href="#输入大小限制" class="headerlink" title="输入大小限制"></a>输入大小限制</h3><p>时的输入范围为0～∞，分的输入范围为0～59，秒的输入范围为0～59，毫秒的输入范围为0～99。所以在每个输入框的 @input 事件中处理输入的大小。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'millisecond'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><p>在每个输入框的 @inputChange 事件中处理自动补全的问题。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">inputChange</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 补全 */</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'00'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">'0'</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输入只为一位数时在结果前面补0，当不输入时将结果补足为00。</p><h3 id="结果合并"><a href="#结果合并" class="headerlink" title="结果合并"></a>结果合并</h3><p>在用户输入结束后，用户获取的整体值的格式应该为 HH:mm:ss.SS ，所以我们需要将多个单结果合并在一起存储起来。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">endInput</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接将字符串按制定格式拼接即可。</p><h3 id="组件参数"><a href="#组件参数" class="headerlink" title="组件参数"></a>组件参数</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'00:00:00.00'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'timeInput'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">readonly</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token literal-property property">disabled</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的 time 为外部输入的时间参数，默认值为 00:00:00.00 。因为输入的是整体的时间字符串，所以需要将其分别解析到对应的时、分、秒、毫秒中。</p><h3 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function-variable function">time</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoInput</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">/** * 自动解析输入 */</span><span class="token function">autoInput</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}.\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> strs2 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听 time 参数，当其发生变化时就将其解析。</p><h3 id="整体实现代码"><a href="#整体实现代码" class="headerlink" title="整体实现代码"></a>整体实现代码</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sw-time-input"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-hour'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"hour"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-hour"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('hour', hour)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('hour', hour)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('hour', hour)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('hour', hour)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-minute'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"minute"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-minute"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"60"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('minute', minute)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('minute', minute)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('minute', minute)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('minute', minute)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-second'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"second"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-second"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>max<span class="token operator">=</span><span class="token string">"60"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('second', second)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('second', second)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('second', second)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('second', second)"</span>    <span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-separate"</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input      <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"id + '-millisecond'"</span>      v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"millisecond"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"time-input-text-millisecond"</span>      type<span class="token operator">=</span><span class="token string">"String"</span>      <span class="token operator">:</span>readonly<span class="token operator">=</span><span class="token string">"readonly"</span>      <span class="token operator">:</span>disabled<span class="token operator">=</span><span class="token string">"disabled"</span>      @focus<span class="token operator">=</span><span class="token string">"beginInput('millisecond', millisecond)"</span>      @blur<span class="token operator">=</span><span class="token string">"endInput('millisecond', millisecond)"</span>      @input<span class="token operator">=</span><span class="token string">"inputing('millisecond', millisecond)"</span>      @change<span class="token operator">=</span><span class="token string">"inputChange('millisecond', millisecond)"</span>    <span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'SwTimeInput'</span><span class="token punctuation">,</span>    <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">'time'</span><span class="token punctuation">,</span>        <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">'updateValue'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'00:00:00.00'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'timeInput'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">readonly</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">disabled</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">hour</span><span class="token operator">:</span> <span class="token string">'00'</span><span class="token punctuation">,</span>            <span class="token literal-property property">minute</span><span class="token operator">:</span> <span class="token string">'00'</span><span class="token punctuation">,</span>            <span class="token literal-property property">second</span><span class="token operator">:</span> <span class="token string">'00'</span><span class="token punctuation">,</span>            <span class="token literal-property property">millisecond</span><span class="token operator">:</span> <span class="token string">'00'</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">inputTime</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token function">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'updateValue'</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function-variable function">time</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> oldVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoInput</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token function">inputing</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 复制匹配</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">autoInput</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 长度过滤</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'millisecond'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 过滤非数字输入</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D\d$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\D\D$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 大小过滤</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'hour'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'minute'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'second'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">59</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> <span class="token string">'59'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'millisecond'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">inputChange</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>hour<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>minute<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completion</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'change'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">beginInput</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">endInput</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>inputTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">/**         * 补全         */</span>        <span class="token function">completion</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">'00'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">'0'</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">/**         * 自动解析输入         */</span>        <span class="token function">autoInput</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token string">'00'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d{2}:\d{2}:\d{2}.\d{2}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> strs <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> strs2 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>millisecond <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>strs2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>sw<span class="token operator">-</span>time<span class="token operator">-</span>input <span class="token punctuation">{</span>    <span class="token literal-property property">border</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">.</span>5px<span class="token punctuation">;</span>    border<span class="token operator">-</span>color<span class="token operator">:</span> #dcdfe6<span class="token punctuation">;</span>    border<span class="token operator">-</span>style<span class="token operator">:</span> solid<span class="token punctuation">;</span>    <span class="token literal-property property">width</span><span class="token operator">:</span> 85px<span class="token punctuation">;</span>    <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>    border<span class="token operator">-</span>radius<span class="token operator">:</span> 3px<span class="token punctuation">;</span>    text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>    <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span>time<span class="token operator">-</span>input<span class="token operator">-</span>text <span class="token punctuation">{</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>hour <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> right<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>minute <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>second <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>millisecond <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            <span class="token literal-property property">border</span><span class="token operator">:</span> 0px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> left<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            <span class="token literal-property property">width</span><span class="token operator">:</span> 15px<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            <span class="token literal-property property">padding</span><span class="token operator">:</span> 0px 0px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">&amp;</span><span class="token operator">-</span>separate <span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token operator">:</span> transparent<span class="token punctuation">;</span>            font<span class="token operator">-</span>size<span class="token operator">:</span> 12px<span class="token punctuation">;</span>            text<span class="token operator">-</span>align<span class="token operator">:</span> center<span class="token punctuation">;</span>            <span class="token literal-property property">height</span><span class="token operator">:</span> 25px<span class="token punctuation">;</span>            line<span class="token operator">-</span>height<span class="token operator">:</span> 25px<span class="token punctuation">;</span>            vertical<span class="token operator">-</span>align<span class="token operator">:</span> top<span class="token punctuation">;</span>            margin<span class="token operator">-</span>right<span class="token operator">:</span> <span class="token operator">-</span>4px<span class="token punctuation">;</span>            margin<span class="token operator">-</span>left<span class="token operator">:</span> <span class="token operator">-</span>4px<span class="token punctuation">;</span>            <span class="token literal-property property">color</span><span class="token operator">:</span> #<span class="token number">606266</span><span class="token punctuation">;</span>            margin<span class="token operator">-</span>top<span class="token operator">:</span> <span class="token operator">-</span>1px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/* 去除浏览器默认样式 */</span>    <span class="token literal-property property">input</span><span class="token operator">:</span>focus<span class="token punctuation">{</span>        <span class="token literal-property property">outline</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token literal-property property">border</span><span class="token operator">:</span> 0px solid pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置Gitalk评论系统</title>
      <link href="/2022/02/24/hexo/hexo-pei-zhi-gitalk-ping-lun-xi-tong/"/>
      <url>/2022/02/24/hexo/hexo-pei-zhi-gitalk-ping-lun-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Gitalk 是一款基于 GitHub Issue 和 Preact 开发的评论插件。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>使用GitHub登录</li><li>支持多语言</li><li>支持个人或组织</li><li>无干扰模式</li><li>支持快捷键提交评论</li></ul><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>Gitalk 要想使用 Github 的 Issue 功能，则需要在 Github 上创建一个授权应用，拿到应用的 id 和 密钥配置到 Gitalk 脚本中就可以了。</p><h2 id="配置Gitalk"><a href="#配置Gitalk" class="headerlink" title="配置Gitalk"></a>配置Gitalk</h2><h3 id="注册新应用"><a href="#注册新应用" class="headerlink" title="注册新应用"></a>注册新应用</h3><p>在GitHub上注册个新应用 <a href="https://github.com/settings/applications/new">地址</a> </p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202202240924020.png" alt="image-20220224092422913" style="zoom:100%;"><ul><li>Application name：应用名称</li><li>Homepage URL：hexo 博客的地址</li><li>Application description：应用描述</li><li>Authorization callback URL：hexo 博客的地址</li></ul><p>填写完成信息新建得到以下应用：</p><p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202202241045071.png" alt="image-20220224092941086"></p><p>图中的 <code>Client ID</code> 和 <code>Client secrets</code> 便是我们后面所需用到的信息。</p><h2 id="存放评论的仓库"><a href="#存放评论的仓库" class="headerlink" title="存放评论的仓库"></a>存放评论的仓库</h2><blockquote><p>这里可以新建个仓库存放评论，也可以直接用存放博客那个仓库，看个人选择。</p></blockquote><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202202241046040.png" alt="image-20220224104429854"></p><p>新建个仓库，名字自己确定，权限设置为公共。</p><h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这里我使用的主题是 matery，自身就继承了 <strong>Gitalk</strong> 组件。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gitalk:  enable: true  owner:  repo:  oauth:    clientId:     clientSecret:   admin:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>enable: true 开启评论组件</li><li>owner: GitHub 的用户名</li><li>repo: 存放仓库的名称，注意不是地址</li><li>clientId: 创建 Gitalk 应用时得到的 clientId 信息</li><li>clientSecret:  创建 Gitalk 应用时得到的 clientSecret 信息</li><li>admin：GitHub 的用户名</li></ul><h3 id="解决403"><a href="#解决403" class="headerlink" title="解决403"></a>解决403</h3><p>在配置文件中配置一下 gitalk 代理地址</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gitalk:  enable: true  owner:   repo: blog-comment  oauth:    clientId:     clientSecret:   admin:   proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改主题中 <strong>themes/hexo-theme-matery/layout/_partial/gitalk.ejs</strong> 文件，在21行处添加 <strong>proxy: ‘&lt;%- theme.gitalk.proxy %&gt;’,</strong></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.css.gitalk) %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/css/my-gitalk.css') %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card gitalk-card"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"comment_headling"</span> style<span class="token operator">=</span><span class="token string">"font-size: 20px; font-weight: 700; position: relative; padding-left: 20px; top: 15px; padding-bottom: 5px;"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-comments fa-fw"</span> aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>评论<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"gitalk-container"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.gitalk) %&gt;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">let</span> gitalk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gitalk</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">clientID</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.oauth.clientId %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">clientSecret</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.oauth.clientSecret %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">repo</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.repo %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">owner</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.owner %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitalk<span class="token punctuation">.</span>admin<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>        <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">'&lt;%- date(page.date, '</span><span class="token constant">YYYY</span><span class="token operator">-</span><span class="token constant">MM</span><span class="token operator">-</span><span class="token constant">DDTHH</span><span class="token operator">-</span>mm<span class="token operator">-</span>ss<span class="token string">') %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token string">'&lt;%- theme.gitalk.proxy %&gt;'</span><span class="token punctuation">,</span>        <span class="token literal-property property">distractionFreeMode</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token comment">// Facebook-like distraction free mode</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gitalk<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'gitalk-container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布生效"><a href="#发布生效" class="headerlink" title="发布生效"></a>发布生效</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo cleanhexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>发布新文章后应该去打卡一下，让 gitalk 初始化 Issues。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈对synchronized实现加锁场景的理解</title>
      <link href="/2022/02/23/springboot/tan-tan-dui-synchronized-shi-xian-jia-suo-chang-jing-de-li-jie/"/>
      <url>/2022/02/23/springboot/tan-tan-dui-synchronized-shi-xian-jia-suo-chang-jing-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>　　synchronized是Java中的关键字，synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性，Java中每一个对象都可以作为锁，这是synchronized实现同步的基础。</p><h2 id="对象锁和类锁"><a href="#对象锁和类锁" class="headerlink" title="对象锁和类锁"></a>对象锁和类锁</h2><p>　　当一个对象中有synchronized method或synchronized block的时候调用此对象的同步方法或进入其同步区域时，就必须先获得对象锁。如果此对象的对象锁已被其他调用者占用，则需要等待此锁被释放。<br>　　1、对象锁<br>　　Java的所有对象都含有1个互斥锁，这个锁由JVM自动获取和释放。线程进入synchronized方法的时候获取该对象的锁，当然如果已经有线程获取了这个对象的锁，那么当前线程会等待；synchronized方法正常返回或者抛异常而终止，JVM会自动释放对象锁。这里也体现了用synchronized来加锁的1个好处，方法抛异常的时候，锁仍然可以由JVM来自动释放。　<br>　　2、类锁<br>　　一个类不论被实例化多少次，其中的静态方法和静态变量在内存中都只有一份。所以，一旦一个静态的方法被申明为synchronized。此类所有的实例化对象在调用此方法，共用同一把锁，我们称之为类锁。<br>　　类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。Java类可能会有很多个对象，但是只有1个Class对象，也就是说类的不同实例之间共享该类的Class对象。Class对象其实也仅仅是1个Java对象，只不过有点特殊而已。由于每个Java对象都有1个互斥锁，而类的静态方法是需要Class对象。所以所谓的类锁，不过是Class对象的锁而已。</p><h2 id="加锁实现场景"><a href="#加锁实现场景" class="headerlink" title="加锁实现场景"></a>加锁实现场景</h2><p>　　对象锁是用来控制实例方法之间的同步，类锁是用来控制静态方法（或静态变量互斥体）之间的同步。  </p><p>1、未加锁  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SynchronizedTest</span> synchronizedTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadTest</span> threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span>synchronizedTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadTest</span> threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span>synchronizedTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　由执行结果可见，两个线程是异步执行的。  </p><p>2、普通方法加锁  </p><h3 id="多线程单对象执行"><a href="#多线程单对象执行" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　结果表明，虽然加了多线程，但加了synchronized关键字的方法还是同步执行的。  </p><h3 id="多线程多对象执行"><a href="#多线程多对象执行" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-1 : 0Thread-0 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　可以看到，虽然加了同步锁，但是不生效。</p><pre class="line-numbers language-none"><code class="language-none">当一个对象中有synchronized method或synchronized block的时候调用此对象的同步方法或进入其同步区域时，就必须先获得对象锁。如果此对象的对象锁已被其他调用者占用，则需要等待此锁被释放。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　因为这里两个线程执行时都新建一个对象，所以从执行对象中获取到的对象锁是不同的两个，也就是为什么锁不生效的原因了。   </p><p>3、类静态方法加锁  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　因为静态方法在执行时无需新建对象，直接由Class对象，只有一个Class对象，所以获取到锁是同一个。 </p><p>4、利用this对代码块加锁  </p><h3 id="多线程单对象执行-1"><a href="#多线程单对象执行-1" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　因为是调用同一个对象的方法，用this获取到的锁是同一个，所以是同步执行的。  </p><h3 id="多线程多对象执行-1"><a href="#多线程多对象执行-1" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　在不同的对象中执行，获取到的锁不是同一个，所以是异步的。 </p><p>5、利用类对代码块加锁  </p><h3 id="多线程单对象执行-2"><a href="#多线程单对象执行-2" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-2"><a href="#多线程多对象执行-2" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　无论是单对象还是多对象执行都是可以同步的，因为SynchronizedTest.class 类对象只有一个，所以拿到的对象锁是同一个。  </p><p>6、利用普通变量对代码块加锁</p><h3 id="多线程单对象执行-3"><a href="#多线程单对象执行-3" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-3"><a href="#多线程多对象执行-3" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-0 : 1Thread-1 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　由此可见，普通的类属性并不能实现全局锁。  </p><p>6、利用类静态变量对代码块加锁</p><h3 id="多线程单对象执行-4"><a href="#多线程单对象执行-4" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-4"><a href="#多线程多对象执行-4" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　很明显，类静态变量也是可以实现全局加锁的，原因是对象获取到到锁是同一个。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　上面分析了那么多种实现场景，对比了各场景是否能实现全局加锁。得出到结论是只要获取到的锁是同一个，那就能实现全局加锁，这里的全局加锁也就是所谓的类锁吧。<br>　　当然这种全局加锁只能在单实例中用用，如果是多实例，那也达不到全局锁的效果。这时还得看分布式锁。<br>　　对synchronized关键字理解对就那么多，有偏差的地方请指出。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两主三从数据库集群主备重做方法</title>
      <link href="/2022/02/22/mysql/liang-zhu-san-cong-shu-ju-ku-ji-qun-zhu-bei-chong-zuo-fang-fa/"/>
      <url>/2022/02/22/mysql/liang-zhu-san-cong-shu-ju-ku-ji-qun-zhu-bei-chong-zuo-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="集群结构图"><a href="#集群结构图" class="headerlink" title="集群结构图"></a>集群结构图</h2><p>​    该集群一共有五台设备，其中两台主，三台备。两台主机相互同步，三台主机各自分为两个通道同步两台主机，以达到数据同步到效果。</p><p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202201291017365.png" alt="结构图"></p><h2 id="主从同步恢复"><a href="#主从同步恢复" class="headerlink" title="主从同步恢复"></a>主从同步恢复</h2><p>在某些情况下，导致同步出错，需要重做主备来恢复数据库。</p><h3 id="制作数据包"><a href="#制作数据包" class="headerlink" title="制作数据包"></a>制作数据包</h3><p>选取一台数据相对准确的主机，这里我们选择Master1。登录机器制作全库数据包</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p*** --single-transaction --no-autocommit --set-gtid-purged=OFF --master-data=2 -A &gt;test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看数据包复制节点"><a href="#查看数据包复制节点" class="headerlink" title="查看数据包复制节点"></a>查看数据包复制节点</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">head -25 test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以上代码，回得到下面的输出结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-- MySQL dump 10.13  Distrib 8.0.22, for Linux (x86_64)---- Host: localhost    Database:-- -------------------------------------------------------- Server version8.0.22/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;/*!50503 SET NAMES utf8mb4 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE='+00:00' */;/*!50606 SET @OLD_INNODB_STATS_AUTO_RECALC=@@INNODB_STATS_AUTO_RECALC */;/*!50606 SET GLOBAL INNODB_STATS_AUTO_RECALC=OFF */;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;---- Position to start replication or point-in-time recovery from---- CHANGE MASTER TO MASTER_LOG_FILE='binlog.000188', MASTER_LOG_POS=2316558;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>CHANGE MASTER TO MASTER_LOG_FILE=’binlog.000188’, MASTER_LOG_POS=2316558;</p></blockquote><p>这个就是我们想要的数据。</p><h3 id="同步主库Master2"><a href="#同步主库Master2" class="headerlink" title="同步主库Master2"></a>同步主库Master2</h3><p>到这里就用test.sql 数据包同步另主库Master2了。</p><h3 id="停止binlog输出"><a href="#停止binlog输出" class="headerlink" title="停止binlog输出"></a>停止binlog输出</h3><p>登录数据库，执行以下代码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set sql_log_bin=0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p*** &lt; /data/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将test.sql 导入进 Msater2中。</p><h3 id="清除同步信息"><a href="#清除同步信息" class="headerlink" title="清除同步信息"></a>清除同步信息</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">stop slave;reset slave all; show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步主要是清除一下无效的同步信息。</p><h3 id="开启同步"><a href="#开启同步" class="headerlink" title="开启同步"></a>开启同步</h3><p>设置同步的节点。</p><pre class="line-numbers language-none"><code class="language-none">change master to master_host='172.30.4.5',master_user='slave',master_password='***',master_log_file='binlog.000188',master_log_pos=2316558;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 master_log_file 和 master_log_pos 数据就是从test.sql数据包中提取的信息。  </p><h5 id="开始同步"><a href="#开始同步" class="headerlink" title="开始同步"></a>开始同步</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;# 查看同步状态show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">       Slave_IO_State: Waiting for master to send event          Master_Host: 172.30.4.5          Master_User: slave          Master_Port: 3306        Connect_Retry: 60      Master_Log_File: binlog.000188  Read_Master_Log_Pos: 2324194       Relay_Log_File: relaylog-5.000002        Relay_Log_Pos: 7949Relay_Master_Log_File: binlog.000188     Slave_IO_Running: Yes    Slave_SQL_Running: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Slave_IO_Running 和 Slave_SQL_Running 两个状态都为Yes即说明同步状态正常。    </p></blockquote><h4 id="恢复binlog日志"><a href="#恢复binlog日志" class="headerlink" title="恢复binlog日志"></a>恢复binlog日志</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set sql_log_bin=1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这另一个主机的同步就完成了。</p><h3 id="同步主库Master1"><a href="#同步主库Master1" class="headerlink" title="同步主库Master1"></a>同步主库Master1</h3><p>因为两个主库是互为同步的，所以还得开启Master1的同步。</p><h4 id="查看Master2同步信息"><a href="#查看Master2同步信息" class="headerlink" title="查看Master2同步信息"></a>查看Master2同步信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show master status \G;*************************** 1. row ***************************             File: binlog.000010         Position: 2451890     Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: 4b33e04d-4987-11eb-9488-005056a98e78:1-391638:391640-840695:936025:936029:936039:936049:936069:936091:936117:936199:936203:936208:936240-936243,5987abbe-4987-11eb-af11-005056a96f47:1-25968:50772-94390:9359851 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启同步-1"><a href="#开启同步-1" class="headerlink" title="开启同步"></a>开启同步</h4><p>登录 Master1 数据库。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.6',master_user='slave',master_password='***',master_log_file='binlog.000010',master_log_pos=2451890;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到这两台主机的同步就算完成了。</p><h4 id="同步从库"><a href="#同步从库" class="headerlink" title="同步从库"></a>同步从库</h4><p>因为三台从库的同步步骤都是一样的，所以这里写一台的同步流程。</p><h4 id="导入数据-1"><a href="#导入数据-1" class="headerlink" title="导入数据"></a>导入数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p*** &lt; /data/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重置同步信息"><a href="#重置同步信息" class="headerlink" title="重置同步信息"></a>重置同步信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">stop slave;reset slave all; show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Msater2信息"><a href="#查看Msater2信息" class="headerlink" title="查看Msater2信息"></a>查看Msater2信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show master status \G;*************************** 1. row ***************************             File: binlog.000010         Position: 2459707     Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: 4b33e04d-4987-11eb-9488-005056a98e78:1-391638:391640-840695:936025:936029:936039:936049:936069:936091:936117:936199:936203:936208:936240-936243,5987abbe-4987-11eb-af11-005056a96f47:1-25980:50772-94390:9359851 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为这些信息是变化的，所以每台从库都应取最新的。</p></blockquote><h4 id="设置同步通道信息"><a href="#设置同步通道信息" class="headerlink" title="设置同步通道信息"></a>设置同步通道信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.5',master_user='slave',master_password='***',master_log_file='binlog.000188',master_log_pos=2316558 for channel '5';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.6',master_user='slave',master_password='***',master_log_file='binlog.000010',master_log_pos=2459707 for channel '6';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为数据包是由 .5 制作的，所以通道5用的是数据包的同步节点信息。通道6用的是Master2的同步节点信息。</p><h4 id="开启同步-2"><a href="#开启同步-2" class="headerlink" title="开启同步"></a>开启同步</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到这就完成了一个节点的同步了，重复上述步骤完成其他节点的同步制作即可完成整个集群的同步。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/2022/02/21/java/java-ji-he-zhi-shi-dian/"/>
      <url>/2022/02/21/java/java-ji-he-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaGuide学习笔记：<a href="https://javaguide.cn/java/collection/java-collection-questions-01/">JavaGuide</a></p></blockquote><h2 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h2><h3 id="Java集合概览"><a href="#Java集合概览" class="headerlink" title="Java集合概览"></a>Java集合概览</h3><p>​    Java 集合，也叫作容器，主要是由两大接口派生而来：一个是 <code>Collection </code> 接口，主要用于存放单一元素；另一个是 <code>Map</code> 接口，主要用于存放键值对。</p><p><strong>Collection</strong> 子接口：</p><ul><li>List</li><li>Set</li><li>Queue</li></ul><p><strong>List、Set、Queue、Map 四者的区别：</strong></p><ul><li>List：存储的元素是有序的，可重复性的。</li><li>Set：存储的元素是无序的，不可重复的。</li><li>Queue：按特定的排队规矩来确定先后顺序，存储的元素是有序的，可重复性的。</li><li>Map：存储的元素为键值对(key-value)。key是无序、不可重复的，value是无序的，可重复的。</li></ul><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><ul><li>ArrayList：Object[] 数组</li><li>Vactor：Object[] 数组</li><li>LinkedList：双向链表</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>HashSet：无序、唯一。基于 HashMap 实现的，底层采用 HashMap 来保存元素。</li><li>LinkedHashSet：LinkedHashSet 是 HashSet的子类，并且其内部是通过 LinkedHashMap 来实现。</li><li>TreeSet：有序，唯一。红黑树。</li></ul><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><ul><li>PriorityQueue：Object[] 数组来实现二叉堆。</li><li>ArrayQueue：Objectp[] 数组+双指针。</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li><p>HashMap：JDK1.8 之前 HashMap 由数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。</p></li><li><p>LikedHashMap：LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。</p></li><li><p>HashTable：数组+链表组成的，数组是 Hashtable 的主体，链表则是主要为了解决哈希冲突而存在的。</p></li><li><p>TreeMap：红黑树。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaGuide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot使用EasyExcel操作Excel文档</title>
      <link href="/2021/11/01/springboot/springboot-shi-yong-easyexcel-cao-zuo-excel-wen-dang/"/>
      <url>/2021/11/01/springboot/springboot-shi-yong-easyexcel-cao-zuo-excel-wen-dang/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>在使用Springboot框架作后台开发中经常要将后台中对表单数据进行导入导出操作。后台导出的数据结构一般都不会太复杂，使用EasyExcel便可快速地将这些数据进行导入导出操作，减少在开发的繁琐工作。</p><h2 id="EasyExcel-介绍"><a href="#EasyExcel-介绍" class="headerlink" title="EasyExcel 介绍"></a>EasyExcel 介绍</h2><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的由阿里巴巴开源的项目。在尽可能节约内存的情况下支持读写百M的Excel。在64M内存下，1分钟内读取75M(46W行25列)的Excel数据。</p><h2 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h2><ul><li>2+ 版本支持 Java7和Java6</li><li>3+ 版本至少 Java8</li></ul><blockquote><p>GitHub地址：<a href="https://github.com/alibaba/easyexcel">https://github.com/alibaba/easyexcel</a></p></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>本文只介绍EasyExcel在Springboot中使用的方法。</p><h3 id="Maven引用"><a href="#Maven引用" class="headerlink" title="Maven引用"></a>Maven引用</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">!--easyExcel--&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.0-beta3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这使用目前EasyExcel最新的版本，如果想看Maven能用哪些版本可以到该网站上查询：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p></blockquote><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@HeadRowHeight</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContentRowHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"ac_activity"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPTVActivityEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 活动标识 主键     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"活动标识"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> identify<span class="token punctuation">;</span>    <span class="token comment">/**     * 活动名称     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"活动名称"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 活动开始时间     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"开始时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 活动结束时间     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"结束时间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> endTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 活动类型     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"活动类型"</span><span class="token punctuation">,</span> converter <span class="token operator">=</span> <span class="token class-name">ActivityTypeConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> type<span class="token punctuation">;</span>    <span class="token comment">/**     * 是否按天参与 1是 0否     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否按天"</span><span class="token punctuation">,</span> converter <span class="token operator">=</span> <span class="token class-name">ActivityEachDayConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> eachDay<span class="token punctuation">;</span>    <span class="token comment">/**     * 基础次数     */</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"基础次数"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ColumnWidth</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> baseTimes<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建时间     */</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span>    <span class="token comment">/**     * 更新时间     */</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> updateTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该实体为项目原本就存在的代码，在添加Excel导入导出功能时，我们只需要在变量上添加相应的注解即可。</p><h3 id="常用注解介绍"><a href="#常用注解介绍" class="headerlink" title="常用注解介绍"></a>常用注解介绍</h3><ul><li><p>@HeadRowHeight<br>value: 用于类上，可以设置Excel表格头的高度</p></li><li><p>@ContentRowHeight<br>value: 用于类上，可以设置行的高度</p></li><li><p>@ExcelProperty<br>value: 设置字段的名称<br>index: 设置字段的索引<br>order: 设置字段的序号<br>converter: 字段属性转换的类</p></li><li><p>@ColumnWidth<br>value: 可以用于设置列的宽度</p></li><li><p>@DateTimeFormat<br>value: 日期类型的单元格格式化方法</p></li><li><p>@ExcelIgnore<br>添加这个注解的字段在导入导出时会被忽略</p></li></ul><h3 id="字段数据转换"><a href="#字段数据转换" class="headerlink" title="字段数据转换"></a>字段数据转换</h3><p>有些字段在系统的标识和Excel表格中的标识有所区别，在导入导出时，EasyExcel提供了接口，我们只需要实现相应的接口即可完成时间转换操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivityEachDayConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 读取数据时: 属性对应的java数据类型     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">supportJavaTypeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 写入数据时: excel内部的数据类型,因为请求耗时是long类型,对应excel是NUMBER类型     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">CellDataTypeEnum</span> <span class="token function">supportExcelTypeKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">CellDataTypeEnum</span><span class="token punctuation">.</span>STRING<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 读取回调     * @param cellData     * @param contentProperty     * @param globalConfiguration     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">convertToJavaData</span><span class="token punctuation">(</span><span class="token class-name">ReadCellData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cellData<span class="token punctuation">,</span> <span class="token class-name">ExcelContentProperty</span> contentProperty<span class="token punctuation">,</span> <span class="token class-name">GlobalConfiguration</span> globalConfiguration<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 转换为整型</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> cellData<span class="token punctuation">.</span><span class="token function">getStringValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"是"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 数据导出回调     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">WriteCellData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">convertToExcelData</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> value<span class="token punctuation">,</span> <span class="token class-name">ExcelContentProperty</span> contentProperty<span class="token punctuation">,</span> <span class="token class-name">GlobalConfiguration</span> globalConfiguration<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 转换为字符</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WriteCellData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"是"</span> <span class="token operator">:</span> <span class="token string">"否"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只需要在需要转化的字段注解上添加 converter 引用即可。  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否按天"</span><span class="token punctuation">,</span> converter <span class="token operator">=</span> <span class="token class-name">ActivityEachDayConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><p>这里使用的时Vue + Springboot 方式对数据进行导出操作。</p><h3 id="Springboot接口"><a href="#Springboot接口" class="headerlink" title="Springboot接口"></a>Springboot接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/export"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Map</span> params<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> identify <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"identify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>identify<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> activityService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"identify"</span><span class="token punctuation">,</span> identify<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        outputStream <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入响应输出流数据</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> <span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span>XLSX<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"活动配置"</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongestMatchColumnWidthStyleStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 自适应列宽(不是很适应,效果并不佳)</span>                <span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HorizontalCellStyleStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 注册上面设置的格式策略</span>                <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">IoUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Vue请求代码"><a href="#Vue请求代码" class="headerlink" title="Vue请求代码"></a>Vue请求代码</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'@/utils/request'</span><span class="token punctuation">;</span><span class="token comment">/** * 导出 */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>        <span class="token literal-property property">responseType</span><span class="token operator">:</span> <span class="token string">'arraybuffer'</span><span class="token punctuation">,</span>        data    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/** * 导出 */</span><span class="token keyword">async</span> <span class="token function">exportExcel</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">identify</span><span class="token operator">:</span> row<span class="token punctuation">.</span>identify  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> activityApi<span class="token punctuation">.</span><span class="token function">exportExcel</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// type类型可以设置为文本类型，这里是新版excel类型</span>    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>response<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> pdfUrl <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fileName <span class="token operator">=</span> <span class="token string">'活动配置文件_'</span> <span class="token operator">+</span> row<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 下载文件的名字</span>    <span class="token comment">// 对于&lt;a&gt;标签，只有 Firefox 和 Chrome（内核）支持 download 属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'download'</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      link<span class="token punctuation">.</span>href <span class="token operator">=</span> pdfUrl<span class="token punctuation">;</span>      link<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>      link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>pdfUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放URL 对象</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">// IE 浏览器兼容方法</span>      window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span><span class="token function">msSaveBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样通过上面简单的代码即可完成Excel表格导出操作。</p><h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><p>这里使用的时Vue + Springboot 方式对数据进行导入操作</p><h3 id="Springboot接口-1"><a href="#Springboot接口-1" class="headerlink" title="Springboot接口"></a>Springboot接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/import"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">RestResponse</span> <span class="token function">importExcel</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">RestResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传失败，请选择文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPTVActivityEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">IPTVActivityEntity</span> user<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                user<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>                user<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                activityService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">DuplicateKeyException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">RestResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"活动标识已存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">RestResponse</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传失败，请选择文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token class-name">RestResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EasyExcel 对Excel的解析是异步的，当上传的文件行数较多时，可以分批将数据写入数据库，减少应用对内存的消耗。</p><h3 id="Vue请求代码-1"><a href="#Vue请求代码-1" class="headerlink" title="Vue请求代码"></a>Vue请求代码</h3><p>上传使用了Element-ui组件，对上传做了文件限制等功能。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 导入 --&gt;&lt;el-upload  class="upload-expand"  :data="{}"  :action="uploadUrl(2)"  :headers="uploadHeader()"  :on-success="importUploadSuccess"  :on-error="uploadError"  accept=".xlsx"  :show-file-list="false"  :before-upload="beforeUploadFile"&gt;  &lt;el-button size="mini" type="primary"&gt;导入&lt;/el-button&gt;&lt;/el-upload&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 上传文件之前的钩子, 参数为上传的文件,若返回 false 或者返回 Promise 且被 reject，则停止上传</span><span class="token function">beforeUploadFile</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> extension <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>extension <span class="token operator">!==</span> <span class="token string">'xlsx'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">'只能上传后缀是.xlsx的文件'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 获取上传的头 */</span><span class="token function">uploadHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> header<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 返回上传的URL */</span><span class="token function">uploadUrl</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VUE_APP_BASE_API</span> <span class="token operator">+</span> <span class="token string">'/iptv/activity/import'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 上传成功 */</span><span class="token function">importUploadSuccess</span><span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> response<span class="token punctuation">.</span>code<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">===</span> <span class="token number">10000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'bottom-right'</span><span class="token punctuation">,</span>      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'提示'</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'导入成功！'</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>      <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">2000</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> msg <span class="token operator">=</span> response<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'错误'</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> msg    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">/** * 上传失败 */</span><span class="token function">uploadError</span><span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> file<span class="token punctuation">,</span> fileList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> msg <span class="token operator">=</span> response<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$notify<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'bottom-right'</span><span class="token punctuation">,</span>    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">'错误'</span><span class="token punctuation">,</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> msg  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>使用EasyExcel插件极大简便了Excel操作，消耗资源还相对较少，值得推荐使用。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> EasyExcel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-tree默认的勾选项</title>
      <link href="/2021/08/24/vue/el-tree-mo-ren-de-gou-xuan-xiang/"/>
      <url>/2021/08/24/vue/el-tree-mo-ren-de-gou-xuan-xiang/</url>
      
        <content type="html"><![CDATA[<p>官方提供API接口不好用，建议用以下的方法进行勾选。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">rolePermissionList</span><span class="token punctuation">(</span><span class="token parameter">roleId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">roleId</span><span class="token operator">:</span> roleId <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> roleApi<span class="token punctuation">.</span><span class="token function">permissionList</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>permissionIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>parent <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>permission<span class="token punctuation">.</span><span class="token function">setChecked</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>permissionId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> el-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Innodb Cluster节点扩容</title>
      <link href="/2021/02/25/mysql/innodb-cluster-jie-dian-kuo-rong/"/>
      <url>/2021/02/25/mysql/innodb-cluster-jie-dian-kuo-rong/</url>
      
        <content type="html"><![CDATA[<h3 id="获取完整的数据备份"><a href="#获取完整的数据备份" class="headerlink" title="获取完整的数据备份"></a>获取完整的数据备份</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/usr/local/mysql/bin/mysqldump --all-databases --add-drop-database --single-transaction --triggers --routines --port=mysql_port --user=root -p &gt; all.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在需要添加的节点上操作"><a href="#在需要添加的节点上操作" class="headerlink" title="在需要添加的节点上操作"></a>在需要添加的节点上操作</h3><h4 id="停止组复制"><a href="#停止组复制" class="headerlink" title="停止组复制"></a>停止组复制</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 停止组复制STOP GROUP_REPLICATION;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="重置GTID"><a href="#重置GTID" class="headerlink" title="重置GTID"></a>重置GTID</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 查看GTIDshow global variables like 'GTID_EXECUTED';# 重置GTIDreset master;reset slave;# 再次查看GTID，确认被清除干净show global variables like 'GTID_EXECUTED';# 查看节点是否为只读状态mysql&gt; SELECT @@global.read_only, @@global.super_read_only;+--------------------+--------------------------+| @@global.read_only | @@global.super_read_only |+--------------------+--------------------------+|                  1 |                        1 |+--------------------+--------------------------+1 row in set (0.00 sec)# 改为可读写SET GLOBAL super_read_only = 0;# 将刚获取到到备份数据导入扩展的节点mysql -uroot -p &lt; all.sql# 改为只读状态SET GLOBAL super_read_only = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将节点加入集群"><a href="#将节点加入集群" class="headerlink" title="将节点加入集群"></a>将节点加入集群</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">var c = dba.getCluster();c.addInstance('root@x.x.x.x:3306');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Innodb Cluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS使用黑魔法实现一键全局图片变灰白的一种方案</title>
      <link href="/2020/07/01/ios/ios-shi-yong-hei-mo-fa-shi-xian-yi-jian-quan-ju-tu-pian-bian-hui-bai-de-yi-chong-fang-an/"/>
      <url>/2020/07/01/ios/ios-shi-yong-hei-mo-fa-shi-xian-yi-jian-quan-ju-tu-pian-bian-hui-bai-de-yi-chong-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>　　有些特殊的时候会将APP设置成灰白的主题色，iOS不像在网页中有全局样式滤镜，那在iOS中应该如何便捷有效的实现该功能，接下来就分享我在项目中使用黑魔法（Method Swizzling）进行全局处理的一种实现方法。 　　</p><h2 id="Method-Swizzling-原理"><a href="#Method-Swizzling-原理" class="headerlink" title="Method Swizzling 原理"></a>Method Swizzling 原理</h2><p>　　Object-C中每个类都维护着一个方法（Method）列表，Method 则包含 SEL 和其对应 IMP 的信息。在Objective-C中调用一个方法时，其实是向一个对象发送消息SEL,根据（Method）列表找到对应的 IMP 并执行。<br>黑魔法（Method Swizzling）要做的事情就是把 SEL 和 IMP 的对应关系断开，并和新 IMP 生成对应关系，进行交换，在运行时偷偷替换系统对应的实现方法，有点像Java中的AOP。 　　</p><p>交换前：Asel－&gt;AImp Bsel－&gt;BImp<br>交换后：Asel－&gt;BImp Bsel－&gt;AImp</p><p>更多Method Swizzling的相关知识可以到网上查找。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>　　因为项目主要使用UIImageView来呈现图片,所以创建一个UIImageView的Category，并在该Category中实现方法交换。先来看看具体实现代码：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">//  UIImageView+xmtGrayImage.h#import &lt;UIKit/UIKit.h&gt;NS_ASSUME_NONNULL_BEGIN@interface UIImageView (xmtGrayImage)@endNS_ASSUME_NONNULL_END//  UIImageView+xmtGrayImage.m#import "UIImageView+xmtGrayImage.h"#import &lt;objc/runtime.h&gt;#import "UIImage+xmtImage.h"#import "xmtThemeManager.h"@implementation UIImageView (xmtGrayImage)#pragma mark - Swizzling+ (void)load {    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{        Method setImage = class_getInstanceMethod(self,@selector(setImage:));        Method xmtSwizzledSetImage = class_getInstanceMethod(self,@selector(xmtSwizzledSetImage:));        ///交换IMP        method_exchangeImplementations(setImage, xmtSwizzledSetImage);    });}- (void)xmtSwizzledSetImage:(UIImage *)image {        if (ThemeManager.isGrayImage) {        /// 图片使用灰白处理        image = [UIImage grayImage:image];    }    [self xmtSwizzledSetImage:image];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 + (void)load 方法中实现交换代码，可以保证在系统加载该类文件时就执行代码。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">+ (void)load {    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{       });}static dispatch_once_t onceToken;dispatch_once(&amp;onceToken, ^{});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 dispatch_once(&amp;onceToken 就是为了保证中括号内的代码只被执行一次，IMP 始终只被交换一次。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">///获取 setImage: 方法的 IMPMethod setImage = class_getInstanceMethod(self,@selector(setImage:));///获取 xmtSwizzledSetImage: 方法的 IMPMethod xmtSwizzledSetImage = class_getInstanceMethod(self,@selector(xmtSwizzledSetImage:));///交换 IMPmethod_exchangeImplementations(setImage, xmtSwizzledSetImage);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而这三句话是将UIImageView中的setImage:和xmtSwizzledSetImage:的IMP交换。<br>接下来再看看交换IMP后的这段代码。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">UIImageView *imageView = [UIImageView new];[imageView setImage:[UIImage imageNamed:@"xxxx.png"]];[imageView xmtSwizzledSetImage:[UIImage imageNamed:@"xxxx.png"]];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>　　因为对IMP进行交换，所以对 imageView 发送 [imageView setImage:[UIImage imageNamed:@”xxxx.png”]] 消息，系统执行的是 - (void)xmtSwizzledSetImage:(UIImage *)image 方法的实现代码；对 imageView 发送 [imageView xmtSwizzledSetImage:[UIImage imageNamed:@”xxxx.png”] 消息，系统执行的是 - (void)setImage:(UIImage *)image 的实现代码。</p><p>　　这也是为什么在 - (void)xmtSwizzledSetImage:(UIImage *)image 调用 - (void)xmtSwizzledSetImage:(UIImage *)image 不会发生循环调用的原因。</p><p>　　哈哈，是不是有点饶？啥发送消息，分明是调用方法？emmm…在OC中，调用方法就是对对象发送消息，等对象找到对应对IMP才是真正的执行方法，但为了通俗易懂，通常也会把发送消息说成调用方法。</p><p>　　到这，我们想将图片的改为灰白，在 - (void)xmtSwizzledSetImage:(UIImage *)image 中做相应的处理即可，因为在项目中所有对UIImageView控件设置图片都会经过该方法。同理，其他的图片控件也可以用这种方法进行处理。</p><p>　　顺道附一段对图片进行灰白处理对代码，有透明图层对也可以用。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">+ (UIImage *)grayImage:(UIImage *)sourceImage {    int width = sourceImage.size.width;    int height = sourceImage.size.height;    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceGray();    CGContextRef context = CGBitmapContextCreate(nil,width,height,8,0,colorSpace,kCGImageAlphaPremultipliedLast);    CGColorSpaceRelease(colorSpace);    if (context == NULL) {        return nil;    }    CGContextDrawImage(context,CGRectMake(0, 0, width, height), sourceImage.CGImage);    CGImageRef grayImageRef = CGBitmapContextCreateImage(context);    UIImage *grayImage = [UIImage imageWithCGImage:grayImageRef];    CGContextRelease(context);    CGImageRelease(grayImageRef);    return grayImage;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>　　通过黑魔法实现全局图片处理，也算有不小对收获吧。但自身对黑魔法只会些皮毛方法，有什么理解不对的地方还请赐教，及时指出</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ijkplayer iOS打包，支持HTTPS，升级ffmpeg4.0</title>
      <link href="/2020/04/10/ios/ijkplayer-ios-da-bao-zhi-chi-https-sheng-ji-ffmpeg4.0/"/>
      <url>/2020/04/10/ios/ijkplayer-ios-da-bao-zhi-chi-https-sheng-ji-ffmpeg4.0/</url>
      
        <content type="html"><![CDATA[<p>​    网上已经有很多关于打包IJKPlayer的教程，也基本能用。但关于如何升级ffmpeg内核以及HTTPS的还是比较少，现在我就分享一下如何升级ffmpeg，并总结一篇完整打包的流程。<br>　　打包参考：<a href="https://juejin.im/post/6844903620597841933">https://juejin.im/post/6844903620597841933</a><br>　　ijkplayer github地址：<a href="https://github.com/bilibili/ijkplayer">https://github.com/bilibili/ijkplayer</a></p><h3 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 先切到桌面cd Desktop/# 克隆下ijkplayer的代码git clone https://github.com/Bilibili/ijkplayer.gitcd ijkplayer# 切到最新版本k0.8.8git checkout -B latest k0.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置解码器"><a href="#配置解码器" class="headerlink" title="配置解码器"></a>配置解码器</h3><ul><li>module-default.sh 更多的编解码器/格式</li><li>module-lite-hevc.sh 较少的编解码器/格式(包括hevc)</li><li>module-lite.sh 较少的编解码器/格式(默认情况)<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd config# 删除默认的解码器rm module.sh# 创建一个软连接指向 module-lite-hevc.sh，这个可根据自己需求进行选择ln -s module-lite-hevc.sh module.shcd ..cd iossh compile-ffmpeg.sh clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置ffmpeg内核版本"><a href="#配置ffmpeg内核版本" class="headerlink" title="配置ffmpeg内核版本"></a>配置ffmpeg内核版本</h3>编辑 <font color="#ff0000">init-ios.sh</font> 文件<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ..vi init-ios.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#! /usr/bin/env bash</span><span class="token comment">#</span><span class="token comment"># Copyright (C) 2013-2015 Bilibili</span><span class="token comment"># Copyright (C) 2013-2015 Zhang Rui &lt;bbcallen@gmail.com&gt;</span><span class="token comment">#</span><span class="token comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment"># you may not use this file except in compliance with the License.</span><span class="token comment"># You may obtain a copy of the License at</span><span class="token comment">#</span><span class="token comment">#      http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment">#</span><span class="token comment"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment"># See the License for the specific language governing permissions and</span><span class="token comment"># limitations under the License.</span><span class="token comment">#</span><span class="token comment"># IJK_FFMPEG_UPSTREAM=git://git.videolan.org/ffmpeg.git</span>IJK_FFMPEG_UPSTREAM=https<span class="token punctuation">:</span>//github.com/Bilibili/FFmpeg.gitIJK_FFMPEG_FORK=https<span class="token punctuation">:</span>//github.com/Bilibili/FFmpeg.gitIJK_FFMPEG_COMMIT=ff3.4<span class="token punctuation">-</span><span class="token punctuation">-</span>ijk0.8.7<span class="token punctuation">-</span><span class="token punctuation">-</span>20180103<span class="token punctuation">-</span><span class="token number">-001</span>IJK_FFMPEG_LOCAL_REPO=extra/ffmpeg...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>打开后这可以大致看到这些内容，注意一下 <font color="#ff0000">IJK_FFMPEG_COMMIT</font>，就是在这个地方配置ffmpeg版本，如果不修改，默认是使用 ff3.4–ijk0.8.7–20180103–001 版本。<br>到bilibili fork的ffmpeg的库查看支持的版本 <a href="https://github.com/bilibili/FFmpeg/releases">https://github.com/bilibili/FFmpeg/releases</a></li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/9/1715df68ab362fd8~tplv-t2oaga2asx-image.image"><br>可以看到最新支持的版本是 <font color="#ff0000">ff4.0–ijk0.8.25–20200221–001</font>  ，由此见得，bilibili对ijkplayer这个库还是保持持续更新的。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_FFMPEG_COMMIT=ff4.0--ijk0.8.25--20200221--001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把对应的地方改成所选择的版本就可以了。</p><h3 id="获取ffmpeg相关文件"><a href="#获取ffmpeg相关文件" class="headerlink" title="获取ffmpeg相关文件"></a>获取ffmpeg相关文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 获取依赖的文件，这个会久一点，中途有有失败再执行一下就可以了./init-ios.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置支持HTTPS"><a href="#配置支持HTTPS" class="headerlink" title="配置支持HTTPS"></a>配置支持HTTPS</h3><p>如果不需要HTTPS可以跳过这一步。<br>同样编辑 <font color="#ff0000">init-ios-openssl.sh</font> 文件配置https的版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi init-ios-openssl.s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和升级ffmpeg一样，找到 <font color="#ff0000">IJK_OPENSSL_COMMIT</font> 项</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_OPENSSL_COMMIT=OpenSSL_1_0_2n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到默认版本是 OpenSSL_1_0_2n<br>同样到 <a href="https://github.com/bilibili/openssl/releases">https://github.com/bilibili/openssl/releases</a> 选择需要替换到版本,这里选择最新的 OpenSSL_1_0_2u 版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_OPENSSL_COMMIT=OpenSSL_1_0_2u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取HTTPS相关文件"><a href="#获取HTTPS相关文件" class="headerlink" title="获取HTTPS相关文件"></a>获取HTTPS相关文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 耐心等待一下./init-ios-openssl.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="编辑-module-sh-文件"><a href="#编辑-module-sh-文件" class="headerlink" title="编辑 module.sh 文件"></a>编辑 module.sh 文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi config/module.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾加入 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 支持httpsexport COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --enable-openssl"# ffmpeg4.0 需要export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-bsf=eac3_core"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并注释掉以下这两项</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-ffserver"#export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-vda"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考 <a href="https://github.com/bilibili/ijkplayer/issues/4772">https://github.com/bilibili/ijkplayer/issues/4772</a></p><h3 id="更改最低支持的版本"><a href="#更改最低支持的版本" class="headerlink" title="更改最低支持的版本"></a>更改最低支持的版本</h3><p>因为ffmpeg4.0 使用的部分API是iOS8.0以上的，所以这里必须改一下最低支持的版本，不然编译ffmpeg会出现类似的错误</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">libavcodec/videotoolbox.c:862:9: error: 'VTDecompressionSessionInvalidate' is only available on iOS 8.0 or newer      [-Werror,-Wunguarded-availability]        VTDecompressionSessionInvalidate(videotoolbox-&gt;session);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑 ios/tools/do-compile-ffmpeg.sh</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/tools/do-compile-ffmpeg.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到有关 <font color="#ff0000">version-min</font> 小于8.0的都改成8.0</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ "$FF_ARCH" = "i386" ]; then    FF_BUILD_NAME="ffmpeg-i386"    FF_BUILD_NAME_OPENSSL=openssl-i386    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_SIMULATOR"elif [ "$FF_ARCH" = "x86_64" ]; then    FF_BUILD_NAME="ffmpeg-x86_64"    FF_BUILD_NAME_OPENSSL=openssl-x86_64    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_SIMULATOR"elif [ "$FF_ARCH" = "armv7" ]; then    FF_BUILD_NAME="ffmpeg-armv7"    FF_BUILD_NAME_OPENSSL=openssl-armv7    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"#    FFMPEG_CFG_CPU="--cpu=cortex-a8"elif [ "$FF_ARCH" = "armv7s" ]; then    FF_BUILD_NAME="ffmpeg-armv7s"    FF_BUILD_NAME_OPENSSL=openssl-armv7s    FFMPEG_CFG_CPU="--cpu=swift"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"elif [ "$FF_ARCH" = "arm64" ]; then    FF_BUILD_NAME="ffmpeg-arm64"    FF_BUILD_NAME_OPENSSL=openssl-arm64    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"    FF_GASPP_EXPORT="GASPP_FIX_XCODE5=1"else    echo "unknown architecture $FF_ARCH";    exit 1fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理编辑 ios/tools/do-compile-openssl.sh 文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/tools/do-compile-openssl.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ "$FF_ARCH" = "i386" ]; then    FF_BUILD_NAME="openssl-i386"    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    OPENSSL_CFG_FLAGS="darwin-i386-cc $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "x86_64" ]; then    FF_BUILD_NAME="openssl-x86_64"    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    OPENSSL_CFG_FLAGS="darwin64-x86_64-cc $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "armv7" ]; then    FF_BUILD_NAME="openssl-armv7"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"#    OPENSSL_CFG_CPU="--cpu=cortex-a8"elif [ "$FF_ARCH" = "armv7s" ]; then    FF_BUILD_NAME="openssl-armv7s"    OPENSSL_CFG_CPU="--cpu=swift"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "arm64" ]; then    FF_BUILD_NAME="openssl-arm64"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"    FF_GASPP_EXPORT="GASPP_FIX_XCODE5=1"else    echo "unknown architecture $FF_ARCH";    exit 1fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="移除armv7"><a href="#移除armv7" class="headerlink" title="移除armv7"></a>移除armv7</h3><p>因为使用的是Xcode11.4打包，已经弱化了对 32 位的支持，所以需要移除armv7。如果想支持armv7,请使用低版本Xcode打包。<br>编辑 ios/compile-ffmpeg.sh 文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/compile-ffmpeg.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　找到 FF_ALL_ARCHS_IOS8_SDK=”<font color="#ff0000">armv7</font> arm64 i386 x86_64” 改为 FF_ALL_ARCHS_IOS8_SDK=”arm64 i386 x86_64”。<br>不然可能会出现一下的报错。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./libavutil/arm/asm.S:50:9: error: unknown directive        .arch armv7-a        ^make: *** [libavcodec/arm/aacpsdsp_neon.o] Error 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">libswresample/arm/audio_convert_neon.S:25:1: error: invalid symbol redefinition_swri_oldapi_conv_flt_to_s16_neon:^libswresample/arm/audio_convert_neon.S:70:1: error: invalid symbol redefinition_swri_oldapi_conv_fltp_to_s16_2ch_neon:^make: *** [libswresample/arm/audio_convert_neon.o] Error 1make: *** Waiting for unfinished jobs....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ios# 先编译OpenSSL，如果不需要支持https可以跳过./compile-openssl.sh all# 编译ffmpeg./compile-ffmpeg.sh all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>打开 IJKMediaPlayer.xcodeproj</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">open IJKMediaPlayer/IJKMediaPlayer.xcodeproj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加openssl"><a href="#添加openssl" class="headerlink" title="添加openssl"></a>添加openssl</h4><p>如果不需要支持HTTPS可以跳过。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/171619026cf178b6~tplv-t2oaga2asx-image.image"><br>选择IJKMediaFramework,添加libcrypto.a和libssl.a这两个文件，如果一次加不进就再尝试一次。</p><h4 id="配置打包版本"><a href="#配置打包版本" class="headerlink" title="配置打包版本"></a>配置打包版本</h4><p>因为我们前面已经把编译版本调到了最低支持8.0，最好把打包的版本也调到最低支持8.0。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/171619691a65d74b~tplv-t2oaga2asx-image.image"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161972c5cb6cae~tplv-t2oaga2asx-image.image"><br>这两个地方都调到8.0</p><h4 id="打真机包"><a href="#打真机包" class="headerlink" title="打真机包"></a>打真机包</h4><p>编辑scheme<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/1716198e3bf88eaf~tplv-t2oaga2asx-image.image"><br>改成Release<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b43b45e9666~tplv-t2oaga2asx-image.image"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b50a59355ce~tplv-t2oaga2asx-image.image"><br>直接键盘上按command + b 打包。<br>可能会碰到一下错误，是因为前面移除了armv7造成的。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b671d268eef~tplv-t2oaga2asx-image.image"><br>编辑 /build/universal/include/libavutil/avconfig.h 和 /build/universal/include/libffmpeg/config.h </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161baa7e26416c~tplv-t2oaga2asx-image.image"><br>将 include “armv7/config.h” 这行注释掉，两个文件都修改，然后继续打包。</p><h4 id="打模拟器包"><a href="#打模拟器包" class="headerlink" title="打模拟器包"></a>打模拟器包</h4><p>随便选择一个模拟器版本<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161bdd57039334~tplv-t2oaga2asx-image.image"></p><p>直接键盘上按command + b 打包。</p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>其实合不合都可以，合并后的包在真机或模拟器上都可以使用，但体积也会变大一倍。这个自行选择。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161c1677f48dcd~tplv-t2oaga2asx-image.image"><br>直接打开包所在的路径<br>用终端进入 Products 目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd /Users/LSW/Library/Developer/Xcode/DerivedData/IJKMediaPlayer-hdieucicuskakgftfkjtnzhnbsme/Build/Products<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用命令合并</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161ca5f3dd2ff2~tplv-t2oaga2asx-image.image"><br>直接把打包好的 IJKMediaFramework 替换 Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework，真机那个就是模拟器真机都能用的包了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我之前打包都完整过程了，至于如何导入在这就不提了，网上已经有很多文章。希望能帮到需要打包的同学，有问题请直接指出。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> ijkplayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS判断机型是否为iPhone X、XR、XS、XSMax的方法</title>
      <link href="/2019/10/29/ios/ios-pan-duan-ji-xing-shi-fou-wei-iphone-x-xr-xs-xsmax-de-fang-fa/"/>
      <url>/2019/10/29/ios/ios-pan-duan-ji-xing-shi-fou-wei-iphone-x-xr-xs-xsmax-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#define IPHONE_X (@available(iOS 11.0, *) ？ [[[UIApplication sharedApplication] delegate] window].safeAreaInsets.bottom &gt; 0.0 : NO )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    原理是根据手机底部安全区的高度 判断是否为 iPhone X、XR、XS、XS Max 几款机型，用宏的方法使用方便，在使用的地方 对 IPHONE_X 进行一下判断即可</p><p>注：关于xcode10警告问题</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#define IPHONE_X \({BOOL isPhoneX = NO;\if (@available(iOS 11.0, *)) {\isPhoneX = [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom &gt; 0.0;\}\(isPhoneX);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
