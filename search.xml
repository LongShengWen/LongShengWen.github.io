<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>谈谈对synchronized实现加锁场景的理解</title>
      <link href="/2022/02/23/tan-tan-dui-synchronized-shi-xian-jia-suo-chang-jing-de-li-jie/"/>
      <url>/2022/02/23/tan-tan-dui-synchronized-shi-xian-jia-suo-chang-jing-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>　　synchronized是Java中的关键字，synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性，Java中每一个对象都可以作为锁，这是synchronized实现同步的基础。</p><h2 id="对象锁和类锁"><a href="#对象锁和类锁" class="headerlink" title="对象锁和类锁"></a>对象锁和类锁</h2><p>　　当一个对象中有synchronized method或synchronized block的时候调用此对象的同步方法或进入其同步区域时，就必须先获得对象锁。如果此对象的对象锁已被其他调用者占用，则需要等待此锁被释放。<br>　　1、对象锁<br>　　Java的所有对象都含有1个互斥锁，这个锁由JVM自动获取和释放。线程进入synchronized方法的时候获取该对象的锁，当然如果已经有线程获取了这个对象的锁，那么当前线程会等待；synchronized方法正常返回或者抛异常而终止，JVM会自动释放对象锁。这里也体现了用synchronized来加锁的1个好处，方法抛异常的时候，锁仍然可以由JVM来自动释放。　<br>　　2、类锁<br>　　一个类不论被实例化多少次，其中的静态方法和静态变量在内存中都只有一份。所以，一旦一个静态的方法被申明为synchronized。此类所有的实例化对象在调用此方法，共用同一把锁，我们称之为类锁。<br>　　类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。Java类可能会有很多个对象，但是只有1个Class对象，也就是说类的不同实例之间共享该类的Class对象。Class对象其实也仅仅是1个Java对象，只不过有点特殊而已。由于每个Java对象都有1个互斥锁，而类的静态方法是需要Class对象。所以所谓的类锁，不过是Class对象的锁而已。</p><h2 id="加锁实现场景"><a href="#加锁实现场景" class="headerlink" title="加锁实现场景"></a>加锁实现场景</h2><p>　　对象锁是用来控制实例方法之间的同步，类锁是用来控制静态方法（或静态变量互斥体）之间的同步。  </p><p>1、未加锁  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SynchronizedTest</span> synchronizedTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadTest</span> threadA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span>synchronizedTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadTest</span> threadB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span>synchronizedTest<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　由执行结果可见，两个线程是异步执行的。  </p><p>2、普通方法加锁  </p><h3 id="多线程单对象执行"><a href="#多线程单对象执行" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　结果表明，虽然加了多线程，但加了synchronized关键字的方法还是同步执行的。  </p><h3 id="多线程多对象执行"><a href="#多线程多对象执行" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-1 : 0Thread-0 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　可以看到，虽然加了同步锁，但是不生效。</p><pre class="line-numbers language-none"><code class="language-none">当一个对象中有synchronized method或synchronized block的时候调用此对象的同步方法或进入其同步区域时，就必须先获得对象锁。如果此对象的对象锁已被其他调用者占用，则需要等待此锁被释放。  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　因为这里两个线程执行时都新建一个对象，所以从执行对象中获取到的对象锁是不同的两个，也就是为什么锁不生效的原因了。   </p><p>3、类静态方法加锁  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　因为静态方法在执行时无需新建对象，直接由Class对象，只有一个Class对象，所以获取到锁是同一个。 </p><p>4、利用this对代码块加锁  </p><h3 id="多线程单对象执行-1"><a href="#多线程单对象执行-1" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　因为是调用同一个对象的方法，用this获取到的锁是同一个，所以是同步执行的。  </p><h3 id="多线程多对象执行-1"><a href="#多线程多对象执行-1" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-1 : 1Thread-0 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　在不同的对象中执行，获取到的锁不是同一个，所以是异步的。 </p><p>5、利用类对代码块加锁  </p><h3 id="多线程单对象执行-2"><a href="#多线程单对象执行-2" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-2"><a href="#多线程多对象执行-2" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　无论是单对象还是多对象执行都是可以同步的，因为SynchronizedTest.class 类对象只有一个，所以拿到的对象锁是同一个。  </p><p>6、利用普通变量对代码块加锁</p><h3 id="多线程单对象执行-3"><a href="#多线程单对象执行-3" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-3"><a href="#多线程多对象执行-3" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-1 : 2Thread-0 : 1Thread-1 : 1Thread-0 : 0Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　由此可见，普通的类属性并不能实现全局锁。  </p><p>6、利用类静态变量对代码块加锁</p><h3 id="多线程单对象执行-4"><a href="#多线程单对象执行-4" class="headerlink" title="多线程单对象执行"></a>多线程单对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedTest<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程多对象执行-4"><a href="#多线程多对象执行-4" class="headerlink" title="多线程多对象执行"></a>多线程多对象执行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token class-name">SynchronizedTest</span> synchronizedTest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedTest <span class="token operator">=</span> synchronizedTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SynchronizedTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Thread-0 : 2Thread-0 : 1Thread-0 : 0Thread-1 : 2Thread-1 : 1Thread-1 : 0Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　很明显，类静态变量也是可以实现全局加锁的，原因是对象获取到到锁是同一个。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　上面分析了那么多种实现场景，对比了各场景是否能实现全局加锁。得出到结论是只要获取到的锁是同一个，那就能实现全局加锁，这里的全局加锁也就是所谓的类锁吧。<br>　　当然这种全局加锁只能在单实例中用用，如果是多实例，那也达不到全局锁的效果。这时还得看分布式锁。<br>　　对synchronized关键字理解对就那么多，有偏差的地方请指出。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两主三从数据库集群主备重做方法</title>
      <link href="/2022/02/22/liang-zhu-san-cong-shu-ju-ku-ji-qun-zhu-bei-chong-zuo-fang-fa/"/>
      <url>/2022/02/22/liang-zhu-san-cong-shu-ju-ku-ji-qun-zhu-bei-chong-zuo-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="集群结构图"><a href="#集群结构图" class="headerlink" title="集群结构图"></a>集群结构图</h2><p>​    该集群一共有五台设备，其中两台主，三台备。两台主机相互同步，三台主机各自分为两个通道同步两台主机，以达到数据同步到效果。</p><p><img src="https://cdn.jsdelivr.net/gh/LongShengWen/image@main/data/202201291017365.png" alt="结构图"></p><h2 id="主从同步恢复"><a href="#主从同步恢复" class="headerlink" title="主从同步恢复"></a>主从同步恢复</h2><p>在某些情况下，导致同步出错，需要重做主备来恢复数据库。</p><h3 id="制作数据包"><a href="#制作数据包" class="headerlink" title="制作数据包"></a>制作数据包</h3><p>选取一台数据相对准确的主机，这里我们选择Master1。登录机器制作全库数据包</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -uroot -p*** --single-transaction --no-autocommit --set-gtid-purged=OFF --master-data=2 -A &gt;test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看数据包复制节点"><a href="#查看数据包复制节点" class="headerlink" title="查看数据包复制节点"></a>查看数据包复制节点</h3><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">head -25 test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行以上代码，回得到下面的输出结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-- MySQL dump 10.13  Distrib 8.0.22, for Linux (x86_64)---- Host: localhost    Database:-- -------------------------------------------------------- Server version8.0.22/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;/*!50503 SET NAMES utf8mb4 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE='+00:00' */;/*!50606 SET @OLD_INNODB_STATS_AUTO_RECALC=@@INNODB_STATS_AUTO_RECALC */;/*!50606 SET GLOBAL INNODB_STATS_AUTO_RECALC=OFF */;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;---- Position to start replication or point-in-time recovery from---- CHANGE MASTER TO MASTER_LOG_FILE='binlog.000188', MASTER_LOG_POS=2316558;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>CHANGE MASTER TO MASTER_LOG_FILE=’binlog.000188’, MASTER_LOG_POS=2316558;</p></blockquote><p>这个就是我们想要的数据。</p><h3 id="同步主库Master2"><a href="#同步主库Master2" class="headerlink" title="同步主库Master2"></a>同步主库Master2</h3><p>到这里就用test.sql 数据包同步另主库Master2了。</p><h3 id="停止binlog输出"><a href="#停止binlog输出" class="headerlink" title="停止binlog输出"></a>停止binlog输出</h3><p>登录数据库，执行以下代码</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set sql_log_bin=0;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p*** &lt; /data/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将test.sql 导入进 Msater2中。</p><h3 id="清除同步信息"><a href="#清除同步信息" class="headerlink" title="清除同步信息"></a>清除同步信息</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">stop slave;reset slave all; show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一步主要是清除一下无效的同步信息。</p><h3 id="开启同步"><a href="#开启同步" class="headerlink" title="开启同步"></a>开启同步</h3><p>设置同步的节点。</p><pre class="line-numbers language-none"><code class="language-none">change master to master_host='172.30.4.5',master_user='slave',master_password='***',master_log_file='binlog.000188',master_log_pos=2316558;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 master_log_file 和 master_log_pos 数据就是从test.sql数据包中提取的信息。  </p><h5 id="开始同步"><a href="#开始同步" class="headerlink" title="开始同步"></a>开始同步</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;# 查看同步状态show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">       Slave_IO_State: Waiting for master to send event          Master_Host: 172.30.4.5          Master_User: slave          Master_Port: 3306        Connect_Retry: 60      Master_Log_File: binlog.000188  Read_Master_Log_Pos: 2324194       Relay_Log_File: relaylog-5.000002        Relay_Log_Pos: 7949Relay_Master_Log_File: binlog.000188     Slave_IO_Running: Yes    Slave_SQL_Running: Yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Slave_IO_Running 和 Slave_SQL_Running 两个状态都为Yes即说明同步状态正常。    </p></blockquote><h4 id="恢复binlog日志"><a href="#恢复binlog日志" class="headerlink" title="恢复binlog日志"></a>恢复binlog日志</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">set sql_log_bin=1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到这另一个主机的同步就完成了。</p><h3 id="同步主库Master1"><a href="#同步主库Master1" class="headerlink" title="同步主库Master1"></a>同步主库Master1</h3><p>因为两个主库是互为同步的，所以还得开启Master1的同步。</p><h4 id="查看Master2同步信息"><a href="#查看Master2同步信息" class="headerlink" title="查看Master2同步信息"></a>查看Master2同步信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show master status \G;*************************** 1. row ***************************             File: binlog.000010         Position: 2451890     Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: 4b33e04d-4987-11eb-9488-005056a98e78:1-391638:391640-840695:936025:936029:936039:936049:936069:936091:936117:936199:936203:936208:936240-936243,5987abbe-4987-11eb-af11-005056a96f47:1-25968:50772-94390:9359851 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启同步-1"><a href="#开启同步-1" class="headerlink" title="开启同步"></a>开启同步</h4><p>登录 Master1 数据库。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.6',master_user='slave',master_password='***',master_log_file='binlog.000010',master_log_pos=2451890;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到这两台主机的同步就算完成了。</p><h4 id="同步从库"><a href="#同步从库" class="headerlink" title="同步从库"></a>同步从库</h4><p>因为三台从库的同步步骤都是一样的，所以这里写一台的同步流程。</p><h4 id="导入数据-1"><a href="#导入数据-1" class="headerlink" title="导入数据"></a>导入数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -uroot -p*** &lt; /data/test.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重置同步信息"><a href="#重置同步信息" class="headerlink" title="重置同步信息"></a>重置同步信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">stop slave;reset slave all; show slave status\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看Msater2信息"><a href="#查看Msater2信息" class="headerlink" title="查看Msater2信息"></a>查看Msater2信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; show master status \G;*************************** 1. row ***************************             File: binlog.000010         Position: 2459707     Binlog_Do_DB: Binlog_Ignore_DB:Executed_Gtid_Set: 4b33e04d-4987-11eb-9488-005056a98e78:1-391638:391640-840695:936025:936029:936039:936049:936069:936091:936117:936199:936203:936208:936240-936243,5987abbe-4987-11eb-af11-005056a96f47:1-25980:50772-94390:9359851 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>因为这些信息是变化的，所以每台从库都应取最新的。</p></blockquote><h4 id="设置同步通道信息"><a href="#设置同步通道信息" class="headerlink" title="设置同步通道信息"></a>设置同步通道信息</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.5',master_user='slave',master_password='***',master_log_file='binlog.000188',master_log_pos=2316558 for channel '5';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">change master to master_host='172.30.4.6',master_user='slave',master_password='***',master_log_file='binlog.000010',master_log_pos=2459707 for channel '6';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为数据包是由 .5 制作的，所以通道5用的是数据包的同步节点信息。通道6用的是Master2的同步节点信息。</p><h4 id="开启同步-2"><a href="#开启同步-2" class="headerlink" title="开启同步"></a>开启同步</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 开启同步start slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>到这就完成了一个节点的同步了，重复上述步骤完成其他节点的同步制作即可完成整个集群的同步。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS使用黑魔法实现一键全局图片变灰白的一种方案</title>
      <link href="/2020/07/01/ios-shi-yong-hei-mo-fa-shi-xian-yi-jian-quan-ju-tu-pian-bian-hui-bai-de-yi-chong-fang-an/"/>
      <url>/2020/07/01/ios-shi-yong-hei-mo-fa-shi-xian-yi-jian-quan-ju-tu-pian-bian-hui-bai-de-yi-chong-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>　　有些特殊的时候会将APP设置成灰白的主题色，iOS不像在网页中有全局样式滤镜，那在iOS中应该如何便捷有效的实现该功能，接下来就分享我在项目中使用黑魔法（Method Swizzling）进行全局处理的一种实现方法。 　　</p><h2 id="Method-Swizzling-原理"><a href="#Method-Swizzling-原理" class="headerlink" title="Method Swizzling 原理"></a>Method Swizzling 原理</h2><p>　　Object-C中每个类都维护着一个方法（Method）列表，Method 则包含 SEL 和其对应 IMP 的信息。在Objective-C中调用一个方法时，其实是向一个对象发送消息SEL,根据（Method）列表找到对应的 IMP 并执行。<br>黑魔法（Method Swizzling）要做的事情就是把 SEL 和 IMP 的对应关系断开，并和新 IMP 生成对应关系，进行交换，在运行时偷偷替换系统对应的实现方法，有点像Java中的AOP。 　　</p><p>交换前：Asel－&gt;AImp Bsel－&gt;BImp<br>交换后：Asel－&gt;BImp Bsel－&gt;AImp</p><p>更多Method Swizzling的相关知识可以到网上查找。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>　　因为项目主要使用UIImageView来呈现图片,所以创建一个UIImageView的Category，并在该Category中实现方法交换。先来看看具体实现代码：</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">//  UIImageView+xmtGrayImage.h#import &lt;UIKit/UIKit.h&gt;NS_ASSUME_NONNULL_BEGIN@interface UIImageView (xmtGrayImage)@endNS_ASSUME_NONNULL_END//  UIImageView+xmtGrayImage.m#import "UIImageView+xmtGrayImage.h"#import &lt;objc/runtime.h&gt;#import "UIImage+xmtImage.h"#import "xmtThemeManager.h"@implementation UIImageView (xmtGrayImage)#pragma mark - Swizzling+ (void)load {    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{        Method setImage = class_getInstanceMethod(self,@selector(setImage:));        Method xmtSwizzledSetImage = class_getInstanceMethod(self,@selector(xmtSwizzledSetImage:));        ///交换IMP        method_exchangeImplementations(setImage, xmtSwizzledSetImage);    });}- (void)xmtSwizzledSetImage:(UIImage *)image {        if (ThemeManager.isGrayImage) {        /// 图片使用灰白处理        image = [UIImage grayImage:image];    }    [self xmtSwizzledSetImage:image];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 + (void)load 方法中实现交换代码，可以保证在系统加载该类文件时就执行代码。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">+ (void)load {    static dispatch_once_t onceToken;    dispatch_once(&amp;onceToken, ^{       });}static dispatch_once_t onceToken;dispatch_once(&amp;onceToken, ^{});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而 dispatch_once(&amp;onceToken 就是为了保证中括号内的代码只被执行一次，IMP 始终只被交换一次。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">///获取 setImage: 方法的 IMPMethod setImage = class_getInstanceMethod(self,@selector(setImage:));///获取 xmtSwizzledSetImage: 方法的 IMPMethod xmtSwizzledSetImage = class_getInstanceMethod(self,@selector(xmtSwizzledSetImage:));///交换 IMPmethod_exchangeImplementations(setImage, xmtSwizzledSetImage);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而这三句话是将UIImageView中的setImage:和xmtSwizzledSetImage:的IMP交换。<br>接下来再看看交换IMP后的这段代码。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">UIImageView *imageView = [UIImageView new];[imageView setImage:[UIImage imageNamed:@"xxxx.png"]];[imageView xmtSwizzledSetImage:[UIImage imageNamed:@"xxxx.png"]];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>　　因为对IMP进行交换，所以对 imageView 发送 [imageView setImage:[UIImage imageNamed:@”xxxx.png”]] 消息，系统执行的是 - (void)xmtSwizzledSetImage:(UIImage *)image 方法的实现代码；对 imageView 发送 [imageView xmtSwizzledSetImage:[UIImage imageNamed:@”xxxx.png”] 消息，系统执行的是 - (void)setImage:(UIImage *)image 的实现代码。</p><p>　　这也是为什么在 - (void)xmtSwizzledSetImage:(UIImage *)image 调用 - (void)xmtSwizzledSetImage:(UIImage *)image 不会发生循环调用的原因。</p><p>　　哈哈，是不是有点饶？啥发送消息，分明是调用方法？emmm…在OC中，调用方法就是对对象发送消息，等对象找到对应对IMP才是真正的执行方法，但为了通俗易懂，通常也会把发送消息说成调用方法。</p><p>　　到这，我们想将图片的改为灰白，在 - (void)xmtSwizzledSetImage:(UIImage *)image 中做相应的处理即可，因为在项目中所有对UIImageView控件设置图片都会经过该方法。同理，其他的图片控件也可以用这种方法进行处理。</p><p>　　顺道附一段对图片进行灰白处理对代码，有透明图层对也可以用。</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">+ (UIImage *)grayImage:(UIImage *)sourceImage {    int width = sourceImage.size.width;    int height = sourceImage.size.height;    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceGray();    CGContextRef context = CGBitmapContextCreate(nil,width,height,8,0,colorSpace,kCGImageAlphaPremultipliedLast);    CGColorSpaceRelease(colorSpace);    if (context == NULL) {        return nil;    }    CGContextDrawImage(context,CGRectMake(0, 0, width, height), sourceImage.CGImage);    CGImageRef grayImageRef = CGBitmapContextCreateImage(context);    UIImage *grayImage = [UIImage imageWithCGImage:grayImageRef];    CGContextRelease(context);    CGImageRelease(grayImageRef);    return grayImage;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>　　通过黑魔法实现全局图片处理，也算有不小对收获吧。但自身对黑魔法只会些皮毛方法，有什么理解不对的地方还请赐教，及时指出</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ijkplayer iOS打包，支持HTTPS，升级ffmpeg4.0</title>
      <link href="/2020/04/10/ijkplayer-ios-da-bao-zhi-chi-https-sheng-ji-ffmpeg4.0/"/>
      <url>/2020/04/10/ijkplayer-ios-da-bao-zhi-chi-https-sheng-ji-ffmpeg4.0/</url>
      
        <content type="html"><![CDATA[<p>​    网上已经有很多关于打包IJKPlayer的教程，也基本能用。但关于如何升级ffmpeg内核以及HTTPS的还是比较少，现在我就分享一下如何升级ffmpeg，并总结一篇完整打包的流程。<br>　　打包参考：<a href="https://juejin.im/post/6844903620597841933">https://juejin.im/post/6844903620597841933</a><br>　　ijkplayer github地址：<a href="https://github.com/bilibili/ijkplayer">https://github.com/bilibili/ijkplayer</a></p><h3 id="获取代码"><a href="#获取代码" class="headerlink" title="获取代码"></a>获取代码</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 先切到桌面cd Desktop/# 克隆下ijkplayer的代码git clone https://github.com/Bilibili/ijkplayer.gitcd ijkplayer# 切到最新版本k0.8.8git checkout -B latest k0.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置解码器"><a href="#配置解码器" class="headerlink" title="配置解码器"></a>配置解码器</h3><ul><li>module-default.sh 更多的编解码器/格式</li><li>module-lite-hevc.sh 较少的编解码器/格式(包括hevc)</li><li>module-lite.sh 较少的编解码器/格式(默认情况)<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd config# 删除默认的解码器rm module.sh# 创建一个软连接指向 module-lite-hevc.sh，这个可根据自己需求进行选择ln -s module-lite-hevc.sh module.shcd ..cd iossh compile-ffmpeg.sh clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置ffmpeg内核版本"><a href="#配置ffmpeg内核版本" class="headerlink" title="配置ffmpeg内核版本"></a>配置ffmpeg内核版本</h3>编辑 <font color="#ff0000">init-ios.sh</font> 文件<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ..vi init-ios.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#! /usr/bin/env bash</span><span class="token comment">#</span><span class="token comment"># Copyright (C) 2013-2015 Bilibili</span><span class="token comment"># Copyright (C) 2013-2015 Zhang Rui &lt;bbcallen@gmail.com&gt;</span><span class="token comment">#</span><span class="token comment"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment"># you may not use this file except in compliance with the License.</span><span class="token comment"># You may obtain a copy of the License at</span><span class="token comment">#</span><span class="token comment">#      http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment">#</span><span class="token comment"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment"># See the License for the specific language governing permissions and</span><span class="token comment"># limitations under the License.</span><span class="token comment">#</span><span class="token comment"># IJK_FFMPEG_UPSTREAM=git://git.videolan.org/ffmpeg.git</span>IJK_FFMPEG_UPSTREAM=https<span class="token punctuation">:</span>//github.com/Bilibili/FFmpeg.gitIJK_FFMPEG_FORK=https<span class="token punctuation">:</span>//github.com/Bilibili/FFmpeg.gitIJK_FFMPEG_COMMIT=ff3.4<span class="token punctuation">-</span><span class="token punctuation">-</span>ijk0.8.7<span class="token punctuation">-</span><span class="token punctuation">-</span>20180103<span class="token punctuation">-</span><span class="token number">-001</span>IJK_FFMPEG_LOCAL_REPO=extra/ffmpeg...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>打开后这可以大致看到这些内容，注意一下 <font color="#ff0000">IJK_FFMPEG_COMMIT</font>，就是在这个地方配置ffmpeg版本，如果不修改，默认是使用 ff3.4–ijk0.8.7–20180103–001 版本。<br>到bilibili fork的ffmpeg的库查看支持的版本 <a href="https://github.com/bilibili/FFmpeg/releases">https://github.com/bilibili/FFmpeg/releases</a></li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/9/1715df68ab362fd8~tplv-t2oaga2asx-image.image"><br>可以看到最新支持的版本是 <font color="#ff0000">ff4.0–ijk0.8.25–20200221–001</font>  ，由此见得，bilibili对ijkplayer这个库还是保持持续更新的。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_FFMPEG_COMMIT=ff4.0--ijk0.8.25--20200221--001<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把对应的地方改成所选择的版本就可以了。</p><h3 id="获取ffmpeg相关文件"><a href="#获取ffmpeg相关文件" class="headerlink" title="获取ffmpeg相关文件"></a>获取ffmpeg相关文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 获取依赖的文件，这个会久一点，中途有有失败再执行一下就可以了./init-ios.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置支持HTTPS"><a href="#配置支持HTTPS" class="headerlink" title="配置支持HTTPS"></a>配置支持HTTPS</h3><p>如果不需要HTTPS可以跳过这一步。<br>同样编辑 <font color="#ff0000">init-ios-openssl.sh</font> 文件配置https的版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi init-ios-openssl.s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和升级ffmpeg一样，找到 <font color="#ff0000">IJK_OPENSSL_COMMIT</font> 项</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_OPENSSL_COMMIT=OpenSSL_1_0_2n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到默认版本是 OpenSSL_1_0_2n<br>同样到 <a href="https://github.com/bilibili/openssl/releases">https://github.com/bilibili/openssl/releases</a> 选择需要替换到版本,这里选择最新的 OpenSSL_1_0_2u 版本。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">IJK_OPENSSL_COMMIT=OpenSSL_1_0_2u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="获取HTTPS相关文件"><a href="#获取HTTPS相关文件" class="headerlink" title="获取HTTPS相关文件"></a>获取HTTPS相关文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 耐心等待一下./init-ios-openssl.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="编辑-module-sh-文件"><a href="#编辑-module-sh-文件" class="headerlink" title="编辑 module.sh 文件"></a>编辑 module.sh 文件</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi config/module.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾加入 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 支持httpsexport COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --enable-openssl"# ffmpeg4.0 需要export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-bsf=eac3_core"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并注释掉以下这两项</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-ffserver"#export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-vda"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参考 <a href="https://github.com/bilibili/ijkplayer/issues/4772">https://github.com/bilibili/ijkplayer/issues/4772</a></p><h3 id="更改最低支持的版本"><a href="#更改最低支持的版本" class="headerlink" title="更改最低支持的版本"></a>更改最低支持的版本</h3><p>因为ffmpeg4.0 使用的部分API是iOS8.0以上的，所以这里必须改一下最低支持的版本，不然编译ffmpeg会出现类似的错误</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">libavcodec/videotoolbox.c:862:9: error: 'VTDecompressionSessionInvalidate' is only available on iOS 8.0 or newer      [-Werror,-Wunguarded-availability]        VTDecompressionSessionInvalidate(videotoolbox-&gt;session);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑 ios/tools/do-compile-ffmpeg.sh</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/tools/do-compile-ffmpeg.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到有关 <font color="#ff0000">version-min</font> 小于8.0的都改成8.0</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ "$FF_ARCH" = "i386" ]; then    FF_BUILD_NAME="ffmpeg-i386"    FF_BUILD_NAME_OPENSSL=openssl-i386    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_SIMULATOR"elif [ "$FF_ARCH" = "x86_64" ]; then    FF_BUILD_NAME="ffmpeg-x86_64"    FF_BUILD_NAME_OPENSSL=openssl-x86_64    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_SIMULATOR"elif [ "$FF_ARCH" = "armv7" ]; then    FF_BUILD_NAME="ffmpeg-armv7"    FF_BUILD_NAME_OPENSSL=openssl-armv7    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"#    FFMPEG_CFG_CPU="--cpu=cortex-a8"elif [ "$FF_ARCH" = "armv7s" ]; then    FF_BUILD_NAME="ffmpeg-armv7s"    FF_BUILD_NAME_OPENSSL=openssl-armv7s    FFMPEG_CFG_CPU="--cpu=swift"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"elif [ "$FF_ARCH" = "arm64" ]; then    FF_BUILD_NAME="ffmpeg-arm64"    FF_BUILD_NAME_OPENSSL=openssl-arm64    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    FFMPEG_CFG_FLAGS="$FFMPEG_CFG_FLAGS $FFMPEG_CFG_FLAGS_ARM"    FF_GASPP_EXPORT="GASPP_FIX_XCODE5=1"else    echo "unknown architecture $FF_ARCH";    exit 1fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理编辑 ios/tools/do-compile-openssl.sh 文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/tools/do-compile-openssl.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">if [ "$FF_ARCH" = "i386" ]; then    FF_BUILD_NAME="openssl-i386"    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    OPENSSL_CFG_FLAGS="darwin-i386-cc $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "x86_64" ]; then    FF_BUILD_NAME="openssl-x86_64"    FF_XCRUN_PLATFORM="iPhoneSimulator"    FF_XCRUN_OSVERSION="-mios-simulator-version-min=8.0"    OPENSSL_CFG_FLAGS="darwin64-x86_64-cc $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "armv7" ]; then    FF_BUILD_NAME="openssl-armv7"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"#    OPENSSL_CFG_CPU="--cpu=cortex-a8"elif [ "$FF_ARCH" = "armv7s" ]; then    FF_BUILD_NAME="openssl-armv7s"    OPENSSL_CFG_CPU="--cpu=swift"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"elif [ "$FF_ARCH" = "arm64" ]; then    FF_BUILD_NAME="openssl-arm64"    FF_XCRUN_OSVERSION="-miphoneos-version-min=8.0"    FF_XCODE_BITCODE="-fembed-bitcode"    OPENSSL_CFG_FLAGS="$OPENSSL_CFG_FLAGS_ARM $OPENSSL_CFG_FLAGS"    FF_GASPP_EXPORT="GASPP_FIX_XCODE5=1"else    echo "unknown architecture $FF_ARCH";    exit 1fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="移除armv7"><a href="#移除armv7" class="headerlink" title="移除armv7"></a>移除armv7</h3><p>因为使用的是Xcode11.4打包，已经弱化了对 32 位的支持，所以需要移除armv7。如果想支持armv7,请使用低版本Xcode打包。<br>编辑 ios/compile-ffmpeg.sh 文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vi ios/compile-ffmpeg.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　找到 FF_ALL_ARCHS_IOS8_SDK=”<font color="#ff0000">armv7</font> arm64 i386 x86_64” 改为 FF_ALL_ARCHS_IOS8_SDK=”arm64 i386 x86_64”。<br>不然可能会出现一下的报错。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./libavutil/arm/asm.S:50:9: error: unknown directive        .arch armv7-a        ^make: *** [libavcodec/arm/aacpsdsp_neon.o] Error 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">libswresample/arm/audio_convert_neon.S:25:1: error: invalid symbol redefinition_swri_oldapi_conv_flt_to_s16_neon:^libswresample/arm/audio_convert_neon.S:70:1: error: invalid symbol redefinition_swri_oldapi_conv_fltp_to_s16_2ch_neon:^make: *** [libswresample/arm/audio_convert_neon.o] Error 1make: *** Waiting for unfinished jobs....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd ios# 先编译OpenSSL，如果不需要支持https可以跳过./compile-openssl.sh all# 编译ffmpeg./compile-ffmpeg.sh all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>打开 IJKMediaPlayer.xcodeproj</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">open IJKMediaPlayer/IJKMediaPlayer.xcodeproj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加openssl"><a href="#添加openssl" class="headerlink" title="添加openssl"></a>添加openssl</h4><p>如果不需要支持HTTPS可以跳过。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/171619026cf178b6~tplv-t2oaga2asx-image.image"><br>选择IJKMediaFramework,添加libcrypto.a和libssl.a这两个文件，如果一次加不进就再尝试一次。</p><h4 id="配置打包版本"><a href="#配置打包版本" class="headerlink" title="配置打包版本"></a>配置打包版本</h4><p>因为我们前面已经把编译版本调到了最低支持8.0，最好把打包的版本也调到最低支持8.0。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/171619691a65d74b~tplv-t2oaga2asx-image.image"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161972c5cb6cae~tplv-t2oaga2asx-image.image"><br>这两个地方都调到8.0</p><h4 id="打真机包"><a href="#打真机包" class="headerlink" title="打真机包"></a>打真机包</h4><p>编辑scheme<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/1716198e3bf88eaf~tplv-t2oaga2asx-image.image"><br>改成Release<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b43b45e9666~tplv-t2oaga2asx-image.image"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b50a59355ce~tplv-t2oaga2asx-image.image"><br>直接键盘上按command + b 打包。<br>可能会碰到一下错误，是因为前面移除了armv7造成的。<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161b671d268eef~tplv-t2oaga2asx-image.image"><br>编辑 /build/universal/include/libavutil/avconfig.h 和 /build/universal/include/libffmpeg/config.h </p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161baa7e26416c~tplv-t2oaga2asx-image.image"><br>将 include “armv7/config.h” 这行注释掉，两个文件都修改，然后继续打包。</p><h4 id="打模拟器包"><a href="#打模拟器包" class="headerlink" title="打模拟器包"></a>打模拟器包</h4><p>随便选择一个模拟器版本<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161bdd57039334~tplv-t2oaga2asx-image.image"></p><p>直接键盘上按command + b 打包。</p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>其实合不合都可以，合并后的包在真机或模拟器上都可以使用，但体积也会变大一倍。这个自行选择。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161c1677f48dcd~tplv-t2oaga2asx-image.image"><br>直接打开包所在的路径<br>用终端进入 Products 目录</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd /Users/LSW/Library/Developer/Xcode/DerivedData/IJKMediaPlayer-hdieucicuskakgftfkjtnzhnbsme/Build/Products<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用命令合并</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/10/17161ca5f3dd2ff2~tplv-t2oaga2asx-image.image"><br>直接把打包好的 IJKMediaFramework 替换 Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework，真机那个就是模拟器真机都能用的包了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是我之前打包都完整过程了，至于如何导入在这就不提了，网上已经有很多文章。希望能帮到需要打包的同学，有问题请直接指出。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> ijkplayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS判断机型是否为iPhone X、XR、XS、XSMax的方法</title>
      <link href="/2019/10/29/ios-pan-duan-ji-xing-shi-fou-wei-iphone-x-xr-xs-xsmax-de-fang-fa/"/>
      <url>/2019/10/29/ios-pan-duan-ji-xing-shi-fou-wei-iphone-x-xr-xs-xsmax-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#define IPHONE_X (@available(iOS 11.0, *) ？ [[[UIApplication sharedApplication] delegate] window].safeAreaInsets.bottom &gt; 0.0 : NO )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    原理是根据手机底部安全区的高度 判断是否为 iPhone X、XR、XS、XS Max 几款机型，用宏的方法使用方便，在使用的地方 对 IPHONE_X 进行一下判断即可</p><p>注：关于xcode10警告问题</p><pre class="line-numbers language-objective-c" data-language="objective-c"><code class="language-objective-c">#define IPHONE_X \({BOOL isPhoneX = NO;\if (@available(iOS 11.0, *)) {\isPhoneX = [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom &gt; 0.0;\}\(isPhoneX);})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
